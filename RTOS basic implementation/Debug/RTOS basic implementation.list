
RTOS basic implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800747c  0800747c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  0800747c  0800747c  0000847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007484  08007484  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007484  08007484  00008484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800748c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  2000006c  080074f8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080074f8  00009c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013540  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003099  00000000  00000000  0001c5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001f678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6f  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000458b  00000000  00000000  00021327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a8  00000000  00000000  000258b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4c91  00000000  00000000  0003795a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  0010c630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00111060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007324 	.word	0x08007324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007324 	.word	0x08007324

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__io_putchar>:

volatile SystemState_t systemState = BOOT; // Initial state



int __io_putchar(int ch) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <__io_putchar+0x20>)
 80005b2:	f002 f90d 	bl	80027d0 <HAL_UART_Transmit>
    return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000088 	.word	0x20000088

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fbe0 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f844 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f902 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f8ac 	bl	8000734 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005dc:	f003 f8de 	bl	800379c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <main+0x64>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4811      	ldr	r0, [pc, #68]	@ (800062c <main+0x68>)
 80005e6:	f003 f923 	bl	8003830 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a10      	ldr	r2, [pc, #64]	@ (8000630 <main+0x6c>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <main+0x70>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0x74>)
 80005f6:	f003 f91b 	bl	8003830 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <main+0x78>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of bootTask */
  bootTaskHandle = osThreadNew(StartBootTask, NULL, &bootTask_attributes);
 8000600:	4a0f      	ldr	r2, [pc, #60]	@ (8000640 <main+0x7c>)
 8000602:	2100      	movs	r1, #0
 8000604:	480f      	ldr	r0, [pc, #60]	@ (8000644 <main+0x80>)
 8000606:	f003 f913 	bl	8003830 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <main+0x84>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartIdleTask, NULL, &idleTask_attributes);
 8000610:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <main+0x88>)
 8000612:	2100      	movs	r1, #0
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <main+0x8c>)
 8000616:	f003 f90b 	bl	8003830 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <main+0x90>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f003 f8e0 	bl	80037e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x60>
 8000628:	08007398 	.word	0x08007398
 800062c:	080008b5 	.word	0x080008b5
 8000630:	20000190 	.word	0x20000190
 8000634:	080073bc 	.word	0x080073bc
 8000638:	080008c5 	.word	0x080008c5
 800063c:	20000194 	.word	0x20000194
 8000640:	080073e0 	.word	0x080073e0
 8000644:	080008fd 	.word	0x080008fd
 8000648:	20000198 	.word	0x20000198
 800064c:	08007404 	.word	0x08007404
 8000650:	08000931 	.word	0x08000931
 8000654:	2000019c 	.word	0x2000019c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 f835 	bl	80066d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a29      	ldr	r2, [pc, #164]	@ (800072c <SystemClock_Config+0xd4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <SystemClock_Config+0xd8>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd84 	bl	80021f4 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f93f 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa24 	bl	8001b60 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071e:	f000 f929 	bl	8000974 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f001 ffe0 	bl	8002730 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f8fd 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000088 	.word	0x20000088
 8000784:	40004400 	.word	0x40004400

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_DMA_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <MX_DMA_Init+0x4c>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_DMA_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2105      	movs	r1, #5
 80007ae:	2010      	movs	r0, #16
 80007b0:	f000 fc5d 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007b4:	2010      	movs	r0, #16
 80007b6:	f000 fc76 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 fc55 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007c4:	2011      	movs	r0, #17
 80007c6:	f000 fc6e 	bl	80010a6 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a2c      	ldr	r2, [pc, #176]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a25      	ldr	r2, [pc, #148]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	4812      	ldr	r0, [pc, #72]	@ (80008ac <MX_GPIO_Init+0xd4>)
 8000864:	f001 f962 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <MX_GPIO_Init+0xd8>)
 8000880:	f000 ffa8 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000884:	2320      	movs	r3, #32
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_GPIO_Init+0xd4>)
 800089c:	f000 ff9a 	bl	80017d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020800 	.word	0x40020800

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f003 f876 	bl	80039ae <osDelay>
 80008c2:	e7fb      	b.n	80008bc <StartDefaultTask+0x8>

080008c4 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	const char *telemetryMessage = "Telemetry Data\r\n";
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <StartUartTask+0x30>)
 80008ce:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	    if (systemState == TELEMETRY)
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <StartUartTask+0x34>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d107      	bne.n	80008ea <StartUartTask+0x26>
	    {
	      // Send telemetry when in TELEMETRY state
	    	printf(telemetryMessage);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f005 fea6 	bl	800662c <iprintf>
//	      HAL_UART_Transmit(&huart2, (uint8_t *)telemetryMessage, strlen(telemetryMessage), HAL_MAX_DELAY);
			osDelay(1000); // Send every second
 80008e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e4:	f003 f863 	bl	80039ae <osDelay>
 80008e8:	e7f2      	b.n	80008d0 <StartUartTask+0xc>
	    }
	    else
	    {
	      osDelay(100); // Check state periodically
 80008ea:	2064      	movs	r0, #100	@ 0x64
 80008ec:	f003 f85f 	bl	80039ae <osDelay>
	    if (systemState == TELEMETRY)
 80008f0:	e7ee      	b.n	80008d0 <StartUartTask+0xc>
 80008f2:	bf00      	nop
 80008f4:	0800736c 	.word	0x0800736c
 80008f8:	200001a0 	.word	0x200001a0

080008fc <StartBootTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBootTask */
void StartBootTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBootTask */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Example: Reset an LED
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <StartBootTask+0x2c>)
 800090a:	f001 f90f 	bl	8001b2c <HAL_GPIO_WritePin>
	HAL_Delay(100); // Simulate boot process
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f000 faae 	bl	8000e70 <HAL_Delay>

	// Transition to IDLE
	systemState = IDLE;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <StartBootTask+0x30>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]

	// Terminate the Boot Task
	osThreadTerminate(NULL);
 800091a:	2000      	movs	r0, #0
 800091c:	f003 f81a 	bl	8003954 <osThreadTerminate>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f003 f844 	bl	80039ae <osDelay>
 8000926:	e7fb      	b.n	8000920 <StartBootTask+0x24>
 8000928:	40020000 	.word	0x40020000
 800092c:	200001a0 	.word	0x200001a0

08000930 <StartIdleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // Check USR_BTN
 8000938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <StartIdleTask+0x3c>)
 800093e:	f001 f8dd 	bl	8001afc <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10d      	bne.n	8000964 <StartIdleTask+0x34>
	    {
	      // Debounce
	      HAL_Delay(50);
 8000948:	2032      	movs	r0, #50	@ 0x32
 800094a:	f000 fa91 	bl	8000e70 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800094e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <StartIdleTask+0x3c>)
 8000954:	f001 f8d2 	bl	8001afc <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <StartIdleTask+0x34>
	      {
	        systemState = TELEMETRY; // Transition to TELEMETRY
 800095e:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <StartIdleTask+0x40>)
 8000960:	2202      	movs	r2, #2
 8000962:	701a      	strb	r2, [r3, #0]
	      }
	    }
	    osDelay(100); // Poll button periodically
 8000964:	2064      	movs	r0, #100	@ 0x64
 8000966:	f003 f822 	bl	80039ae <osDelay>
	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // Check USR_BTN
 800096a:	e7e5      	b.n	8000938 <StartIdleTask+0x8>
 800096c:	40020800 	.word	0x40020800
 8000970:	200001a0 	.word	0x200001a0

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <HAL_MspInit+0x54>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_MspInit+0x54>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fb52 	bl	800106e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a4b      	ldr	r2, [pc, #300]	@ (8000b24 <HAL_UART_MspInit+0x14c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 8090 	bne.w	8000b1c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	4b49      	ldr	r3, [pc, #292]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a48      	ldr	r2, [pc, #288]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b46      	ldr	r3, [pc, #280]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b42      	ldr	r3, [pc, #264]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	4a41      	ldr	r2, [pc, #260]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a28:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <HAL_UART_MspInit+0x150>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a34:	230c      	movs	r3, #12
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4837      	ldr	r0, [pc, #220]	@ (8000b2c <HAL_UART_MspInit+0x154>)
 8000a50:	f000 fec0 	bl	80017d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a54:	4b36      	ldr	r3, [pc, #216]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a56:	4a37      	ldr	r2, [pc, #220]	@ (8000b34 <HAL_UART_MspInit+0x15c>)
 8000a58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a68:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a94:	4826      	ldr	r0, [pc, #152]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000a96:	f000 fb21 	bl	80010dc <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000aa0:	f7ff ff68 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <HAL_UART_MspInit+0x158>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ab2:	4a22      	ldr	r2, [pc, #136]	@ (8000b3c <HAL_UART_MspInit+0x164>)
 8000ab4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ab8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000abc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ac0:	2240      	movs	r2, #64	@ 0x40
 8000ac2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000acc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000af2:	f000 faf3 	bl	80010dc <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000afc:	f7ff ff3a 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000b04:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_UART_MspInit+0x160>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2105      	movs	r1, #5
 8000b10:	2026      	movs	r0, #38	@ 0x26
 8000b12:	f000 faac 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b16:	2026      	movs	r0, #38	@ 0x26
 8000b18:	f000 fac5 	bl	80010a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	200000d0 	.word	0x200000d0
 8000b34:	40026088 	.word	0x40026088
 8000b38:	20000130 	.word	0x20000130
 8000b3c:	400260a0 	.word	0x400260a0

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f959 	bl	8000e30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b7e:	f004 fc19 	bl	80053b4 <xTaskGetSchedulerState>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d001      	beq.n	8000b8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b88:	f005 fa0e 	bl	8005fa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <DMA1_Stream5_IRQHandler+0x10>)
 8000b96:	f000 fbe1 	bl	800135c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000d0 	.word	0x200000d0

08000ba4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <DMA1_Stream6_IRQHandler+0x10>)
 8000baa:	f000 fbd7 	bl	800135c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000130 	.word	0x20000130

08000bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <USART2_IRQHandler+0x10>)
 8000bbe:	f001 fe93 	bl	80028e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000088 	.word	0x20000088

08000bcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fcbd 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
  return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f005 fd4c 	bl	8006774 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	200001a4 	.word	0x200001a4
 8000d10:	20004c48 	.word	0x20004c48

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f005 fd0b 	bl	8006780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc2b 	bl	80005c4 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d7c:	0800748c 	.word	0x0800748c
  ldr r2, =_sbss
 8000d80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d84:	20004c48 	.word	0x20004c48

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f94f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fdde 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f967 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f000 f92f 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200001a8 	.word	0x200001a8

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001a8 	.word	0x200001a8

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff feb6 	bl	8000e58 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e099      	b.n	800122c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e00f      	b.n	800113a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe9d 	bl	8000e58 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d908      	bls.n	800113a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e078      	b.n	800122c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e8      	bne.n	800111a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <HAL_DMA_Init+0x158>)
 8001154:	4013      	ands	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	2b04      	cmp	r3, #4
 8001192:	d107      	bne.n	80011a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	4313      	orrs	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d117      	bne.n	80011fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00e      	beq.n	80011fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fa7b 	bl	80016dc <DMA_CheckFifoParam>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2240      	movs	r2, #64	@ 0x40
 80011f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011fa:	2301      	movs	r3, #1
 80011fc:	e016      	b.n	800122c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa32 	bl	8001670 <DMA_CalcBaseAndBitshift>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001214:	223f      	movs	r2, #63	@ 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	f010803f 	.word	0xf010803f

08001238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001246:	f7ff fe07 	bl	8000e58 <HAL_GetTick>
 800124a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d008      	beq.n	800126a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2280      	movs	r2, #128	@ 0x80
 800125c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e052      	b.n	8001310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0216 	bic.w	r2, r2, #22
 8001278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <HAL_DMA_Abort+0x62>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0208 	bic.w	r2, r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ba:	e013      	b.n	80012e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012bc:	f7ff fdcc 	bl	8000e58 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d90c      	bls.n	80012e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e015      	b.n	8001310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1e4      	bne.n	80012bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f6:	223f      	movs	r2, #63	@ 0x3f
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d004      	beq.n	8001336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00c      	b.n	8001350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2205      	movs	r2, #5
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001368:	4b8e      	ldr	r3, [pc, #568]	@ (80015a4 <HAL_DMA_IRQHandler+0x248>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a8e      	ldr	r2, [pc, #568]	@ (80015a8 <HAL_DMA_IRQHandler+0x24c>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0a9b      	lsrs	r3, r3, #10
 8001374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001386:	2208      	movs	r2, #8
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01a      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0204 	bic.w	r2, r2, #4
 80013ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	2208      	movs	r2, #8
 80013b6:	409a      	lsls	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013cc:	2201      	movs	r2, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d012      	beq.n	80013fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f6:	f043 0202 	orr.w	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001402:	2204      	movs	r2, #4
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001420:	2204      	movs	r2, #4
 8001422:	409a      	lsls	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142c:	f043 0204 	orr.w	r2, r3, #4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001438:	2210      	movs	r2, #16
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d043      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03c      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001456:	2210      	movs	r2, #16
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d018      	beq.n	800149e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d108      	bne.n	800148c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d024      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	e01f      	b.n	80014cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
 800149c:	e016      	b.n	80014cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0208 	bic.w	r2, r2, #8
 80014ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d0:	2220      	movs	r2, #32
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 808f 	beq.w	80015fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8087 	beq.w	80015fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f2:	2220      	movs	r2, #32
 80014f4:	409a      	lsls	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b05      	cmp	r3, #5
 8001504:	d136      	bne.n	8001574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0216 	bic.w	r2, r2, #22
 8001514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <HAL_DMA_IRQHandler+0x1da>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0208 	bic.w	r2, r2, #8
 8001544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154a:	223f      	movs	r2, #63	@ 0x3f
 800154c:	409a      	lsls	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001566:	2b00      	cmp	r3, #0
 8001568:	d07e      	beq.n	8001668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
        }
        return;
 8001572:	e079      	b.n	8001668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01d      	beq.n	80015be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001594:	2b00      	cmp	r3, #0
 8001596:	d031      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e02c      	b.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d023      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
 80015bc:	e01e      	b.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0210 	bic.w	r2, r2, #16
 80015da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001600:	2b00      	cmp	r3, #0
 8001602:	d032      	beq.n	800166a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d022      	beq.n	8001656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2205      	movs	r2, #5
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d307      	bcc.n	8001644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <HAL_DMA_IRQHandler+0x2cc>
 8001642:	e000      	b.n	8001646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
 8001666:	e000      	b.n	800166a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001668:	bf00      	nop
    }
  }
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3b10      	subs	r3, #16
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <DMA_CalcBaseAndBitshift+0x68>)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d909      	bls.n	80016b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80016b0:	e007      	b.n	80016c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	aaaaaaab 	.word	0xaaaaaaab
 80016d8:	08007440 	.word	0x08007440

080016dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11f      	bne.n	8001736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d856      	bhi.n	80017aa <DMA_CheckFifoParam+0xce>
 80016fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <DMA_CheckFifoParam+0x28>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001715 	.word	0x08001715
 8001708:	08001727 	.word	0x08001727
 800170c:	08001715 	.word	0x08001715
 8001710:	080017ab 	.word	0x080017ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d046      	beq.n	80017ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001724:	e043      	b.n	80017ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800172e:	d140      	bne.n	80017b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001734:	e03d      	b.n	80017b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800173e:	d121      	bne.n	8001784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d837      	bhi.n	80017b6 <DMA_CheckFifoParam+0xda>
 8001746:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <DMA_CheckFifoParam+0x70>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	08001763 	.word	0x08001763
 8001754:	0800175d 	.word	0x0800175d
 8001758:	08001775 	.word	0x08001775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      break;
 8001760:	e030      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d025      	beq.n	80017ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001772:	e022      	b.n	80017ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800177c:	d11f      	bne.n	80017be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001782:	e01c      	b.n	80017be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d903      	bls.n	8001792 <DMA_CheckFifoParam+0xb6>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d003      	beq.n	8001798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001790:	e018      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
      break;
 8001796:	e015      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00e      	beq.n	80017c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
      break;
 80017a8:	e00b      	b.n	80017c2 <DMA_CheckFifoParam+0xe6>
      break;
 80017aa:	bf00      	nop
 80017ac:	e00a      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e008      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e006      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e004      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e002      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017c2:	bf00      	nop
    }
  } 
  
  return status; 
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e165      	b.n	8001abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8154 	bne.w	8001ab6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80ae 	beq.w	8001ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001968:	6453      	str	r3, [r2, #68]	@ 0x44
 800196a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_GPIO_Init+0x304>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <HAL_GPIO_Init+0x308>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d025      	beq.n	80019ee <HAL_GPIO_Init+0x21a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <HAL_GPIO_Init+0x30c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01f      	beq.n	80019ea <HAL_GPIO_Init+0x216>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <HAL_GPIO_Init+0x310>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x212>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae8 <HAL_GPIO_Init+0x314>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	@ (8001aec <HAL_GPIO_Init+0x318>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x20a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	@ (8001af0 <HAL_GPIO_Init+0x31c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x206>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	@ (8001af4 <HAL_GPIO_Init+0x320>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x202>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e00c      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a31      	ldr	r2, [pc, #196]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f ae96 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0cc      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b68      	ldr	r3, [pc, #416]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d90c      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b65      	ldr	r3, [pc, #404]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b8      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b50      	ldr	r3, [pc, #320]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494d      	ldr	r1, [pc, #308]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d044      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b47      	ldr	r3, [pc, #284]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e067      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4934      	ldr	r1, [pc, #208]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f902 	bl	8000e58 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f8fe 	bl	8000e58 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e032      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4916      	ldr	r1, [pc, #88]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490e      	ldr	r1, [pc, #56]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f855 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	490a      	ldr	r1, [pc, #40]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	5ccb      	ldrb	r3, [r1, r3]
 8001cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfe:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f862 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08007428 	.word	0x08007428
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	@ (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	08007438 	.word	0x08007438

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffdc 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0b5b      	lsrs	r3, r3, #13
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08007438 	.word	0x08007438

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d98:	b0ae      	sub	sp, #184	@ 0xb8
 8001d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dba:	4bcb      	ldr	r3, [pc, #812]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	f200 8206 	bhi.w	80021d4 <HAL_RCC_GetSysClockFreq+0x440>
 8001dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	080021d5 	.word	0x080021d5
 8001dd8:	080021d5 	.word	0x080021d5
 8001ddc:	080021d5 	.word	0x080021d5
 8001de0:	08001e0d 	.word	0x08001e0d
 8001de4:	080021d5 	.word	0x080021d5
 8001de8:	080021d5 	.word	0x080021d5
 8001dec:	080021d5 	.word	0x080021d5
 8001df0:	08001e15 	.word	0x08001e15
 8001df4:	080021d5 	.word	0x080021d5
 8001df8:	080021d5 	.word	0x080021d5
 8001dfc:	080021d5 	.word	0x080021d5
 8001e00:	08002005 	.word	0x08002005
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4bb9      	ldr	r3, [pc, #740]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e0a:	e1e7      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4bb8      	ldr	r3, [pc, #736]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e12:	e1e3      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4bb4      	ldr	r3, [pc, #720]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e20:	4bb1      	ldr	r3, [pc, #708]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d071      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2c:	4bae      	ldr	r3, [pc, #696]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e52:	4622      	mov	r2, r4
 8001e54:	462b      	mov	r3, r5
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e64:	0150      	lsls	r0, r2, #5
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	1a51      	subs	r1, r2, r1
 8001e6e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e70:	4629      	mov	r1, r5
 8001e72:	eb63 0301 	sbc.w	r3, r3, r1
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e84:	4649      	mov	r1, r9
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	4641      	mov	r1, r8
 8001e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8e:	4641      	mov	r1, r8
 8001e90:	018a      	lsls	r2, r1, #6
 8001e92:	4641      	mov	r1, r8
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e98:	4649      	mov	r1, r9
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001eac:	4649      	mov	r1, r9
 8001eae:	00cb      	lsls	r3, r1, #3
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	00ca      	lsls	r2, r1, #3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	460a      	mov	r2, r1
 8001eca:	eb42 0303 	adc.w	r3, r2, r3
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001edc:	4629      	mov	r1, r5
 8001ede:	024b      	lsls	r3, r1, #9
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	024a      	lsls	r2, r1, #9
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ef8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001efc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f00:	f7fe f9d6 	bl	80002b0 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f0e:	e067      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0159      	lsls	r1, r3, #5
 8001f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f44:	0150      	lsls	r0, r2, #5
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	1a51      	subs	r1, r2, r1
 8001f4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f50:	4629      	mov	r1, r5
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f64:	4649      	mov	r1, r9
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6e:	4641      	mov	r1, r8
 8001f70:	018a      	lsls	r2, r1, #6
 8001f72:	4641      	mov	r1, r8
 8001f74:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f78:	4649      	mov	r1, r9
 8001f7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f92:	4692      	mov	sl, r2
 8001f94:	469b      	mov	fp, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	eb1a 0303 	adds.w	r3, sl, r3
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	028b      	lsls	r3, r1, #10
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	028a      	lsls	r2, r1, #10
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc8:	2200      	movs	r2, #0
 8001fca:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fcc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fd2:	f7fe f96d 	bl	80002b0 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001ff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002002:	e0eb      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002010:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d06b      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201c:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	2200      	movs	r2, #0
 8002024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002026:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800202a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002030:	2300      	movs	r3, #0
 8002032:	667b      	str	r3, [r7, #100]	@ 0x64
 8002034:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002038:	4622      	mov	r2, r4
 800203a:	462b      	mov	r3, r5
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	0159      	lsls	r1, r3, #5
 8002046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204a:	0150      	lsls	r0, r2, #5
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4621      	mov	r1, r4
 8002052:	1a51      	subs	r1, r2, r1
 8002054:	61b9      	str	r1, [r7, #24]
 8002056:	4629      	mov	r1, r5
 8002058:	eb63 0301 	sbc.w	r3, r3, r1
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800206a:	4659      	mov	r1, fp
 800206c:	018b      	lsls	r3, r1, #6
 800206e:	4651      	mov	r1, sl
 8002070:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002074:	4651      	mov	r1, sl
 8002076:	018a      	lsls	r2, r1, #6
 8002078:	4651      	mov	r1, sl
 800207a:	ebb2 0801 	subs.w	r8, r2, r1
 800207e:	4659      	mov	r1, fp
 8002080:	eb63 0901 	sbc.w	r9, r3, r1
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002090:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002094:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002098:	4690      	mov	r8, r2
 800209a:	4699      	mov	r9, r3
 800209c:	4623      	mov	r3, r4
 800209e:	eb18 0303 	adds.w	r3, r8, r3
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	462b      	mov	r3, r5
 80020a6:	eb49 0303 	adc.w	r3, r9, r3
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020b8:	4629      	mov	r1, r5
 80020ba:	024b      	lsls	r3, r1, #9
 80020bc:	4621      	mov	r1, r4
 80020be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c2:	4621      	mov	r1, r4
 80020c4:	024a      	lsls	r2, r1, #9
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ce:	2200      	movs	r2, #0
 80020d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020d8:	f7fe f8ea 	bl	80002b0 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020e6:	e065      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x420>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x458>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	4611      	mov	r1, r2
 8002100:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
 8002106:	2300      	movs	r3, #0
 8002108:	657b      	str	r3, [r7, #84]	@ 0x54
 800210a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800210e:	4642      	mov	r2, r8
 8002110:	464b      	mov	r3, r9
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4641      	mov	r1, r8
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	4649      	mov	r1, r9
 800212e:	eb63 0301 	sbc.w	r3, r3, r1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002140:	4659      	mov	r1, fp
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	4651      	mov	r1, sl
 8002146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214a:	4651      	mov	r1, sl
 800214c:	018a      	lsls	r2, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	1a54      	subs	r4, r2, r1
 8002152:	4659      	mov	r1, fp
 8002154:	eb63 0501 	sbc.w	r5, r3, r1
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	00eb      	lsls	r3, r5, #3
 8002162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002166:	00e2      	lsls	r2, r4, #3
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	4643      	mov	r3, r8
 800216e:	18e3      	adds	r3, r4, r3
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	464b      	mov	r3, r9
 8002174:	eb45 0303 	adc.w	r3, r5, r3
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002186:	4629      	mov	r1, r5
 8002188:	028b      	lsls	r3, r1, #10
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002190:	4621      	mov	r1, r4
 8002192:	028a      	lsls	r2, r1, #10
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800219c:	2200      	movs	r2, #0
 800219e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021a6:	f7fe f883 	bl	80002b0 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x458>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	0f1b      	lsrs	r3, r3, #28
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80021c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021d2:	e003      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	37b8      	adds	r7, #184	@ 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	00f42400 	.word	0x00f42400

080021f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e28d      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8083 	beq.w	800231a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002214:	4b94      	ldr	r3, [pc, #592]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b04      	cmp	r3, #4
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002220:	4b91      	ldr	r3, [pc, #580]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
        || \
 8002228:	2b08      	cmp	r3, #8
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800222c:	4b8e      	ldr	r3, [pc, #568]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b8b      	ldr	r3, [pc, #556]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b88      	ldr	r3, [pc, #544]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002252:	d10b      	bne.n	800226c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	4b84      	ldr	r3, [pc, #528]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0x124>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d157      	bne.n	8002318 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e25a      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x90>
 8002276:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7b      	ldr	r2, [pc, #492]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xcc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0xb4>
 800228e:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xcc>
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fdc6 	bl	8000e58 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fdc2 	bl	8000e58 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e21f      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xdc>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fdb2 	bl	8000e58 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fdae 	bl	8000e58 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e20b      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x104>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06f      	beq.n	8002406 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002326:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d017      	beq.n	8002362 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002332:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
        || \
 800233a:	2b08      	cmp	r3, #8
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b44      	ldr	r3, [pc, #272]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x186>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1d3      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4937      	ldr	r1, [pc, #220]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_OscConfig+0x278>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fd5b 	bl	8000e58 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fd57 	bl	8000e58 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1b4      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4925      	ldr	r1, [pc, #148]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x278>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fd3a 	bl	8000e58 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fd36 	bl	8000e58 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e193      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_RCC_OscConfig+0x27c>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fd1a 	bl	8000e58 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fd16 	bl	8000e58 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e173      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x234>
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_OscConfig+0x27c>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fd03 	bl	8000e58 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e00e      	b.n	8002474 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002456:	f7fe fcff 	bl	8000e58 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d907      	bls.n	8002474 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e15c      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
 8002468:	40023800 	.word	0x40023800
 800246c:	42470000 	.word	0x42470000
 8002470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b8a      	ldr	r3, [pc, #552]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ea      	bne.n	8002456 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8097 	beq.w	80025bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b83      	ldr	r3, [pc, #524]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	4a7e      	ldr	r2, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ae:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b79      	ldr	r3, [pc, #484]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fcbf 	bl	8000e58 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe fcbb 	bl	8000e58 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e118      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x31e>
 8002504:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x358>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x340>
 800251a:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251e:	4a60      	ldr	r2, [pc, #384]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	@ 0x70
 8002526:	4b5e      	ldr	r3, [pc, #376]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252a:	4a5d      	ldr	r2, [pc, #372]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	@ 0x70
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x358>
 8002534:	4b5a      	ldr	r3, [pc, #360]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a59      	ldr	r2, [pc, #356]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	4b57      	ldr	r3, [pc, #348]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a56      	ldr	r2, [pc, #344]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fc80 	bl	8000e58 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7fe fc7c 	bl	8000e58 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0d7      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	4b4b      	ldr	r3, [pc, #300]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ee      	beq.n	800255c <HAL_RCC_OscConfig+0x368>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe fc6a 	bl	8000e58 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe fc66 	bl	8000e58 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0c1      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	4b40      	ldr	r3, [pc, #256]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ee      	bne.n	8002588 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	4a3a      	ldr	r2, [pc, #232]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ad 	beq.w	8002720 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c6:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d060      	beq.n	8002694 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d145      	bne.n	8002666 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fc3a 	bl	8000e58 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fc36 	bl	8000e58 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e093      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	491b      	ldr	r1, [pc, #108]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fc0b 	bl	8000e58 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fc07 	bl	8000e58 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e064      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x452>
 8002664:	e05c      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fbf4 	bl	8000e58 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fbf0 	bl	8000e58 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e04d      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x480>
 8002692:	e045      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e040      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_RCC_OscConfig+0x538>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d030      	beq.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d129      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d122      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d119      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10f      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e042      	b.n	80027c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f93e 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	@ 0x24
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fd69 	bl	800324c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d175      	bne.n	80028dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Transmit+0x2c>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e06e      	b.n	80028de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	@ 0x21
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800280e:	f7fe fb23 	bl	8000e58 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002828:	d108      	bne.n	800283c <HAL_UART_Transmit+0x6c>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e003      	b.n	8002844 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002844:	e02e      	b.n	80028a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2180      	movs	r1, #128	@ 0x80
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fb05 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e03a      	b.n	80028de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3302      	adds	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e007      	b.n	8002896 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1cb      	bne.n	8002846 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2140      	movs	r1, #64	@ 0x40
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fad1 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e006      	b.n	80028de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0ba      	sub	sp, #232	@ 0xe8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x66>
 800293a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fbc2 	bl	80030d0 <UART_Receive_IT>
      return;
 800294c:	e25b      	b.n	8002e06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800294e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80de 	beq.w	8002b14 <HAL_UART_IRQHandler+0x22c>
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002968:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80d1 	beq.w	8002b14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_UART_IRQHandler+0xae>
 800297e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_UART_IRQHandler+0xd2>
 80029a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_UART_IRQHandler+0xf6>
 80029c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d011      	beq.n	8002a0e <HAL_UART_IRQHandler+0x126>
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	f043 0208 	orr.w	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 81f2 	beq.w	8002dfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_UART_IRQHandler+0x14e>
 8002a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb4d 	bl	80030d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <HAL_UART_IRQHandler+0x17a>
 8002a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d04f      	beq.n	8002b02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa55 	bl	8002f12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b40      	cmp	r3, #64	@ 0x40
 8002a74:	d141      	bne.n	8002afa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1d9      	bne.n	8002a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d013      	beq.n	8002af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc8 <HAL_UART_IRQHandler+0x3e0>)
 8002ad0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fc1e 	bl	8001318 <HAL_DMA_Abort_IT>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	e00e      	b.n	8002b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f99e 	bl	8002e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	e00a      	b.n	8002b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f99a 	bl	8002e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e006      	b.n	8002b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f996 	bl	8002e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b0e:	e175      	b.n	8002dfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	bf00      	nop
    return;
 8002b12:	e173      	b.n	8002dfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 814f 	bne.w	8002dbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8148 	beq.w	8002dbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8141 	beq.w	8002dbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b40      	cmp	r3, #64	@ 0x40
 8002b5c:	f040 80b6 	bne.w	8002ccc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8145 	beq.w	8002e00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	f080 813e 	bcs.w	8002e00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b96:	f000 8088 	beq.w	8002caa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002bc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1d9      	bne.n	8002b9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e1      	bne.n	8002be6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3314      	adds	r3, #20
 8002c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e3      	bne.n	8002c22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c7a:	f023 0310 	bic.w	r3, r3, #16
 8002c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e3      	bne.n	8002c68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fac7 	bl	8001238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8c1 	bl	8002e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cc6:	e09b      	b.n	8002e00 <HAL_UART_IRQHandler+0x518>
 8002cc8:	08002fd9 	.word	0x08002fd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 808e 	beq.w	8002e04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8089 	beq.w	8002e04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d16:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e3      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	623b      	str	r3, [r7, #32]
   return(result);
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e3      	bne.n	8002d2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0310 	bic.w	r3, r3, #16
 8002d86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d94:	61fa      	str	r2, [r7, #28]
 8002d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	69b9      	ldr	r1, [r7, #24]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	617b      	str	r3, [r7, #20]
   return(result);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e3      	bne.n	8002d70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f847 	bl	8002e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dba:	e023      	b.n	8002e04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_UART_IRQHandler+0x4f4>
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f913 	bl	8003000 <UART_Transmit_IT>
    return;
 8002dda:	e014      	b.n	8002e06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <HAL_UART_IRQHandler+0x51e>
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f953 	bl	80030a0 <UART_EndTransmit_IT>
    return;
 8002dfa:	e004      	b.n	8002e06 <HAL_UART_IRQHandler+0x51e>
    return;
 8002dfc:	bf00      	nop
 8002dfe:	e002      	b.n	8002e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e04:	bf00      	nop
  }
}
 8002e06:	37e8      	adds	r7, #232	@ 0xe8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e03b      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e78:	d037      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fd ffed 	bl	8000e58 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e03a      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d023      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b80      	cmp	r3, #128	@ 0x80
 8002ea6:	d020      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b40      	cmp	r3, #64	@ 0x40
 8002eac:	d01d      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d116      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f81d 	bl	8002f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2208      	movs	r2, #8
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d0b4      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b095      	sub	sp, #84	@ 0x54
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d119      	bne.n	8002fbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f023 0310 	bic.w	r3, r3, #16
 8002fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e5      	bne.n	8002f8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fcc:	bf00      	nop
 8002fce:	3754      	adds	r7, #84	@ 0x54
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff1e 	bl	8002e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b21      	cmp	r3, #33	@ 0x21
 8003012:	d13e      	bne.n	8003092 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301c:	d114      	bne.n	8003048 <UART_Transmit_IT+0x48>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d110      	bne.n	8003048 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]
 8003046:	e008      	b.n	800305a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6211      	str	r1, [r2, #32]
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800307c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800308c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff fea3 	bl	8002e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	@ 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b22      	cmp	r3, #34	@ 0x22
 80030e2:	f040 80ae 	bne.w	8003242 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	d117      	bne.n	8003120 <UART_Receive_IT+0x50>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d113      	bne.n	8003120 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	b29a      	uxth	r2, r3
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
 800311e:	e026      	b.n	800316e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	d007      	beq.n	8003144 <UART_Receive_IT+0x74>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <UART_Receive_IT+0x82>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e008      	b.n	8003164 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800315e:	b2da      	uxtb	r2, r3
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4619      	mov	r1, r3
 800317c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15d      	bne.n	800323e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0220 	bic.w	r2, r2, #32
 8003190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d135      	bne.n	8003234 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	613b      	str	r3, [r7, #16]
   return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f023 0310 	bic.w	r3, r3, #16
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ee:	623a      	str	r2, [r7, #32]
 80031f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d10a      	bne.n	8003226 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fe0b 	bl	8002e48 <HAL_UARTEx_RxEventCallback>
 8003232:	e002      	b.n	800323a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fdf3 	bl	8002e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e002      	b.n	8003244 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3730      	adds	r7, #48	@ 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b0c0      	sub	sp, #256	@ 0x100
 8003252:	af00      	add	r7, sp, #0
 8003254:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	68d9      	ldr	r1, [r3, #12]
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	ea40 0301 	orr.w	r3, r0, r1
 8003274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	431a      	orrs	r2, r3
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	431a      	orrs	r2, r3
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032a4:	f021 010c 	bic.w	r1, r1, #12
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032b2:	430b      	orrs	r3, r1
 80032b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	6999      	ldr	r1, [r3, #24]
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	ea40 0301 	orr.w	r3, r0, r1
 80032d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b8f      	ldr	r3, [pc, #572]	@ (8003518 <UART_SetConfig+0x2cc>)
 80032dc:	429a      	cmp	r2, r3
 80032de:	d005      	beq.n	80032ec <UART_SetConfig+0xa0>
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b8d      	ldr	r3, [pc, #564]	@ (800351c <UART_SetConfig+0x2d0>)
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d104      	bne.n	80032f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7fe fd3e 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 80032f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032f4:	e003      	b.n	80032fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f6:	f7fe fd25 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80032fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003308:	f040 810c 	bne.w	8003524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800330c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003310:	2200      	movs	r2, #0
 8003312:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003316:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800331a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	1891      	adds	r1, r2, r2
 8003324:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003326:	415b      	adcs	r3, r3
 8003328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800332a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800332e:	4621      	mov	r1, r4
 8003330:	eb12 0801 	adds.w	r8, r2, r1
 8003334:	4629      	mov	r1, r5
 8003336:	eb43 0901 	adc.w	r9, r3, r1
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334e:	4690      	mov	r8, r2
 8003350:	4699      	mov	r9, r3
 8003352:	4623      	mov	r3, r4
 8003354:	eb18 0303 	adds.w	r3, r8, r3
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800335c:	462b      	mov	r3, r5
 800335e:	eb49 0303 	adc.w	r3, r9, r3
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003372:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800337a:	460b      	mov	r3, r1
 800337c:	18db      	adds	r3, r3, r3
 800337e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003380:	4613      	mov	r3, r2
 8003382:	eb42 0303 	adc.w	r3, r2, r3
 8003386:	657b      	str	r3, [r7, #84]	@ 0x54
 8003388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800338c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003390:	f7fc ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <UART_SetConfig+0x2d4>)
 800339a:	fba3 2302 	umull	r2, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	011c      	lsls	r4, r3, #4
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033bc:	415b      	adcs	r3, r3
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033c4:	4641      	mov	r1, r8
 80033c6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ca:	4649      	mov	r1, r9
 80033cc:	eb43 0b01 	adc.w	fp, r3, r1
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e4:	4692      	mov	sl, r2
 80033e6:	469b      	mov	fp, r3
 80033e8:	4643      	mov	r3, r8
 80033ea:	eb1a 0303 	adds.w	r3, sl, r3
 80033ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033f2:	464b      	mov	r3, r9
 80033f4:	eb4b 0303 	adc.w	r3, fp, r3
 80033f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003408:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800340c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003410:	460b      	mov	r3, r1
 8003412:	18db      	adds	r3, r3, r3
 8003414:	643b      	str	r3, [r7, #64]	@ 0x40
 8003416:	4613      	mov	r3, r2
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
 800341e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003426:	f7fc ff43 	bl	80002b0 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4611      	mov	r1, r2
 8003430:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003432:	fba3 2301 	umull	r2, r3, r3, r1
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2264      	movs	r2, #100	@ 0x64
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	1acb      	subs	r3, r1, r3
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003446:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003448:	fba3 2302 	umull	r2, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003454:	441c      	add	r4, r3
 8003456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003460:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	1891      	adds	r1, r2, r2
 800346e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003470:	415b      	adcs	r3, r3
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003478:	4641      	mov	r1, r8
 800347a:	1851      	adds	r1, r2, r1
 800347c:	6339      	str	r1, [r7, #48]	@ 0x30
 800347e:	4649      	mov	r1, r9
 8003480:	414b      	adcs	r3, r1
 8003482:	637b      	str	r3, [r7, #52]	@ 0x34
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003490:	4659      	mov	r1, fp
 8003492:	00cb      	lsls	r3, r1, #3
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349a:	4651      	mov	r1, sl
 800349c:	00ca      	lsls	r2, r1, #3
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	4642      	mov	r2, r8
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ac:	464b      	mov	r3, r9
 80034ae:	460a      	mov	r2, r1
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034cc:	460b      	mov	r3, r1
 80034ce:	18db      	adds	r3, r3, r3
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d2:	4613      	mov	r3, r2
 80034d4:	eb42 0303 	adc.w	r3, r2, r3
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034e2:	f7fc fee5 	bl	80002b0 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <UART_SetConfig+0x2d4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	3332      	adds	r3, #50	@ 0x32
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4422      	add	r2, r4
 8003512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003514:	e106      	b.n	8003724 <UART_SetConfig+0x4d8>
 8003516:	bf00      	nop
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800352e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	1891      	adds	r1, r2, r2
 800353c:	6239      	str	r1, [r7, #32]
 800353e:	415b      	adcs	r3, r3
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003546:	4641      	mov	r1, r8
 8003548:	1854      	adds	r4, r2, r1
 800354a:	4649      	mov	r1, r9
 800354c:	eb43 0501 	adc.w	r5, r3, r1
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800356c:	464b      	mov	r3, r9
 800356e:	eb45 0303 	adc.w	r3, r5, r3
 8003572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003582:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003592:	4629      	mov	r1, r5
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359c:	4621      	mov	r1, r4
 800359e:	008a      	lsls	r2, r1, #2
 80035a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035a4:	f7fc fe84 	bl	80002b0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011c      	lsls	r4, r3, #4
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	61b9      	str	r1, [r7, #24]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	4641      	mov	r1, r8
 80035da:	1851      	adds	r1, r2, r1
 80035dc:	6139      	str	r1, [r7, #16]
 80035de:	4649      	mov	r1, r9
 80035e0:	414b      	adcs	r3, r1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f0:	4659      	mov	r1, fp
 80035f2:	00cb      	lsls	r3, r1, #3
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fa:	4651      	mov	r1, sl
 80035fc:	00ca      	lsls	r2, r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4603      	mov	r3, r0
 8003604:	4642      	mov	r2, r8
 8003606:	189b      	adds	r3, r3, r2
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800360c:	464b      	mov	r3, r9
 800360e:	460a      	mov	r2, r1
 8003610:	eb42 0303 	adc.w	r3, r2, r3
 8003614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003622:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003630:	4649      	mov	r1, r9
 8003632:	008b      	lsls	r3, r1, #2
 8003634:	4641      	mov	r1, r8
 8003636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363a:	4641      	mov	r1, r8
 800363c:	008a      	lsls	r2, r1, #2
 800363e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003642:	f7fc fe35 	bl	80002b0 <__aeabi_uldivmod>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4611      	mov	r1, r2
 800364c:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <UART_SetConfig+0x4e4>)
 800364e:	fba3 2301 	umull	r2, r3, r3, r1
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2264      	movs	r2, #100	@ 0x64
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	1acb      	subs	r3, r1, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	@ 0x32
 8003660:	4a33      	ldr	r2, [pc, #204]	@ (8003730 <UART_SetConfig+0x4e4>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800366c:	441c      	add	r4, r3
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	673b      	str	r3, [r7, #112]	@ 0x70
 8003676:	677a      	str	r2, [r7, #116]	@ 0x74
 8003678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	415b      	adcs	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036be:	464b      	mov	r3, r9
 80036c0:	460a      	mov	r2, r1
 80036c2:	eb42 0303 	adc.w	r3, r2, r3
 80036c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036e0:	4649      	mov	r1, r9
 80036e2:	008b      	lsls	r3, r1, #2
 80036e4:	4641      	mov	r1, r8
 80036e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ea:	4641      	mov	r1, r8
 80036ec:	008a      	lsls	r2, r1, #2
 80036ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036f2:	f7fc fddd 	bl	80002b0 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <UART_SetConfig+0x4e4>)
 80036fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	2164      	movs	r1, #100	@ 0x64
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	3332      	adds	r3, #50	@ 0x32
 800370e:	4a08      	ldr	r2, [pc, #32]	@ (8003730 <UART_SetConfig+0x4e4>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4422      	add	r2, r4
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800372a:	46bd      	mov	sp, r7
 800372c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003730:	51eb851f 	.word	0x51eb851f

08003734 <__NVIC_SetPriority>:
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	@ (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	@ (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800378c:	2100      	movs	r1, #0
 800378e:	f06f 0004 	mvn.w	r0, #4
 8003792:	f7ff ffcf 	bl	8003734 <__NVIC_SetPriority>
#endif
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a2:	f3ef 8305 	mrs	r3, IPSR
 80037a6:	603b      	str	r3, [r7, #0]
  return(result);
 80037a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037ae:	f06f 0305 	mvn.w	r3, #5
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e00c      	b.n	80037d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <osKernelInitialize+0x44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037be:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <osKernelInitialize+0x44>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e002      	b.n	80037d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037d0:	687b      	ldr	r3, [r7, #4]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200001ac 	.word	0x200001ac

080037e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ea:	f3ef 8305 	mrs	r3, IPSR
 80037ee:	603b      	str	r3, [r7, #0]
  return(result);
 80037f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80037f6:	f06f 0305 	mvn.w	r3, #5
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e010      	b.n	8003820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <osKernelStart+0x48>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d109      	bne.n	800381a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003806:	f7ff ffbf 	bl	8003788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <osKernelStart+0x48>)
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003810:	f001 f982 	bl	8004b18 <vTaskStartScheduler>
      stat = osOK;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e002      	b.n	8003820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800381e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003820:	687b      	ldr	r3, [r7, #4]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200001ac 	.word	0x200001ac

08003830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	@ 0x38
 8003834:	af04      	add	r7, sp, #16
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003840:	f3ef 8305 	mrs	r3, IPSR
 8003844:	617b      	str	r3, [r7, #20]
  return(result);
 8003846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003848:	2b00      	cmp	r3, #0
 800384a:	d17e      	bne.n	800394a <osThreadNew+0x11a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07b      	beq.n	800394a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003856:	2318      	movs	r3, #24
 8003858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d045      	beq.n	80038f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <osThreadNew+0x48>
        name = attr->name;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <osThreadNew+0x6e>
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b38      	cmp	r3, #56	@ 0x38
 8003890:	d805      	bhi.n	800389e <osThreadNew+0x6e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <osThreadNew+0x72>
        return (NULL);
 800389e:	2300      	movs	r3, #0
 80038a0:	e054      	b.n	800394c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <osThreadNew+0xa8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b5b      	cmp	r3, #91	@ 0x5b
 80038c0:	d90a      	bls.n	80038d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <osThreadNew+0xa8>
        mem = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e010      	b.n	80038fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <osThreadNew+0xca>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <osThreadNew+0xca>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <osThreadNew+0xca>
          mem = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e001      	b.n	80038fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d110      	bne.n	8003922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003908:	9202      	str	r2, [sp, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fe46 	bl	80045a8 <xTaskCreateStatic>
 800391c:	4603      	mov	r3, r0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e013      	b.n	800394a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	b29a      	uxth	r2, r3
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fe94 	bl	8004668 <xTaskCreate>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <osThreadNew+0x11a>
            hTask = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800394a:	693b      	ldr	r3, [r7, #16]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	@ 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003960:	f3ef 8305 	mrs	r3, IPSR
 8003964:	60bb      	str	r3, [r7, #8]
  return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800396c:	f06f 0305 	mvn.w	r3, #5
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e017      	b.n	80039a4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800397a:	f06f 0303 	mvn.w	r3, #3
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e010      	b.n	80039a4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003982:	6938      	ldr	r0, [r7, #16]
 8003984:	f001 f860 	bl	8004a48 <eTaskGetState>
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d005      	beq.n	800399e <osThreadTerminate+0x4a>
      stat = osOK;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8003996:	6938      	ldr	r0, [r7, #16]
 8003998:	f000 ffac 	bl	80048f4 <vTaskDelete>
 800399c:	e002      	b.n	80039a4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800399e:	f06f 0302 	mvn.w	r3, #2
 80039a2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80039a4:	697b      	ldr	r3, [r7, #20]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b6:	f3ef 8305 	mrs	r3, IPSR
 80039ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <osDelay+0x1c>
    stat = osErrorISR;
 80039c2:	f06f 0305 	mvn.w	r3, #5
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e007      	b.n	80039da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <osDelay+0x2c>
      vTaskDelay(ticks);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f001 f801 	bl	80049dc <vTaskDelay>
    }
  }

  return (stat);
 80039da:	68fb      	ldr	r3, [r7, #12]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80039f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a06      	ldr	r2, [pc, #24]	@ (8003a14 <vApplicationGetIdleTaskMemory+0x30>)
 80039fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	200001b0 	.word	0x200001b0
 8003a14:	2000020c 	.word	0x2000020c

08003a18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4a06      	ldr	r2, [pc, #24]	@ (8003a48 <vApplicationGetTimerTaskMemory+0x30>)
 8003a2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a36:	601a      	str	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	2000040c 	.word	0x2000040c
 8003a48:	20000468 	.word	0x20000468

08003a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f103 0208 	add.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f103 0208 	add.w	r2, r3, #8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f103 0208 	add.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b04:	d103      	bne.n	8003b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e00c      	b.n	8003b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3308      	adds	r3, #8
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e002      	b.n	8003b1c <vListInsert+0x2e>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d2f6      	bcs.n	8003b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6852      	ldr	r2, [r2, #4]
 8003b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d103      	bne.n	8003b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003be0:	f002 f952 	bl	8005e88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	441a      	add	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	3b01      	subs	r3, #1
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22ff      	movs	r2, #255	@ 0xff
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	@ 0xff
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d114      	bne.n	8003c60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01a      	beq.n	8003c74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3310      	adds	r3, #16
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 f9f6 	bl	8005034 <xTaskRemoveFromEventList>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <xQueueGenericReset+0xd0>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	e009      	b.n	8003c74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3310      	adds	r3, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fef1 	bl	8003a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3324      	adds	r3, #36	@ 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff feec 	bl	8003a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c74:	f002 f93a 	bl	8005eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c78:	2301      	movs	r3, #1
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <xQueueGenericCreateStatic+0x56>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <xQueueGenericCreateStatic+0x5a>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericCreateStatic+0x5c>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	623b      	str	r3, [r7, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xQueueGenericCreateStatic+0x84>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <xQueueGenericCreateStatic+0x88>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <xQueueGenericCreateStatic+0x8a>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d2e:	2350      	movs	r3, #80	@ 0x50
 8003d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b50      	cmp	r3, #80	@ 0x50
 8003d36:	d00b      	beq.n	8003d50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	61bb      	str	r3, [r7, #24]
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f805 	bl	8003d82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3730      	adds	r7, #48	@ 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e002      	b.n	8003da4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003db0:	2101      	movs	r1, #1
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f7ff fefe 	bl	8003bb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	@ 0x38
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueGenericSend+0x34>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSend+0x42>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueGenericSend+0x46>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueGenericSend+0x48>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xQueueGenericSend+0x64>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <xQueueGenericSend+0x72>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <xQueueGenericSend+0x76>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <xQueueGenericSend+0x78>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xQueueGenericSend+0x94>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	623b      	str	r3, [r7, #32]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e5c:	f001 faaa 	bl	80053b4 <xTaskGetSchedulerState>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <xQueueGenericSend+0xa4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <xQueueGenericSend+0xa8>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <xQueueGenericSend+0xaa>
 8003e70:	2300      	movs	r3, #0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <xQueueGenericSend+0xc6>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	61fb      	str	r3, [r7, #28]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e8e:	f001 fffb 	bl	8005e88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <xQueueGenericSend+0xdc>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d129      	bne.n	8003ef8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eaa:	f000 fa0f 	bl	80042cc <prvCopyDataToQueue>
 8003eae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	3324      	adds	r3, #36	@ 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 f8b9 	bl	8005034 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc8 <xQueueGenericSend+0x200>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	e00a      	b.n	8003ef0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ee0:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <xQueueGenericSend+0x200>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ef0:	f001 fffc 	bl	8005eec <vPortExitCritical>
				return pdPASS;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e063      	b.n	8003fc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003efe:	f001 fff5 	bl	8005eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e05c      	b.n	8003fc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f8f3 	bl	80050fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f1a:	f001 ffe7 	bl	8005eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f1e:	f000 fe63 	bl	8004be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f22:	f001 ffb1 	bl	8005e88 <vPortEnterCritical>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f32:	d103      	bne.n	8003f3c <xQueueGenericSend+0x174>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSend+0x18a>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f52:	f001 ffcb 	bl	8005eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f56:	1d3a      	adds	r2, r7, #4
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f8e2 	bl	8005128 <xTaskCheckForTimeOut>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d124      	bne.n	8003fb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f6c:	f000 faa6 	bl	80044bc <prvIsQueueFull>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	3310      	adds	r3, #16
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f806 	bl	8004f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f86:	f000 fa31 	bl	80043ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f8a:	f000 fe3b 	bl	8004c04 <xTaskResumeAll>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f af7c 	bne.w	8003e8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <xQueueGenericSend+0x200>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	e772      	b.n	8003e8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003faa:	f000 fa1f 	bl	80043ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fae:	f000 fe29 	bl	8004c04 <xTaskResumeAll>
 8003fb2:	e76c      	b.n	8003e8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fb6:	f000 fa19 	bl	80043ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fba:	f000 fe23 	bl	8004c04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3738      	adds	r7, #56	@ 0x38
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b090      	sub	sp, #64	@ 0x40
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <xQueueGenericSendFromISR+0x3e>
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xQueueGenericSendFromISR+0x42>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xQueueGenericSendFromISR+0x44>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d103      	bne.n	800403a <xQueueGenericSendFromISR+0x6e>
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <xQueueGenericSendFromISR+0x72>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <xQueueGenericSendFromISR+0x74>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800405c:	f001 fff4 	bl	8006048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004060:	f3ef 8211 	mrs	r2, BASEPRI
 8004064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004078:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800407c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <xQueueGenericSendFromISR+0xc2>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d12f      	bne.n	80040ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004094:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80040a4:	f000 f912 	bl	80042cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040b0:	d112      	bne.n	80040d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	3324      	adds	r3, #36	@ 0x24
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 ffb8 	bl	8005034 <xTaskRemoveFromEventList>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040dc:	3301      	adds	r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	b25a      	sxtb	r2, r3
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80040e8:	2301      	movs	r3, #1
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80040ec:	e001      	b.n	80040f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004100:	4618      	mov	r0, r3
 8004102:	3740      	adds	r7, #64	@ 0x40
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	@ 0x30
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <xQueueReceive+0x32>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	623b      	str	r3, [r7, #32]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <xQueueReceive+0x40>
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <xQueueReceive+0x44>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <xQueueReceive+0x46>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <xQueueReceive+0x62>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	61fb      	str	r3, [r7, #28]
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800416a:	f001 f923 	bl	80053b4 <xTaskGetSchedulerState>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <xQueueReceive+0x72>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <xQueueReceive+0x76>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueReceive+0x78>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <xQueueReceive+0x94>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61bb      	str	r3, [r7, #24]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800419c:	f001 fe74 	bl	8005e88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01f      	beq.n	80041ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041b0:	f000 f8f6 	bl	80043a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	1e5a      	subs	r2, r3, #1
 80041b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00f      	beq.n	80041e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	3310      	adds	r3, #16
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 ff33 	bl	8005034 <xTaskRemoveFromEventList>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041d4:	4b3c      	ldr	r3, [pc, #240]	@ (80042c8 <xQueueReceive+0x1c0>)
 80041d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041e4:	f001 fe82 	bl	8005eec <vPortExitCritical>
				return pdPASS;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e069      	b.n	80042c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041f2:	f001 fe7b 	bl	8005eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e062      	b.n	80042c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4618      	mov	r0, r3
 8004206:	f000 ff79 	bl	80050fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800420e:	f001 fe6d 	bl	8005eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004212:	f000 fce9 	bl	8004be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004216:	f001 fe37 	bl	8005e88 <vPortEnterCritical>
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004220:	b25b      	sxtb	r3, r3
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004226:	d103      	bne.n	8004230 <xQueueReceive+0x128>
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004236:	b25b      	sxtb	r3, r3
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800423c:	d103      	bne.n	8004246 <xQueueReceive+0x13e>
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004246:	f001 fe51 	bl	8005eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800424a:	1d3a      	adds	r2, r7, #4
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff68 	bl	8005128 <xTaskCheckForTimeOut>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d123      	bne.n	80042a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800425e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004260:	f000 f916 	bl	8004490 <prvIsQueueEmpty>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	3324      	adds	r3, #36	@ 0x24
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe8c 	bl	8004f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800427a:	f000 f8b7 	bl	80043ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800427e:	f000 fcc1 	bl	8004c04 <xTaskResumeAll>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d189      	bne.n	800419c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004288:	4b0f      	ldr	r3, [pc, #60]	@ (80042c8 <xQueueReceive+0x1c0>)
 800428a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	e780      	b.n	800419c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800429a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800429c:	f000 f8a6 	bl	80043ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042a0:	f000 fcb0 	bl	8004c04 <xTaskResumeAll>
 80042a4:	e77a      	b.n	800419c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042a8:	f000 f8a0 	bl	80043ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ac:	f000 fcaa 	bl	8004c04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042b2:	f000 f8ed 	bl	8004490 <prvIsQueueEmpty>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f43f af6f 	beq.w	800419c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3730      	adds	r7, #48	@ 0x30
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d14d      	bne.n	800438e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f87a 	bl	80053f0 <xTaskPriorityDisinherit>
 80042fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	e043      	b.n	800438e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d119      	bne.n	8004340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6858      	ldr	r0, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	461a      	mov	r2, r3
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	f002 fa59 	bl	80067ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d32b      	bcc.n	800438e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	e026      	b.n	800438e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68d8      	ldr	r0, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	461a      	mov	r2, r3
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	f002 fa3f 	bl	80067ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	425b      	negs	r3, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d207      	bcs.n	800437c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	425b      	negs	r3, r3
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d105      	bne.n	800438e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	3b01      	subs	r3, #1
 800438c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004396:	697b      	ldr	r3, [r7, #20]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d018      	beq.n	80043e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	441a      	add	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d303      	bcc.n	80043d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68d9      	ldr	r1, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	461a      	mov	r2, r3
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f002 f9f5 	bl	80067ce <memcpy>
	}
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043f4:	f001 fd48 	bl	8005e88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004400:	e011      	b.n	8004426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	@ 0x24
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fe10 	bl	8005034 <xTaskRemoveFromEventList>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800441a:	f000 fee9 	bl	80051f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	3b01      	subs	r3, #1
 8004422:	b2db      	uxtb	r3, r3
 8004424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	dce9      	bgt.n	8004402 <prvUnlockQueue+0x16>
 800442e:	e000      	b.n	8004432 <prvUnlockQueue+0x46>
					break;
 8004430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	22ff      	movs	r2, #255	@ 0xff
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800443a:	f001 fd57 	bl	8005eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800443e:	f001 fd23 	bl	8005e88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800444a:	e011      	b.n	8004470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3310      	adds	r3, #16
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fdeb 	bl	8005034 <xTaskRemoveFromEventList>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004464:	f000 fec4 	bl	80051f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004468:	7bbb      	ldrb	r3, [r7, #14]
 800446a:	3b01      	subs	r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004474:	2b00      	cmp	r3, #0
 8004476:	dce9      	bgt.n	800444c <prvUnlockQueue+0x60>
 8004478:	e000      	b.n	800447c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800447a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	22ff      	movs	r2, #255	@ 0xff
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004484:	f001 fd32 	bl	8005eec <vPortExitCritical>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004498:	f001 fcf6 	bl	8005e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e001      	b.n	80044ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ae:	f001 fd1d 	bl	8005eec <vPortExitCritical>

	return xReturn;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c4:	f001 fce0 	bl	8005e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d102      	bne.n	80044da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e001      	b.n	80044de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044de:	f001 fd05 	bl	8005eec <vPortExitCritical>

	return xReturn;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e014      	b.n	8004526 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <vQueueAddToRegistry+0x50>)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004508:	490c      	ldr	r1, [pc, #48]	@ (800453c <vQueueAddToRegistry+0x50>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004512:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <vQueueAddToRegistry+0x50>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800451e:	e006      	b.n	800452e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b07      	cmp	r3, #7
 800452a:	d9e7      	bls.n	80044fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000868 	.word	0x20000868

08004540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004550:	f001 fc9a 	bl	8005e88 <vPortEnterCritical>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800455a:	b25b      	sxtb	r3, r3
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004560:	d103      	bne.n	800456a <vQueueWaitForMessageRestricted+0x2a>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004570:	b25b      	sxtb	r3, r3
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004576:	d103      	bne.n	8004580 <vQueueWaitForMessageRestricted+0x40>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004580:	f001 fcb4 	bl	8005eec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3324      	adds	r3, #36	@ 0x24
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd21 	bl	8004fdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7ff ff26 	bl	80043ec <prvUnlockQueue>
	}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	@ 0x38
 80045ac:	af04      	add	r7, sp, #16
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	623b      	str	r3, [r7, #32]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	61fb      	str	r3, [r7, #28]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045f2:	235c      	movs	r3, #92	@ 0x5c
 80045f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80045fa:	d00b      	beq.n	8004614 <xTaskCreateStatic+0x6c>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	61bb      	str	r3, [r7, #24]
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004614:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01e      	beq.n	800465a <xTaskCreateStatic+0xb2>
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004634:	2300      	movs	r3, #0
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f850 	bl	80046f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004652:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004654:	f000 f8de 	bl	8004814 <prvAddNewTaskToReadyList>
 8004658:	e001      	b.n	800465e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800465e:	697b      	ldr	r3, [r7, #20]
	}
 8004660:	4618      	mov	r0, r3
 8004662:	3728      	adds	r7, #40	@ 0x28
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08c      	sub	sp, #48	@ 0x30
 800466c:	af04      	add	r7, sp, #16
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fd25 	bl	80060cc <pvPortMalloc>
 8004682:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800468a:	205c      	movs	r0, #92	@ 0x5c
 800468c:	f001 fd1e 	bl	80060cc <pvPortMalloc>
 8004690:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
 800469e:	e005      	b.n	80046ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046a0:	6978      	ldr	r0, [r7, #20]
 80046a2:	f001 fde1 	bl	8006268 <vPortFree>
 80046a6:	e001      	b.n	80046ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	2300      	movs	r3, #0
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f80e 	bl	80046f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046d6:	69f8      	ldr	r0, [r7, #28]
 80046d8:	f000 f89c 	bl	8004814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046dc:	2301      	movs	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e002      	b.n	80046e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046e8:	69bb      	ldr	r3, [r7, #24]
	}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b088      	sub	sp, #32
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	461a      	mov	r2, r3
 800470a:	21a5      	movs	r1, #165	@ 0xa5
 800470c:	f001 ffe3 	bl	80066d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800471a:	3b01      	subs	r3, #1
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f023 0307 	bic.w	r3, r3, #7
 8004728:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	617b      	str	r3, [r7, #20]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01f      	beq.n	8004792 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	e012      	b.n	800477e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	7819      	ldrb	r1, [r3, #0]
 8004760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	3334      	adds	r3, #52	@ 0x34
 8004768:	460a      	mov	r2, r1
 800476a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b0f      	cmp	r3, #15
 8004782:	d9e9      	bls.n	8004758 <prvInitialiseNewTask+0x66>
 8004784:	e000      	b.n	8004788 <prvInitialiseNewTask+0x96>
			{
				break;
 8004786:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004790:	e003      	b.n	800479a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	2b37      	cmp	r3, #55	@ 0x37
 800479e:	d901      	bls.n	80047a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047a0:	2337      	movs	r3, #55	@ 0x37
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	2200      	movs	r2, #0
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f966 	bl	8003a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	3318      	adds	r3, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff f961 	bl	8003a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	2200      	movs	r2, #0
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	69b8      	ldr	r0, [r7, #24]
 80047f4:	f001 fa1a 	bl	8005c2c <pxPortInitialiseStack>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800481c:	f001 fb34 	bl	8005e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004820:	4b2d      	ldr	r3, [pc, #180]	@ (80048d8 <prvAddNewTaskToReadyList+0xc4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	4a2c      	ldr	r2, [pc, #176]	@ (80048d8 <prvAddNewTaskToReadyList+0xc4>)
 8004828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800482a:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <prvAddNewTaskToReadyList+0xc8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004832:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <prvAddNewTaskToReadyList+0xc8>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004838:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <prvAddNewTaskToReadyList+0xc4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d110      	bne.n	8004862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004840:	f000 fcfa 	bl	8005238 <prvInitialiseTaskLists>
 8004844:	e00d      	b.n	8004862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004846:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <prvAddNewTaskToReadyList+0xcc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800484e:	4b23      	ldr	r3, [pc, #140]	@ (80048dc <prvAddNewTaskToReadyList+0xc8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	429a      	cmp	r2, r3
 800485a:	d802      	bhi.n	8004862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800485c:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <prvAddNewTaskToReadyList+0xc8>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <prvAddNewTaskToReadyList+0xd0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a1e      	ldr	r2, [pc, #120]	@ (80048e4 <prvAddNewTaskToReadyList+0xd0>)
 800486a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800486c:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <prvAddNewTaskToReadyList+0xd0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	4b1b      	ldr	r3, [pc, #108]	@ (80048e8 <prvAddNewTaskToReadyList+0xd4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d903      	bls.n	8004888 <prvAddNewTaskToReadyList+0x74>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <prvAddNewTaskToReadyList+0xd4>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a15      	ldr	r2, [pc, #84]	@ (80048ec <prvAddNewTaskToReadyList+0xd8>)
 8004896:	441a      	add	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7ff f901 	bl	8003aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048a4:	f001 fb22 	bl	8005eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048a8:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <prvAddNewTaskToReadyList+0xcc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <prvAddNewTaskToReadyList+0xc8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d207      	bcs.n	80048ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <prvAddNewTaskToReadyList+0xdc>)
 80048c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000d7c 	.word	0x20000d7c
 80048dc:	200008a8 	.word	0x200008a8
 80048e0:	20000d88 	.word	0x20000d88
 80048e4:	20000d98 	.word	0x20000d98
 80048e8:	20000d84 	.word	0x20000d84
 80048ec:	200008ac 	.word	0x200008ac
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80048fc:	f001 fac4 	bl	8005e88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <vTaskDelete+0x18>
 8004906:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <vTaskDelete+0xc8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e000      	b.n	800490e <vTaskDelete+0x1a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f923 	bl	8003b60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3318      	adds	r3, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f91a 	bl	8003b60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800492c:	4b24      	ldr	r3, [pc, #144]	@ (80049c0 <vTaskDelete+0xcc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <vTaskDelete+0xcc>)
 8004934:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004936:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <vTaskDelete+0xc8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d10b      	bne.n	8004958 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	481f      	ldr	r0, [pc, #124]	@ (80049c4 <vTaskDelete+0xd0>)
 8004948:	f7ff f8ad 	bl	8003aa6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800494c:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <vTaskDelete+0xd4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <vTaskDelete+0xd4>)
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e009      	b.n	800496c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <vTaskDelete+0xd8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <vTaskDelete+0xd8>)
 8004960:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fcd6 	bl	8005314 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004968:	f000 fd04 	bl	8005374 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800496c:	f001 fabe 	bl	8005eec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <vTaskDelete+0xdc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004978:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <vTaskDelete+0xc8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	429a      	cmp	r2, r3
 8004980:	d117      	bne.n	80049b2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004982:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <vTaskDelete+0xe0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <vTaskDelete+0xae>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <vTaskDelete+0xe4>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200008a8 	.word	0x200008a8
 80049c0:	20000d98 	.word	0x20000d98
 80049c4:	20000d50 	.word	0x20000d50
 80049c8:	20000d64 	.word	0x20000d64
 80049cc:	20000d7c 	.word	0x20000d7c
 80049d0:	20000d88 	.word	0x20000d88
 80049d4:	20000da4 	.word	0x20000da4
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <vTaskDelay+0x64>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <vTaskDelay+0x32>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60bb      	str	r3, [r7, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a0e:	f000 f8eb 	bl	8004be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a12:	2100      	movs	r1, #0
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fd5b 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a1a:	f000 f8f3 	bl	8004c04 <xTaskResumeAll>
 8004a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a26:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <vTaskDelay+0x68>)
 8004a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000da4 	.word	0x20000da4
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <eTaskGetState+0x2a>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60bb      	str	r3, [r7, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <eTaskGetState+0xbc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d102      	bne.n	8004a82 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e03a      	b.n	8004af8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004a82:	f001 fa01 	bl	8005e88 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <eTaskGetState+0xc0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <eTaskGetState+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004a98:	f001 fa28 	bl	8005eec <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d003      	beq.n	8004aac <eTaskGetState+0x64>
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d102      	bne.n	8004ab2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004aac:	2302      	movs	r3, #2
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e022      	b.n	8004af8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <eTaskGetState+0xc8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d112      	bne.n	8004ae0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e011      	b.n	8004af8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e00e      	b.n	8004af8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004ada:	2302      	movs	r3, #2
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e00b      	b.n	8004af8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8004b14 <eTaskGetState+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d002      	beq.n	8004aee <eTaskGetState+0xa6>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004aee:	2304      	movs	r3, #4
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e001      	b.n	8004af8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004af4:	2301      	movs	r3, #1
 8004af6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004af8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200008a8 	.word	0x200008a8
 8004b08:	20000d34 	.word	0x20000d34
 8004b0c:	20000d38 	.word	0x20000d38
 8004b10:	20000d68 	.word	0x20000d68
 8004b14:	20000d50 	.word	0x20000d50

08004b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b26:	463a      	mov	r2, r7
 8004b28:	1d39      	adds	r1, r7, #4
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe ff58 	bl	80039e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	9202      	str	r2, [sp, #8]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	460a      	mov	r2, r1
 8004b46:	4922      	ldr	r1, [pc, #136]	@ (8004bd0 <vTaskStartScheduler+0xb8>)
 8004b48:	4822      	ldr	r0, [pc, #136]	@ (8004bd4 <vTaskStartScheduler+0xbc>)
 8004b4a:	f7ff fd2d 	bl	80045a8 <xTaskCreateStatic>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4a21      	ldr	r2, [pc, #132]	@ (8004bd8 <vTaskStartScheduler+0xc0>)
 8004b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b54:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <vTaskStartScheduler+0xc0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e001      	b.n	8004b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d102      	bne.n	8004b72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b6c:	f000 fd04 	bl	8005578 <xTimerCreateTimerTask>
 8004b70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d116      	bne.n	8004ba6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	613b      	str	r3, [r7, #16]
}
 8004b8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <vTaskStartScheduler+0xc4>)
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b94:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <vTaskStartScheduler+0xc8>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <vTaskStartScheduler+0xcc>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ba0:	f001 f8ce 	bl	8005d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ba4:	e00f      	b.n	8004bc6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bac:	d10b      	bne.n	8004bc6 <vTaskStartScheduler+0xae>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60fb      	str	r3, [r7, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <vTaskStartScheduler+0xaa>
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	08007380 	.word	0x08007380
 8004bd4:	08005209 	.word	0x08005209
 8004bd8:	20000da0 	.word	0x20000da0
 8004bdc:	20000d9c 	.word	0x20000d9c
 8004be0:	20000d88 	.word	0x20000d88
 8004be4:	20000d80 	.word	0x20000d80

08004be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bec:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <vTaskSuspendAll+0x18>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a03      	ldr	r2, [pc, #12]	@ (8004c00 <vTaskSuspendAll+0x18>)
 8004bf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	20000da4 	.word	0x20000da4

08004c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c12:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <xTaskResumeAll+0x118>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	603b      	str	r3, [r7, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c32:	f001 f929 	bl	8005e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <xTaskResumeAll+0x118>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	4a37      	ldr	r2, [pc, #220]	@ (8004d1c <xTaskResumeAll+0x118>)
 8004c3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c40:	4b36      	ldr	r3, [pc, #216]	@ (8004d1c <xTaskResumeAll+0x118>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d162      	bne.n	8004d0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c48:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <xTaskResumeAll+0x11c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d05e      	beq.n	8004d0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c50:	e02f      	b.n	8004cb2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c52:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <xTaskResumeAll+0x120>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe ff7e 	bl	8003b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe ff79 	bl	8003b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c72:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <xTaskResumeAll+0x124>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d903      	bls.n	8004c82 <xTaskResumeAll+0x7e>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d28 <xTaskResumeAll+0x124>)
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4a27      	ldr	r2, [pc, #156]	@ (8004d2c <xTaskResumeAll+0x128>)
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe ff04 	bl	8003aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca2:	4b23      	ldr	r3, [pc, #140]	@ (8004d30 <xTaskResumeAll+0x12c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004cac:	4b21      	ldr	r3, [pc, #132]	@ (8004d34 <xTaskResumeAll+0x130>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d24 <xTaskResumeAll+0x120>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1cb      	bne.n	8004c52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cc0:	f000 fb58 	bl	8005374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <xTaskResumeAll+0x134>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cd0:	f000 f846 	bl	8004d60 <xTaskIncrementTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004cda:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <xTaskResumeAll+0x130>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f1      	bne.n	8004cd0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004cec:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <xTaskResumeAll+0x134>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <xTaskResumeAll+0x130>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <xTaskResumeAll+0x138>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d0e:	f001 f8ed 	bl	8005eec <vPortExitCritical>

	return xAlreadyYielded;
 8004d12:	68bb      	ldr	r3, [r7, #8]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000da4 	.word	0x20000da4
 8004d20:	20000d7c 	.word	0x20000d7c
 8004d24:	20000d3c 	.word	0x20000d3c
 8004d28:	20000d84 	.word	0x20000d84
 8004d2c:	200008ac 	.word	0x200008ac
 8004d30:	200008a8 	.word	0x200008a8
 8004d34:	20000d90 	.word	0x20000d90
 8004d38:	20000d8c 	.word	0x20000d8c
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d46:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <xTaskGetTickCount+0x1c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d4c:	687b      	ldr	r3, [r7, #4]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000d80 	.word	0x20000d80

08004d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <xTaskIncrementTick+0x148>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8090 	bne.w	8004e94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d74:	4b4d      	ldr	r3, [pc, #308]	@ (8004eac <xTaskIncrementTick+0x14c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8004eac <xTaskIncrementTick+0x14c>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d121      	bne.n	8004dcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d88:	4b49      	ldr	r3, [pc, #292]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	603b      	str	r3, [r7, #0]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <xTaskIncrementTick+0x46>
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <xTaskIncrementTick+0x154>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb4 <xTaskIncrementTick+0x154>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <xTaskIncrementTick+0x158>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb8 <xTaskIncrementTick+0x158>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	f000 fad4 	bl	8005374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d349      	bcc.n	8004e6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd6:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004de6:	601a      	str	r2, [r3, #0]
					break;
 8004de8:	e03f      	b.n	8004e6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <xTaskIncrementTick+0x150>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e02:	4a2e      	ldr	r2, [pc, #184]	@ (8004ebc <xTaskIncrementTick+0x15c>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e08:	e02f      	b.n	8004e6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fea6 	bl	8003b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3318      	adds	r3, #24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fe9d 	bl	8003b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2a:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <xTaskIncrementTick+0x160>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d903      	bls.n	8004e3a <xTaskIncrementTick+0xda>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <xTaskIncrementTick+0x160>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <xTaskIncrementTick+0x164>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe fe28 	bl	8003aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <xTaskIncrementTick+0x168>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3b8      	bcc.n	8004dd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e68:	e7b5      	b.n	8004dd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <xTaskIncrementTick+0x168>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e70:	4914      	ldr	r1, [pc, #80]	@ (8004ec4 <xTaskIncrementTick+0x164>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d901      	bls.n	8004e86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e86:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <xTaskIncrementTick+0x16c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e004      	b.n	8004e9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <xTaskIncrementTick+0x170>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <xTaskIncrementTick+0x170>)
 8004e9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000da4 	.word	0x20000da4
 8004eac:	20000d80 	.word	0x20000d80
 8004eb0:	20000d34 	.word	0x20000d34
 8004eb4:	20000d38 	.word	0x20000d38
 8004eb8:	20000d94 	.word	0x20000d94
 8004ebc:	20000d9c 	.word	0x20000d9c
 8004ec0:	20000d84 	.word	0x20000d84
 8004ec4:	200008ac 	.word	0x200008ac
 8004ec8:	200008a8 	.word	0x200008a8
 8004ecc:	20000d90 	.word	0x20000d90
 8004ed0:	20000d8c 	.word	0x20000d8c

08004ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eda:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <vTaskSwitchContext+0xa8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ee2:	4b27      	ldr	r3, [pc, #156]	@ (8004f80 <vTaskSwitchContext+0xac>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee8:	e042      	b.n	8004f70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004eea:	4b25      	ldr	r3, [pc, #148]	@ (8004f80 <vTaskSwitchContext+0xac>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef0:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <vTaskSwitchContext+0xb0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e011      	b.n	8004f1c <vTaskSwitchContext+0x48>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <vTaskSwitchContext+0x42>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vTaskSwitchContext+0x3e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	491a      	ldr	r1, [pc, #104]	@ (8004f88 <vTaskSwitchContext+0xb4>)
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0e3      	beq.n	8004ef8 <vTaskSwitchContext+0x24>
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a13      	ldr	r2, [pc, #76]	@ (8004f88 <vTaskSwitchContext+0xb4>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3308      	adds	r3, #8
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d104      	bne.n	8004f60 <vTaskSwitchContext+0x8c>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <vTaskSwitchContext+0xb8>)
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4a06      	ldr	r2, [pc, #24]	@ (8004f84 <vTaskSwitchContext+0xb0>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000da4 	.word	0x20000da4
 8004f80:	20000d90 	.word	0x20000d90
 8004f84:	20000d84 	.word	0x20000d84
 8004f88:	200008ac 	.word	0x200008ac
 8004f8c:	200008a8 	.word	0x200008a8

08004f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb8:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <vTaskPlaceOnEventList+0x48>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fe fd94 	bl	8003aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	6838      	ldr	r0, [r7, #0]
 8004fca:	f000 fa81 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200008a8 	.word	0x200008a8

08004fdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	617b      	str	r3, [r7, #20]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005006:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <vTaskPlaceOnEventListRestricted+0x54>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3318      	adds	r3, #24
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7fe fd49 	bl	8003aa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800501a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800501e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f000 fa54 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
	}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	200008a8 	.word	0x200008a8

08005034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60fb      	str	r3, [r7, #12]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3318      	adds	r3, #24
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fd7a 	bl	8003b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <xTaskRemoveFromEventList+0xb0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11d      	bne.n	80050b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3304      	adds	r3, #4
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fd71 	bl	8003b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <xTaskRemoveFromEventList+0xb4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <xTaskRemoveFromEventList+0x5e>
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <xTaskRemoveFromEventList+0xb4>)
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <xTaskRemoveFromEventList+0xb8>)
 80050a0:	441a      	add	r2, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe fcfc 	bl	8003aa6 <vListInsertEnd>
 80050ae:	e005      	b.n	80050bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	3318      	adds	r3, #24
 80050b4:	4619      	mov	r1, r3
 80050b6:	480e      	ldr	r0, [pc, #56]	@ (80050f0 <xTaskRemoveFromEventList+0xbc>)
 80050b8:	f7fe fcf5 	bl	8003aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c0:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <xTaskRemoveFromEventList+0xc0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d905      	bls.n	80050d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <xTaskRemoveFromEventList+0xc4>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e001      	b.n	80050da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000da4 	.word	0x20000da4
 80050e8:	20000d84 	.word	0x20000d84
 80050ec:	200008ac 	.word	0x200008ac
 80050f0:	20000d3c 	.word	0x20000d3c
 80050f4:	200008a8 	.word	0x200008a8
 80050f8:	20000d90 	.word	0x20000d90

080050fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005104:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <vTaskInternalSetTimeOutState+0x24>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <vTaskInternalSetTimeOutState+0x28>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000d94 	.word	0x20000d94
 8005124:	20000d80 	.word	0x20000d80

08005128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	613b      	str	r3, [r7, #16]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800516e:	f000 fe8b 	bl	8005e88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005172:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <xTaskCheckForTimeOut+0xc0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518a:	d102      	bne.n	8005192 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e023      	b.n	80051da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <xTaskCheckForTimeOut+0xc4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d007      	beq.n	80051ae <xTaskCheckForTimeOut+0x86>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e015      	b.n	80051da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d20b      	bcs.n	80051d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff99 	bl	80050fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e004      	b.n	80051da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051d6:	2301      	movs	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051da:	f000 fe87 	bl	8005eec <vPortExitCritical>

	return xReturn;
 80051de:	69fb      	ldr	r3, [r7, #28]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000d80 	.word	0x20000d80
 80051ec:	20000d94 	.word	0x20000d94

080051f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051f4:	4b03      	ldr	r3, [pc, #12]	@ (8005204 <vTaskMissedYield+0x14>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20000d90 	.word	0x20000d90

08005208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005210:	f000 f852 	bl	80052b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <prvIdleTask+0x28>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d9f9      	bls.n	8005210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <prvIdleTask+0x2c>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800522c:	e7f0      	b.n	8005210 <prvIdleTask+0x8>
 800522e:	bf00      	nop
 8005230:	200008ac 	.word	0x200008ac
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e00c      	b.n	800525e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a12      	ldr	r2, [pc, #72]	@ (8005298 <prvInitialiseTaskLists+0x60>)
 8005250:	4413      	add	r3, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fbfa 	bl	8003a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3301      	adds	r3, #1
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b37      	cmp	r3, #55	@ 0x37
 8005262:	d9ef      	bls.n	8005244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005264:	480d      	ldr	r0, [pc, #52]	@ (800529c <prvInitialiseTaskLists+0x64>)
 8005266:	f7fe fbf1 	bl	8003a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800526a:	480d      	ldr	r0, [pc, #52]	@ (80052a0 <prvInitialiseTaskLists+0x68>)
 800526c:	f7fe fbee 	bl	8003a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005270:	480c      	ldr	r0, [pc, #48]	@ (80052a4 <prvInitialiseTaskLists+0x6c>)
 8005272:	f7fe fbeb 	bl	8003a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005276:	480c      	ldr	r0, [pc, #48]	@ (80052a8 <prvInitialiseTaskLists+0x70>)
 8005278:	f7fe fbe8 	bl	8003a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800527c:	480b      	ldr	r0, [pc, #44]	@ (80052ac <prvInitialiseTaskLists+0x74>)
 800527e:	f7fe fbe5 	bl	8003a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <prvInitialiseTaskLists+0x78>)
 8005284:	4a05      	ldr	r2, [pc, #20]	@ (800529c <prvInitialiseTaskLists+0x64>)
 8005286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005288:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <prvInitialiseTaskLists+0x7c>)
 800528a:	4a05      	ldr	r2, [pc, #20]	@ (80052a0 <prvInitialiseTaskLists+0x68>)
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200008ac 	.word	0x200008ac
 800529c:	20000d0c 	.word	0x20000d0c
 80052a0:	20000d20 	.word	0x20000d20
 80052a4:	20000d3c 	.word	0x20000d3c
 80052a8:	20000d50 	.word	0x20000d50
 80052ac:	20000d68 	.word	0x20000d68
 80052b0:	20000d34 	.word	0x20000d34
 80052b4:	20000d38 	.word	0x20000d38

080052b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052be:	e019      	b.n	80052f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052c0:	f000 fde2 	bl	8005e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c4:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <prvCheckTasksWaitingTermination+0x50>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe fc45 	bl	8003b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <prvCheckTasksWaitingTermination+0x54>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <prvCheckTasksWaitingTermination+0x54>)
 80052de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <prvCheckTasksWaitingTermination+0x58>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <prvCheckTasksWaitingTermination+0x58>)
 80052e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052ea:	f000 fdff 	bl	8005eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f810 	bl	8005314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <prvCheckTasksWaitingTermination+0x58>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e1      	bne.n	80052c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000d50 	.word	0x20000d50
 800530c:	20000d7c 	.word	0x20000d7c
 8005310:	20000d64 	.word	0x20000d64

08005314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	4618      	mov	r0, r3
 800532c:	f000 ff9c 	bl	8006268 <vPortFree>
				vPortFree( pxTCB );
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 ff99 	bl	8006268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005336:	e019      	b.n	800536c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800533e:	2b01      	cmp	r3, #1
 8005340:	d103      	bne.n	800534a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 ff90 	bl	8006268 <vPortFree>
	}
 8005348:	e010      	b.n	800536c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005350:	2b02      	cmp	r3, #2
 8005352:	d00b      	beq.n	800536c <prvDeleteTCB+0x58>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <prvDeleteTCB+0x54>
	}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <prvResetNextTaskUnblockTime+0x38>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005384:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800538a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800538c:	e008      	b.n	80053a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800538e:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <prvResetNextTaskUnblockTime+0x38>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4a04      	ldr	r2, [pc, #16]	@ (80053b0 <prvResetNextTaskUnblockTime+0x3c>)
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000d34 	.word	0x20000d34
 80053b0:	20000d9c 	.word	0x20000d9c

080053b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <xTaskGetSchedulerState+0x34>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053c2:	2301      	movs	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	e008      	b.n	80053da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c8:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <xTaskGetSchedulerState+0x38>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053d0:	2302      	movs	r3, #2
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	e001      	b.n	80053da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053da:	687b      	ldr	r3, [r7, #4]
	}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20000d88 	.word	0x20000d88
 80053ec:	20000da4 	.word	0x20000da4

080053f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d058      	beq.n	80054b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005406:	4b2f      	ldr	r3, [pc, #188]	@ (80054c4 <xTaskPriorityDisinherit+0xd4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	429a      	cmp	r2, r3
 800540e:	d00b      	beq.n	8005428 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60bb      	str	r3, [r7, #8]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544c:	1e5a      	subs	r2, r3, #1
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	429a      	cmp	r2, r3
 800545c:	d02c      	beq.n	80054b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d128      	bne.n	80054b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fb78 	bl	8003b60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005488:	4b0f      	ldr	r3, [pc, #60]	@ (80054c8 <xTaskPriorityDisinherit+0xd8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d903      	bls.n	8005498 <xTaskPriorityDisinherit+0xa8>
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	4a0c      	ldr	r2, [pc, #48]	@ (80054c8 <xTaskPriorityDisinherit+0xd8>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <xTaskPriorityDisinherit+0xdc>)
 80054a6:	441a      	add	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe faf9 	bl	8003aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054b8:	697b      	ldr	r3, [r7, #20]
	}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200008a8 	.word	0x200008a8
 80054c8:	20000d84 	.word	0x20000d84
 80054cc:	200008ac 	.word	0x200008ac

080054d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054da:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <prvAddCurrentTaskToDelayedList+0x90>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e0:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fb3a 	bl	8003b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054f2:	d10a      	bne.n	800550a <prvAddCurrentTaskToDelayedList+0x3a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4819      	ldr	r0, [pc, #100]	@ (8005568 <prvAddCurrentTaskToDelayedList+0x98>)
 8005504:	f7fe facf 	bl	8003aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005508:	e026      	b.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	429a      	cmp	r2, r3
 8005520:	d209      	bcs.n	8005536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005522:	4b12      	ldr	r3, [pc, #72]	@ (800556c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7fe fadd 	bl	8003aee <vListInsert>
}
 8005534:	e010      	b.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005536:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7fe fad3 	bl	8003aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d202      	bcs.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005552:	4a08      	ldr	r2, [pc, #32]	@ (8005574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000d80 	.word	0x20000d80
 8005564:	200008a8 	.word	0x200008a8
 8005568:	20000d68 	.word	0x20000d68
 800556c:	20000d38 	.word	0x20000d38
 8005570:	20000d34 	.word	0x20000d34
 8005574:	20000d9c 	.word	0x20000d9c

08005578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005582:	f000 fb13 	bl	8005bac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005586:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <xTimerCreateTimerTask+0x84>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d021      	beq.n	80055d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005596:	1d3a      	adds	r2, r7, #4
 8005598:	f107 0108 	add.w	r1, r7, #8
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fa39 	bl	8003a18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	9202      	str	r2, [sp, #8]
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	2302      	movs	r3, #2
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	460a      	mov	r2, r1
 80055b8:	4911      	ldr	r1, [pc, #68]	@ (8005600 <xTimerCreateTimerTask+0x88>)
 80055ba:	4812      	ldr	r0, [pc, #72]	@ (8005604 <xTimerCreateTimerTask+0x8c>)
 80055bc:	f7fe fff4 	bl	80045a8 <xTaskCreateStatic>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4a11      	ldr	r2, [pc, #68]	@ (8005608 <xTimerCreateTimerTask+0x90>)
 80055c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055c6:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <xTimerCreateTimerTask+0x90>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055ce:	2301      	movs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	613b      	str	r3, [r7, #16]
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	e7fd      	b.n	80055ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055f0:	697b      	ldr	r3, [r7, #20]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000dd8 	.word	0x20000dd8
 8005600:	08007388 	.word	0x08007388
 8005604:	08005745 	.word	0x08005745
 8005608:	20000ddc 	.word	0x20000ddc

0800560c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	@ 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <xTimerGenericCommand+0x30>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	623b      	str	r3, [r7, #32]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800563c:	4b19      	ldr	r3, [pc, #100]	@ (80056a4 <xTimerGenericCommand+0x98>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d02a      	beq.n	800569a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b05      	cmp	r3, #5
 8005654:	dc18      	bgt.n	8005688 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005656:	f7ff fead 	bl	80053b4 <xTaskGetSchedulerState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b02      	cmp	r3, #2
 800565e:	d109      	bne.n	8005674 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005660:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <xTimerGenericCommand+0x98>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	f107 0110 	add.w	r1, r7, #16
 8005668:	2300      	movs	r3, #0
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	f7fe fbac 	bl	8003dc8 <xQueueGenericSend>
 8005670:	6278      	str	r0, [r7, #36]	@ 0x24
 8005672:	e012      	b.n	800569a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005674:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <xTimerGenericCommand+0x98>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	f107 0110 	add.w	r1, r7, #16
 800567c:	2300      	movs	r3, #0
 800567e:	2200      	movs	r2, #0
 8005680:	f7fe fba2 	bl	8003dc8 <xQueueGenericSend>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24
 8005686:	e008      	b.n	800569a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <xTimerGenericCommand+0x98>)
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	f107 0110 	add.w	r1, r7, #16
 8005690:	2300      	movs	r3, #0
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	f7fe fc9a 	bl	8003fcc <xQueueGenericSendFromISR>
 8005698:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	@ 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000dd8 	.word	0x20000dd8

080056a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b2:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <prvProcessExpiredTimer+0x98>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fa4d 	bl	8003b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d023      	beq.n	800571c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	699a      	ldr	r2, [r3, #24]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	18d1      	adds	r1, r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	f000 f8d5 	bl	8005890 <prvInsertTimerInActiveList>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056ec:	2300      	movs	r3, #0
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	2100      	movs	r1, #0
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ff88 	bl	800560c <xTimerGenericCommand>
 80056fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d114      	bne.n	800572e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	4798      	blx	r3
}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000dd0 	.word	0x20000dd0

08005744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f859 	bl	8005808 <prvGetNextExpireTime>
 8005756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4619      	mov	r1, r3
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f805 	bl	800576c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005762:	f000 f8d7 	bl	8005914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005766:	bf00      	nop
 8005768:	e7f0      	b.n	800574c <prvTimerTask+0x8>
	...

0800576c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005776:	f7ff fa37 	bl	8004be8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800577a:	f107 0308 	add.w	r3, r7, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f866 	bl	8005850 <prvSampleTimeNow>
 8005784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d130      	bne.n	80057ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <prvProcessTimerOrBlockTask+0x3c>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	429a      	cmp	r2, r3
 8005798:	d806      	bhi.n	80057a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800579a:	f7ff fa33 	bl	8004c04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff81 	bl	80056a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057a6:	e024      	b.n	80057f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057ae:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <prvProcessTimerOrBlockTask+0x90>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <prvProcessTimerOrBlockTask+0x50>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <prvProcessTimerOrBlockTask+0x52>
 80057bc:	2300      	movs	r3, #0
 80057be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <prvProcessTimerOrBlockTask+0x94>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	4619      	mov	r1, r3
 80057ce:	f7fe feb7 	bl	8004540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057d2:	f7ff fa17 	bl	8004c04 <xTaskResumeAll>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057dc:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <prvProcessTimerOrBlockTask+0x98>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
}
 80057ec:	e001      	b.n	80057f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057ee:	f7ff fa09 	bl	8004c04 <xTaskResumeAll>
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000dd4 	.word	0x20000dd4
 8005800:	20000dd8 	.word	0x20000dd8
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005810:	4b0e      	ldr	r3, [pc, #56]	@ (800584c <prvGetNextExpireTime+0x44>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <prvGetNextExpireTime+0x16>
 800581a:	2201      	movs	r2, #1
 800581c:	e000      	b.n	8005820 <prvGetNextExpireTime+0x18>
 800581e:	2200      	movs	r2, #0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800582c:	4b07      	ldr	r3, [pc, #28]	@ (800584c <prvGetNextExpireTime+0x44>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e001      	b.n	800583c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000dd0 	.word	0x20000dd0

08005850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005858:	f7ff fa72 	bl	8004d40 <xTaskGetTickCount>
 800585c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <prvSampleTimeNow+0x3c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d205      	bcs.n	8005874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005868:	f000 f93a 	bl	8005ae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e002      	b.n	800587a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800587a:	4a04      	ldr	r2, [pc, #16]	@ (800588c <prvSampleTimeNow+0x3c>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005880:	68fb      	ldr	r3, [r7, #12]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000de0 	.word	0x20000de0

08005890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d812      	bhi.n	80058dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e01b      	b.n	8005902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <prvInsertTimerInActiveList+0x7c>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f7fe f90a 	bl	8003aee <vListInsert>
 80058da:	e012      	b.n	8005902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d206      	bcs.n	80058f2 <prvInsertTimerInActiveList+0x62>
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e007      	b.n	8005902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058f2:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <prvInsertTimerInActiveList+0x80>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7fe f8f6 	bl	8003aee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005902:	697b      	ldr	r3, [r7, #20]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000dd4 	.word	0x20000dd4
 8005910:	20000dd0 	.word	0x20000dd0

08005914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	@ 0x38
 8005918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800591a:	e0ce      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	da19      	bge.n	8005956 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	3304      	adds	r3, #4
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	61fb      	str	r3, [r7, #28]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594c:	6850      	ldr	r0, [r2, #4]
 800594e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005950:	6892      	ldr	r2, [r2, #8]
 8005952:	4611      	mov	r1, r2
 8005954:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f2c0 80ae 	blt.w	8005aba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe f8f6 	bl	8003b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005974:	463b      	mov	r3, r7
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff6a 	bl	8005850 <prvSampleTimeNow>
 800597c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b09      	cmp	r3, #9
 8005982:	f200 8097 	bhi.w	8005ab4 <prvProcessReceivedCommands+0x1a0>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <prvProcessReceivedCommands+0x78>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059b5 	.word	0x080059b5
 8005994:	080059b5 	.word	0x080059b5
 8005998:	08005a2b 	.word	0x08005a2b
 800599c:	08005a3f 	.word	0x08005a3f
 80059a0:	08005a8b 	.word	0x08005a8b
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059b5 	.word	0x080059b5
 80059ac:	08005a2b 	.word	0x08005a2b
 80059b0:	08005a3f 	.word	0x08005a3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	18d1      	adds	r1, r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d4:	f7ff ff5c 	bl	8005890 <prvInsertTimerInActiveList>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d06c      	beq.n	8005ab8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d061      	beq.n	8005ab8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	441a      	add	r2, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a06:	f7ff fe01 	bl	800560c <xTimerGenericCommand>
 8005a0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d152      	bne.n	8005ab8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	61bb      	str	r3, [r7, #24]
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	e7fd      	b.n	8005a26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a3c:	e03d      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	617b      	str	r3, [r7, #20]
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	e7fd      	b.n	8005a72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	18d1      	adds	r1, r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a84:	f7ff ff04 	bl	8005890 <prvInsertTimerInActiveList>
					break;
 8005a88:	e017      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a9a:	f000 fbe5 	bl	8006268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a9e:	e00c      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ab2:	e002      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <prvProcessReceivedCommands+0x1a6>
					break;
 8005ab8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aba:	4b08      	ldr	r3, [pc, #32]	@ (8005adc <prvProcessReceivedCommands+0x1c8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1d39      	adds	r1, r7, #4
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fb20 	bl	8004108 <xQueueReceive>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f47f af26 	bne.w	800591c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	3730      	adds	r7, #48	@ 0x30
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000dd8 	.word	0x20000dd8

08005ae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ae6:	e049      	b.n	8005b7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe f82d 	bl	8003b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d02f      	beq.n	8005b7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d90e      	bls.n	8005b4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f7fd ffd2 	bl	8003aee <vListInsert>
 8005b4a:	e017      	b.n	8005b7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	2100      	movs	r1, #0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fd58 	bl	800560c <xTimerGenericCommand>
 8005b5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	603b      	str	r3, [r7, #0]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1b0      	bne.n	8005ae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b86:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <prvSwitchTimerLists+0xc8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a04      	ldr	r2, [pc, #16]	@ (8005ba4 <prvSwitchTimerLists+0xc4>)
 8005b92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b94:	4a04      	ldr	r2, [pc, #16]	@ (8005ba8 <prvSwitchTimerLists+0xc8>)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000dd0 	.word	0x20000dd0
 8005ba8:	20000dd4 	.word	0x20000dd4

08005bac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bb2:	f000 f969 	bl	8005e88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bb6:	4b15      	ldr	r3, [pc, #84]	@ (8005c0c <prvCheckForValidListAndQueue+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d120      	bne.n	8005c00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bbe:	4814      	ldr	r0, [pc, #80]	@ (8005c10 <prvCheckForValidListAndQueue+0x64>)
 8005bc0:	f7fd ff44 	bl	8003a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bc4:	4813      	ldr	r0, [pc, #76]	@ (8005c14 <prvCheckForValidListAndQueue+0x68>)
 8005bc6:	f7fd ff41 	bl	8003a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005bca:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <prvCheckForValidListAndQueue+0x6c>)
 8005bcc:	4a10      	ldr	r2, [pc, #64]	@ (8005c10 <prvCheckForValidListAndQueue+0x64>)
 8005bce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bd0:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <prvCheckForValidListAndQueue+0x70>)
 8005bd2:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <prvCheckForValidListAndQueue+0x68>)
 8005bd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <prvCheckForValidListAndQueue+0x74>)
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <prvCheckForValidListAndQueue+0x78>)
 8005bde:	2110      	movs	r1, #16
 8005be0:	200a      	movs	r0, #10
 8005be2:	f7fe f851 	bl	8003c88 <xQueueGenericCreateStatic>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <prvCheckForValidListAndQueue+0x60>)
 8005bea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bec:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <prvCheckForValidListAndQueue+0x60>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bf4:	4b05      	ldr	r3, [pc, #20]	@ (8005c0c <prvCheckForValidListAndQueue+0x60>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	490b      	ldr	r1, [pc, #44]	@ (8005c28 <prvCheckForValidListAndQueue+0x7c>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fc76 	bl	80044ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c00:	f000 f974 	bl	8005eec <vPortExitCritical>
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000dd8 	.word	0x20000dd8
 8005c10:	20000da8 	.word	0x20000da8
 8005c14:	20000dbc 	.word	0x20000dbc
 8005c18:	20000dd0 	.word	0x20000dd0
 8005c1c:	20000dd4 	.word	0x20000dd4
 8005c20:	20000e84 	.word	0x20000e84
 8005c24:	20000de4 	.word	0x20000de4
 8005c28:	08007390 	.word	0x08007390

08005c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3b04      	subs	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <pxPortInitialiseStack+0x64>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b14      	subs	r3, #20
 8005c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f06f 0202 	mvn.w	r2, #2
 8005c7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3b20      	subs	r3, #32
 8005c80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	08005c95 	.word	0x08005c95

08005c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c9e:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <prvTaskExitError+0x58>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ca6:	d00b      	beq.n	8005cc0 <prvTaskExitError+0x2c>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <prvTaskExitError+0x28>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60bb      	str	r3, [r7, #8]
}
 8005cd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cd4:	bf00      	nop
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0fc      	beq.n	8005cd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <pxCurrentTCBConst2>)
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	f380 8809 	msr	PSP, r0
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8811 	msr	BASEPRI, r0
 8005d0a:	4770      	bx	lr
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst2>:
 8005d10:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d18:	4808      	ldr	r0, [pc, #32]	@ (8005d3c <prvPortStartFirstTask+0x24>)
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	6800      	ldr	r0, [r0, #0]
 8005d1e:	f380 8808 	msr	MSP, r0
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8814 	msr	CONTROL, r0
 8005d2a:	b662      	cpsie	i
 8005d2c:	b661      	cpsie	f
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	df00      	svc	0
 8005d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d3a:	bf00      	nop
 8005d3c:	e000ed08 	.word	0xe000ed08

08005d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d46:	4b47      	ldr	r3, [pc, #284]	@ (8005e64 <xPortStartScheduler+0x124>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <xPortStartScheduler+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10b      	bne.n	8005d68 <xPortStartScheduler+0x28>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	613b      	str	r3, [r7, #16]
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <xPortStartScheduler+0x124>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e6c <xPortStartScheduler+0x12c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10b      	bne.n	8005d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d8a:	4b39      	ldr	r3, [pc, #228]	@ (8005e70 <xPortStartScheduler+0x130>)
 8005d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	22ff      	movs	r2, #255	@ 0xff
 8005d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <xPortStartScheduler+0x134>)
 8005db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005db2:	4b31      	ldr	r3, [pc, #196]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005db4:	2207      	movs	r2, #7
 8005db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005db8:	e009      	b.n	8005dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005dba:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b80      	cmp	r3, #128	@ 0x80
 8005dd8:	d0ef      	beq.n	8005dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dda:	4b27      	ldr	r3, [pc, #156]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1c3 0307 	rsb	r3, r3, #7
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d00b      	beq.n	8005dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60bb      	str	r3, [r7, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e08:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e10:	4a19      	ldr	r2, [pc, #100]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e1c:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e28:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e34:	f000 f8da 	bl	8005fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <xPortStartScheduler+0x140>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e3e:	f000 f8f9 	bl	8006034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <xPortStartScheduler+0x144>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	@ (8005e84 <xPortStartScheduler+0x144>)
 8005e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e4e:	f7ff ff63 	bl	8005d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e52:	f7ff f83f 	bl	8004ed4 <vTaskSwitchContext>
	prvTaskExitError();
 8005e56:	f7ff ff1d 	bl	8005c94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed00 	.word	0xe000ed00
 8005e68:	410fc271 	.word	0x410fc271
 8005e6c:	410fc270 	.word	0x410fc270
 8005e70:	e000e400 	.word	0xe000e400
 8005e74:	20000ed4 	.word	0x20000ed4
 8005e78:	20000ed8 	.word	0x20000ed8
 8005e7c:	e000ed20 	.word	0xe000ed20
 8005e80:	2000000c 	.word	0x2000000c
 8005e84:	e000ef34 	.word	0xe000ef34

08005e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
}
 8005ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee8 <vPortEnterCritical+0x60>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	603b      	str	r3, [r7, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <vPortEnterCritical+0x4a>
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ef2:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <vPortExitCritical+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10b      	bne.n	8005f12 <vPortExitCritical+0x26>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	e7fd      	b.n	8005f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4a08      	ldr	r2, [pc, #32]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f1c:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <vPortExitCritical+0x44>
 8005f24:	2300      	movs	r3, #0
 8005f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c

08005f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f40:	f3ef 8009 	mrs	r0, PSP
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <pxCurrentTCBConst>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	f01e 0f10 	tst.w	lr, #16
 8005f50:	bf08      	it	eq
 8005f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f64:	f380 8811 	msr	BASEPRI, r0
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f7fe ffb0 	bl	8004ed4 <vTaskSwitchContext>
 8005f74:	f04f 0000 	mov.w	r0, #0
 8005f78:	f380 8811 	msr	BASEPRI, r0
 8005f7c:	bc09      	pop	{r0, r3}
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	6808      	ldr	r0, [r1, #0]
 8005f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f86:	f01e 0f10 	tst.w	lr, #16
 8005f8a:	bf08      	it	eq
 8005f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f90:	f380 8809 	msr	PSP, r0
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst>:
 8005fa0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
}
 8005fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fc2:	f7fe fecd 	bl	8004d60 <xTaskIncrementTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <xPortSysTickHandler+0x40>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <vPortSetupTimerInterrupt+0x34>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <vPortSetupTimerInterrupt+0x38>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <vPortSetupTimerInterrupt+0x3c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0a      	ldr	r2, [pc, #40]	@ (800602c <vPortSetupTimerInterrupt+0x40>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	4a09      	ldr	r2, [pc, #36]	@ (8006030 <vPortSetupTimerInterrupt+0x44>)
 800600a:	3b01      	subs	r3, #1
 800600c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800600e:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <vPortSetupTimerInterrupt+0x34>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010
 8006024:	e000e018 	.word	0xe000e018
 8006028:	20000000 	.word	0x20000000
 800602c:	10624dd3 	.word	0x10624dd3
 8006030:	e000e014 	.word	0xe000e014

08006034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006044 <vPortEnableVFP+0x10>
 8006038:	6801      	ldr	r1, [r0, #0]
 800603a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800603e:	6001      	str	r1, [r0, #0]
 8006040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006042:	bf00      	nop
 8006044:	e000ed88 	.word	0xe000ed88

08006048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800604e:	f3ef 8305 	mrs	r3, IPSR
 8006052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b0f      	cmp	r3, #15
 8006058:	d915      	bls.n	8006086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800605a:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <vPortValidateInterruptPriority+0x74>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006064:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <vPortValidateInterruptPriority+0x78>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	7afa      	ldrb	r2, [r7, #11]
 800606a:	429a      	cmp	r2, r3
 800606c:	d20b      	bcs.n	8006086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006086:	4b0f      	ldr	r3, [pc, #60]	@ (80060c4 <vPortValidateInterruptPriority+0x7c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800608e:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <vPortValidateInterruptPriority+0x80>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90b      	bls.n	80060ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	603b      	str	r3, [r7, #0]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortValidateInterruptPriority+0x62>
	}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000e3f0 	.word	0xe000e3f0
 80060c0:	20000ed4 	.word	0x20000ed4
 80060c4:	e000ed0c 	.word	0xe000ed0c
 80060c8:	20000ed8 	.word	0x20000ed8

080060cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	@ 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060d8:	f7fe fd86 	bl	8004be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <pvPortMalloc+0x184>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060e4:	f000 f924 	bl	8006330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <pvPortMalloc+0x188>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8095 	bne.w	8006220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01e      	beq.n	800613a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80060fc:	2208      	movs	r2, #8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f023 0307 	bic.w	r3, r3, #7
 8006114:	3308      	adds	r3, #8
 8006116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <pvPortMalloc+0x6e>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	617b      	str	r3, [r7, #20]
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d06f      	beq.n	8006220 <pvPortMalloc+0x154>
 8006140:	4b45      	ldr	r3, [pc, #276]	@ (8006258 <pvPortMalloc+0x18c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d86a      	bhi.n	8006220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800614a:	4b44      	ldr	r3, [pc, #272]	@ (800625c <pvPortMalloc+0x190>)
 800614c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800614e:	4b43      	ldr	r3, [pc, #268]	@ (800625c <pvPortMalloc+0x190>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006154:	e004      	b.n	8006160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d903      	bls.n	8006172 <pvPortMalloc+0xa6>
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f1      	bne.n	8006156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006172:	4b37      	ldr	r3, [pc, #220]	@ (8006250 <pvPortMalloc+0x184>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006178:	429a      	cmp	r2, r3
 800617a:	d051      	beq.n	8006220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2208      	movs	r2, #8
 8006182:	4413      	add	r3, r2
 8006184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	2308      	movs	r3, #8
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	429a      	cmp	r2, r3
 800619c:	d920      	bls.n	80061e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800619e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <pvPortMalloc+0xfc>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061da:	69b8      	ldr	r0, [r7, #24]
 80061dc:	f000 f90a 	bl	80063f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <pvPortMalloc+0x18c>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006258 <pvPortMalloc+0x18c>)
 80061ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <pvPortMalloc+0x18c>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <pvPortMalloc+0x194>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <pvPortMalloc+0x18c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <pvPortMalloc+0x194>)
 8006200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <pvPortMalloc+0x188>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	431a      	orrs	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <pvPortMalloc+0x198>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <pvPortMalloc+0x198>)
 800621e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006220:	f7fe fcf0 	bl	8004c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <pvPortMalloc+0x17a>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <pvPortMalloc+0x176>
	return pvReturn;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	@ 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20004ae4 	.word	0x20004ae4
 8006254:	20004af8 	.word	0x20004af8
 8006258:	20004ae8 	.word	0x20004ae8
 800625c:	20004adc 	.word	0x20004adc
 8006260:	20004aec 	.word	0x20004aec
 8006264:	20004af0 	.word	0x20004af0

08006268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04f      	beq.n	800631a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800627a:	2308      	movs	r3, #8
 800627c:	425b      	negs	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4b25      	ldr	r3, [pc, #148]	@ (8006324 <vPortFree+0xbc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <vPortFree+0x46>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <vPortFree+0x66>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4b14      	ldr	r3, [pc, #80]	@ (8006324 <vPortFree+0xbc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01e      	beq.n	800631a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11a      	bne.n	800631a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <vPortFree+0xbc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062f4:	f7fe fc78 	bl	8004be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006328 <vPortFree+0xc0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4413      	add	r3, r2
 8006302:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <vPortFree+0xc0>)
 8006304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f000 f874 	bl	80063f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <vPortFree+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a06      	ldr	r2, [pc, #24]	@ (800632c <vPortFree+0xc4>)
 8006314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006316:	f7fe fc75 	bl	8004c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20004af8 	.word	0x20004af8
 8006328:	20004ae8 	.word	0x20004ae8
 800632c:	20004af4 	.word	0x20004af4

08006330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006336:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800633a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800633c:	4b27      	ldr	r3, [pc, #156]	@ (80063dc <prvHeapInit+0xac>)
 800633e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0307 	bic.w	r3, r3, #7
 8006356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <prvHeapInit+0xac>)
 8006360:	4413      	add	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006368:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <prvHeapInit+0xb0>)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800636e:	4b1c      	ldr	r3, [pc, #112]	@ (80063e0 <prvHeapInit+0xb0>)
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800637c:	2208      	movs	r2, #8
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <prvHeapInit+0xb4>)
 8006390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006392:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <prvHeapInit+0xb4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <prvHeapInit+0xb4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <prvHeapInit+0xb4>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4a0a      	ldr	r2, [pc, #40]	@ (80063e8 <prvHeapInit+0xb8>)
 80063be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <prvHeapInit+0xbc>)
 80063c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063c8:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <prvHeapInit+0xc0>)
 80063ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063ce:	601a      	str	r2, [r3, #0]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000edc 	.word	0x20000edc
 80063e0:	20004adc 	.word	0x20004adc
 80063e4:	20004ae4 	.word	0x20004ae4
 80063e8:	20004aec 	.word	0x20004aec
 80063ec:	20004ae8 	.word	0x20004ae8
 80063f0:	20004af8 	.word	0x20004af8

080063f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063fc:	4b28      	ldr	r3, [pc, #160]	@ (80064a0 <prvInsertBlockIntoFreeList+0xac>)
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e002      	b.n	8006408 <prvInsertBlockIntoFreeList+0x14>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d8f7      	bhi.n	8006402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4413      	add	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d108      	bne.n	8006436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	441a      	add	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d118      	bne.n	800647c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d00d      	beq.n	8006472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e008      	b.n	8006484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e003      	b.n	8006484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d002      	beq.n	8006492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20004adc 	.word	0x20004adc
 80064a4:	20004ae4 	.word	0x20004ae4

080064a8 <std>:
 80064a8:	2300      	movs	r3, #0
 80064aa:	b510      	push	{r4, lr}
 80064ac:	4604      	mov	r4, r0
 80064ae:	e9c0 3300 	strd	r3, r3, [r0]
 80064b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064b6:	6083      	str	r3, [r0, #8]
 80064b8:	8181      	strh	r1, [r0, #12]
 80064ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80064bc:	81c2      	strh	r2, [r0, #14]
 80064be:	6183      	str	r3, [r0, #24]
 80064c0:	4619      	mov	r1, r3
 80064c2:	2208      	movs	r2, #8
 80064c4:	305c      	adds	r0, #92	@ 0x5c
 80064c6:	f000 f906 	bl	80066d6 <memset>
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <std+0x58>)
 80064cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x5c>)
 80064d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x60>)
 80064d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x64>)
 80064d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x68>)
 80064dc:	6224      	str	r4, [r4, #32]
 80064de:	429c      	cmp	r4, r3
 80064e0:	d006      	beq.n	80064f0 <std+0x48>
 80064e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064e6:	4294      	cmp	r4, r2
 80064e8:	d002      	beq.n	80064f0 <std+0x48>
 80064ea:	33d0      	adds	r3, #208	@ 0xd0
 80064ec:	429c      	cmp	r4, r3
 80064ee:	d105      	bne.n	80064fc <std+0x54>
 80064f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f8:	f000 b966 	b.w	80067c8 <__retarget_lock_init_recursive>
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	bf00      	nop
 8006500:	08006651 	.word	0x08006651
 8006504:	08006673 	.word	0x08006673
 8006508:	080066ab 	.word	0x080066ab
 800650c:	080066cf 	.word	0x080066cf
 8006510:	20004afc 	.word	0x20004afc

08006514 <stdio_exit_handler>:
 8006514:	4a02      	ldr	r2, [pc, #8]	@ (8006520 <stdio_exit_handler+0xc>)
 8006516:	4903      	ldr	r1, [pc, #12]	@ (8006524 <stdio_exit_handler+0x10>)
 8006518:	4803      	ldr	r0, [pc, #12]	@ (8006528 <stdio_exit_handler+0x14>)
 800651a:	f000 b869 	b.w	80065f0 <_fwalk_sglue>
 800651e:	bf00      	nop
 8006520:	20000010 	.word	0x20000010
 8006524:	08007085 	.word	0x08007085
 8006528:	20000020 	.word	0x20000020

0800652c <cleanup_stdio>:
 800652c:	6841      	ldr	r1, [r0, #4]
 800652e:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <cleanup_stdio+0x34>)
 8006530:	4299      	cmp	r1, r3
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	d001      	beq.n	800653c <cleanup_stdio+0x10>
 8006538:	f000 fda4 	bl	8007084 <_fflush_r>
 800653c:	68a1      	ldr	r1, [r4, #8]
 800653e:	4b09      	ldr	r3, [pc, #36]	@ (8006564 <cleanup_stdio+0x38>)
 8006540:	4299      	cmp	r1, r3
 8006542:	d002      	beq.n	800654a <cleanup_stdio+0x1e>
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fd9d 	bl	8007084 <_fflush_r>
 800654a:	68e1      	ldr	r1, [r4, #12]
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <cleanup_stdio+0x3c>)
 800654e:	4299      	cmp	r1, r3
 8006550:	d004      	beq.n	800655c <cleanup_stdio+0x30>
 8006552:	4620      	mov	r0, r4
 8006554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006558:	f000 bd94 	b.w	8007084 <_fflush_r>
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	20004afc 	.word	0x20004afc
 8006564:	20004b64 	.word	0x20004b64
 8006568:	20004bcc 	.word	0x20004bcc

0800656c <global_stdio_init.part.0>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <global_stdio_init.part.0+0x30>)
 8006570:	4c0b      	ldr	r4, [pc, #44]	@ (80065a0 <global_stdio_init.part.0+0x34>)
 8006572:	4a0c      	ldr	r2, [pc, #48]	@ (80065a4 <global_stdio_init.part.0+0x38>)
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	4620      	mov	r0, r4
 8006578:	2200      	movs	r2, #0
 800657a:	2104      	movs	r1, #4
 800657c:	f7ff ff94 	bl	80064a8 <std>
 8006580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006584:	2201      	movs	r2, #1
 8006586:	2109      	movs	r1, #9
 8006588:	f7ff ff8e 	bl	80064a8 <std>
 800658c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006590:	2202      	movs	r2, #2
 8006592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006596:	2112      	movs	r1, #18
 8006598:	f7ff bf86 	b.w	80064a8 <std>
 800659c:	20004c34 	.word	0x20004c34
 80065a0:	20004afc 	.word	0x20004afc
 80065a4:	08006515 	.word	0x08006515

080065a8 <__sfp_lock_acquire>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__sfp_lock_acquire+0x8>)
 80065aa:	f000 b90e 	b.w	80067ca <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	20004c3d 	.word	0x20004c3d

080065b4 <__sfp_lock_release>:
 80065b4:	4801      	ldr	r0, [pc, #4]	@ (80065bc <__sfp_lock_release+0x8>)
 80065b6:	f000 b909 	b.w	80067cc <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	20004c3d 	.word	0x20004c3d

080065c0 <__sinit>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	f7ff fff0 	bl	80065a8 <__sfp_lock_acquire>
 80065c8:	6a23      	ldr	r3, [r4, #32]
 80065ca:	b11b      	cbz	r3, 80065d4 <__sinit+0x14>
 80065cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d0:	f7ff bff0 	b.w	80065b4 <__sfp_lock_release>
 80065d4:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <__sinit+0x28>)
 80065d6:	6223      	str	r3, [r4, #32]
 80065d8:	4b04      	ldr	r3, [pc, #16]	@ (80065ec <__sinit+0x2c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f5      	bne.n	80065cc <__sinit+0xc>
 80065e0:	f7ff ffc4 	bl	800656c <global_stdio_init.part.0>
 80065e4:	e7f2      	b.n	80065cc <__sinit+0xc>
 80065e6:	bf00      	nop
 80065e8:	0800652d 	.word	0x0800652d
 80065ec:	20004c34 	.word	0x20004c34

080065f0 <_fwalk_sglue>:
 80065f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f4:	4607      	mov	r7, r0
 80065f6:	4688      	mov	r8, r1
 80065f8:	4614      	mov	r4, r2
 80065fa:	2600      	movs	r6, #0
 80065fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006600:	f1b9 0901 	subs.w	r9, r9, #1
 8006604:	d505      	bpl.n	8006612 <_fwalk_sglue+0x22>
 8006606:	6824      	ldr	r4, [r4, #0]
 8006608:	2c00      	cmp	r4, #0
 800660a:	d1f7      	bne.n	80065fc <_fwalk_sglue+0xc>
 800660c:	4630      	mov	r0, r6
 800660e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d907      	bls.n	8006628 <_fwalk_sglue+0x38>
 8006618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800661c:	3301      	adds	r3, #1
 800661e:	d003      	beq.n	8006628 <_fwalk_sglue+0x38>
 8006620:	4629      	mov	r1, r5
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	4306      	orrs	r6, r0
 8006628:	3568      	adds	r5, #104	@ 0x68
 800662a:	e7e9      	b.n	8006600 <_fwalk_sglue+0x10>

0800662c <iprintf>:
 800662c:	b40f      	push	{r0, r1, r2, r3}
 800662e:	b507      	push	{r0, r1, r2, lr}
 8006630:	4906      	ldr	r1, [pc, #24]	@ (800664c <iprintf+0x20>)
 8006632:	ab04      	add	r3, sp, #16
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	f853 2b04 	ldr.w	r2, [r3], #4
 800663a:	6881      	ldr	r1, [r0, #8]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	f000 f9f7 	bl	8006a30 <_vfiprintf_r>
 8006642:	b003      	add	sp, #12
 8006644:	f85d eb04 	ldr.w	lr, [sp], #4
 8006648:	b004      	add	sp, #16
 800664a:	4770      	bx	lr
 800664c:	2000001c 	.word	0x2000001c

08006650 <__sread>:
 8006650:	b510      	push	{r4, lr}
 8006652:	460c      	mov	r4, r1
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	f000 f868 	bl	800672c <_read_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	bfab      	itete	ge
 8006660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006662:	89a3      	ldrhlt	r3, [r4, #12]
 8006664:	181b      	addge	r3, r3, r0
 8006666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800666a:	bfac      	ite	ge
 800666c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800666e:	81a3      	strhlt	r3, [r4, #12]
 8006670:	bd10      	pop	{r4, pc}

08006672 <__swrite>:
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	461f      	mov	r7, r3
 8006678:	898b      	ldrh	r3, [r1, #12]
 800667a:	05db      	lsls	r3, r3, #23
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	4616      	mov	r6, r2
 8006682:	d505      	bpl.n	8006690 <__swrite+0x1e>
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	2302      	movs	r3, #2
 800668a:	2200      	movs	r2, #0
 800668c:	f000 f83c 	bl	8006708 <_lseek_r>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	f000 b853 	b.w	8006750 <_write_r>

080066aa <__sseek>:
 80066aa:	b510      	push	{r4, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b2:	f000 f829 	bl	8006708 <_lseek_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	bf15      	itete	ne
 80066bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066c6:	81a3      	strheq	r3, [r4, #12]
 80066c8:	bf18      	it	ne
 80066ca:	81a3      	strhne	r3, [r4, #12]
 80066cc:	bd10      	pop	{r4, pc}

080066ce <__sclose>:
 80066ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d2:	f000 b809 	b.w	80066e8 <_close_r>

080066d6 <memset>:
 80066d6:	4402      	add	r2, r0
 80066d8:	4603      	mov	r3, r0
 80066da:	4293      	cmp	r3, r2
 80066dc:	d100      	bne.n	80066e0 <memset+0xa>
 80066de:	4770      	bx	lr
 80066e0:	f803 1b01 	strb.w	r1, [r3], #1
 80066e4:	e7f9      	b.n	80066da <memset+0x4>
	...

080066e8 <_close_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d06      	ldr	r5, [pc, #24]	@ (8006704 <_close_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fa faa3 	bl	8000c3e <_close>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_close_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_close_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20004c38 	.word	0x20004c38

08006708 <_lseek_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	@ (8006728 <_lseek_r+0x20>)
 800670c:	4604      	mov	r4, r0
 800670e:	4608      	mov	r0, r1
 8006710:	4611      	mov	r1, r2
 8006712:	2200      	movs	r2, #0
 8006714:	602a      	str	r2, [r5, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f7fa fab8 	bl	8000c8c <_lseek>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_lseek_r+0x1e>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_lseek_r+0x1e>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20004c38 	.word	0x20004c38

0800672c <_read_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	@ (800674c <_read_r+0x20>)
 8006730:	4604      	mov	r4, r0
 8006732:	4608      	mov	r0, r1
 8006734:	4611      	mov	r1, r2
 8006736:	2200      	movs	r2, #0
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f7fa fa46 	bl	8000bcc <_read>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_read_r+0x1e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_read_r+0x1e>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20004c38 	.word	0x20004c38

08006750 <_write_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	@ (8006770 <_write_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fa fa51 	bl	8000c06 <_write>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_write_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_write_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20004c38 	.word	0x20004c38

08006774 <__errno>:
 8006774:	4b01      	ldr	r3, [pc, #4]	@ (800677c <__errno+0x8>)
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	2000001c 	.word	0x2000001c

08006780 <__libc_init_array>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4d0d      	ldr	r5, [pc, #52]	@ (80067b8 <__libc_init_array+0x38>)
 8006784:	4c0d      	ldr	r4, [pc, #52]	@ (80067bc <__libc_init_array+0x3c>)
 8006786:	1b64      	subs	r4, r4, r5
 8006788:	10a4      	asrs	r4, r4, #2
 800678a:	2600      	movs	r6, #0
 800678c:	42a6      	cmp	r6, r4
 800678e:	d109      	bne.n	80067a4 <__libc_init_array+0x24>
 8006790:	4d0b      	ldr	r5, [pc, #44]	@ (80067c0 <__libc_init_array+0x40>)
 8006792:	4c0c      	ldr	r4, [pc, #48]	@ (80067c4 <__libc_init_array+0x44>)
 8006794:	f000 fdc6 	bl	8007324 <_init>
 8006798:	1b64      	subs	r4, r4, r5
 800679a:	10a4      	asrs	r4, r4, #2
 800679c:	2600      	movs	r6, #0
 800679e:	42a6      	cmp	r6, r4
 80067a0:	d105      	bne.n	80067ae <__libc_init_array+0x2e>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a8:	4798      	blx	r3
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7ee      	b.n	800678c <__libc_init_array+0xc>
 80067ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b2:	4798      	blx	r3
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7f2      	b.n	800679e <__libc_init_array+0x1e>
 80067b8:	08007484 	.word	0x08007484
 80067bc:	08007484 	.word	0x08007484
 80067c0:	08007484 	.word	0x08007484
 80067c4:	08007488 	.word	0x08007488

080067c8 <__retarget_lock_init_recursive>:
 80067c8:	4770      	bx	lr

080067ca <__retarget_lock_acquire_recursive>:
 80067ca:	4770      	bx	lr

080067cc <__retarget_lock_release_recursive>:
 80067cc:	4770      	bx	lr

080067ce <memcpy>:
 80067ce:	440a      	add	r2, r1
 80067d0:	4291      	cmp	r1, r2
 80067d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80067d6:	d100      	bne.n	80067da <memcpy+0xc>
 80067d8:	4770      	bx	lr
 80067da:	b510      	push	{r4, lr}
 80067dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e4:	4291      	cmp	r1, r2
 80067e6:	d1f9      	bne.n	80067dc <memcpy+0xe>
 80067e8:	bd10      	pop	{r4, pc}
	...

080067ec <_free_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	2900      	cmp	r1, #0
 80067f2:	d041      	beq.n	8006878 <_free_r+0x8c>
 80067f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f8:	1f0c      	subs	r4, r1, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	18e4      	addlt	r4, r4, r3
 8006800:	f000 f8e0 	bl	80069c4 <__malloc_lock>
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <_free_r+0x90>)
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	b933      	cbnz	r3, 8006818 <_free_r+0x2c>
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6014      	str	r4, [r2, #0]
 800680e:	4628      	mov	r0, r5
 8006810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006814:	f000 b8dc 	b.w	80069d0 <__malloc_unlock>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x42>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	1821      	adds	r1, r4, r0
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	e7ed      	b.n	800680a <_free_r+0x1e>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x4c>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x42>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1850      	adds	r0, r2, r1
 800683c:	42a0      	cmp	r0, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x6c>
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	4401      	add	r1, r0
 8006844:	1850      	adds	r0, r2, r1
 8006846:	4283      	cmp	r3, r0
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1e0      	bne.n	800680e <_free_r+0x22>
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4408      	add	r0, r1
 8006854:	6010      	str	r0, [r2, #0]
 8006856:	e7da      	b.n	800680e <_free_r+0x22>
 8006858:	d902      	bls.n	8006860 <_free_r+0x74>
 800685a:	230c      	movs	r3, #12
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	e7d6      	b.n	800680e <_free_r+0x22>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1821      	adds	r1, r4, r0
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1809      	addeq	r1, r1, r0
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7ca      	b.n	800680e <_free_r+0x22>
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	20004c44 	.word	0x20004c44

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0f      	ldr	r6, [pc, #60]	@ (80068c0 <sbrk_aligned+0x40>)
 8006884:	460c      	mov	r4, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	4605      	mov	r5, r0
 800688a:	b911      	cbnz	r1, 8006892 <sbrk_aligned+0x12>
 800688c:	f000 fcb6 	bl	80071fc <_sbrk_r>
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fcb1 	bl	80071fc <_sbrk_r>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d103      	bne.n	80068a6 <sbrk_aligned+0x26>
 800689e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068a2:	4620      	mov	r0, r4
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	1cc4      	adds	r4, r0, #3
 80068a8:	f024 0403 	bic.w	r4, r4, #3
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d0f8      	beq.n	80068a2 <sbrk_aligned+0x22>
 80068b0:	1a21      	subs	r1, r4, r0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fca2 	bl	80071fc <_sbrk_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d1f2      	bne.n	80068a2 <sbrk_aligned+0x22>
 80068bc:	e7ef      	b.n	800689e <sbrk_aligned+0x1e>
 80068be:	bf00      	nop
 80068c0:	20004c40 	.word	0x20004c40

080068c4 <_malloc_r>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	1ccd      	adds	r5, r1, #3
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	4606      	mov	r6, r0
 80068da:	db01      	blt.n	80068e0 <_malloc_r+0x1c>
 80068dc:	42a9      	cmp	r1, r5
 80068de:	d904      	bls.n	80068ea <_malloc_r+0x26>
 80068e0:	230c      	movs	r3, #12
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c0 <_malloc_r+0xfc>
 80068ee:	f000 f869 	bl	80069c4 <__malloc_lock>
 80068f2:	f8d8 3000 	ldr.w	r3, [r8]
 80068f6:	461c      	mov	r4, r3
 80068f8:	bb44      	cbnz	r4, 800694c <_malloc_r+0x88>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff ffbf 	bl	8006880 <sbrk_aligned>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	4604      	mov	r4, r0
 8006906:	d158      	bne.n	80069ba <_malloc_r+0xf6>
 8006908:	f8d8 4000 	ldr.w	r4, [r8]
 800690c:	4627      	mov	r7, r4
 800690e:	2f00      	cmp	r7, #0
 8006910:	d143      	bne.n	800699a <_malloc_r+0xd6>
 8006912:	2c00      	cmp	r4, #0
 8006914:	d04b      	beq.n	80069ae <_malloc_r+0xea>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	eb04 0903 	add.w	r9, r4, r3
 8006920:	f000 fc6c 	bl	80071fc <_sbrk_r>
 8006924:	4581      	cmp	r9, r0
 8006926:	d142      	bne.n	80069ae <_malloc_r+0xea>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	1a6d      	subs	r5, r5, r1
 800692c:	4629      	mov	r1, r5
 800692e:	4630      	mov	r0, r6
 8006930:	f7ff ffa6 	bl	8006880 <sbrk_aligned>
 8006934:	3001      	adds	r0, #1
 8006936:	d03a      	beq.n	80069ae <_malloc_r+0xea>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	442b      	add	r3, r5
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	f8d8 3000 	ldr.w	r3, [r8]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	bb62      	cbnz	r2, 80069a0 <_malloc_r+0xdc>
 8006946:	f8c8 7000 	str.w	r7, [r8]
 800694a:	e00f      	b.n	800696c <_malloc_r+0xa8>
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	1b52      	subs	r2, r2, r5
 8006950:	d420      	bmi.n	8006994 <_malloc_r+0xd0>
 8006952:	2a0b      	cmp	r2, #11
 8006954:	d917      	bls.n	8006986 <_malloc_r+0xc2>
 8006956:	1961      	adds	r1, r4, r5
 8006958:	42a3      	cmp	r3, r4
 800695a:	6025      	str	r5, [r4, #0]
 800695c:	bf18      	it	ne
 800695e:	6059      	strne	r1, [r3, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	bf08      	it	eq
 8006964:	f8c8 1000 	streq.w	r1, [r8]
 8006968:	5162      	str	r2, [r4, r5]
 800696a:	604b      	str	r3, [r1, #4]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f82f 	bl	80069d0 <__malloc_unlock>
 8006972:	f104 000b 	add.w	r0, r4, #11
 8006976:	1d23      	adds	r3, r4, #4
 8006978:	f020 0007 	bic.w	r0, r0, #7
 800697c:	1ac2      	subs	r2, r0, r3
 800697e:	bf1c      	itt	ne
 8006980:	1a1b      	subne	r3, r3, r0
 8006982:	50a3      	strne	r3, [r4, r2]
 8006984:	e7af      	b.n	80068e6 <_malloc_r+0x22>
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	42a3      	cmp	r3, r4
 800698a:	bf0c      	ite	eq
 800698c:	f8c8 2000 	streq.w	r2, [r8]
 8006990:	605a      	strne	r2, [r3, #4]
 8006992:	e7eb      	b.n	800696c <_malloc_r+0xa8>
 8006994:	4623      	mov	r3, r4
 8006996:	6864      	ldr	r4, [r4, #4]
 8006998:	e7ae      	b.n	80068f8 <_malloc_r+0x34>
 800699a:	463c      	mov	r4, r7
 800699c:	687f      	ldr	r7, [r7, #4]
 800699e:	e7b6      	b.n	800690e <_malloc_r+0x4a>
 80069a0:	461a      	mov	r2, r3
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d1fb      	bne.n	80069a0 <_malloc_r+0xdc>
 80069a8:	2300      	movs	r3, #0
 80069aa:	6053      	str	r3, [r2, #4]
 80069ac:	e7de      	b.n	800696c <_malloc_r+0xa8>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f80c 	bl	80069d0 <__malloc_unlock>
 80069b8:	e794      	b.n	80068e4 <_malloc_r+0x20>
 80069ba:	6005      	str	r5, [r0, #0]
 80069bc:	e7d6      	b.n	800696c <_malloc_r+0xa8>
 80069be:	bf00      	nop
 80069c0:	20004c44 	.word	0x20004c44

080069c4 <__malloc_lock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__malloc_lock+0x8>)
 80069c6:	f7ff bf00 	b.w	80067ca <__retarget_lock_acquire_recursive>
 80069ca:	bf00      	nop
 80069cc:	20004c3c 	.word	0x20004c3c

080069d0 <__malloc_unlock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	@ (80069d8 <__malloc_unlock+0x8>)
 80069d2:	f7ff befb 	b.w	80067cc <__retarget_lock_release_recursive>
 80069d6:	bf00      	nop
 80069d8:	20004c3c 	.word	0x20004c3c

080069dc <__sfputc_r>:
 80069dc:	6893      	ldr	r3, [r2, #8]
 80069de:	3b01      	subs	r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	b410      	push	{r4}
 80069e4:	6093      	str	r3, [r2, #8]
 80069e6:	da08      	bge.n	80069fa <__sfputc_r+0x1e>
 80069e8:	6994      	ldr	r4, [r2, #24]
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	db01      	blt.n	80069f2 <__sfputc_r+0x16>
 80069ee:	290a      	cmp	r1, #10
 80069f0:	d103      	bne.n	80069fa <__sfputc_r+0x1e>
 80069f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f6:	f000 bb6d 	b.w	80070d4 <__swbuf_r>
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	1c58      	adds	r0, r3, #1
 80069fe:	6010      	str	r0, [r2, #0]
 8006a00:	7019      	strb	r1, [r3, #0]
 8006a02:	4608      	mov	r0, r1
 8006a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <__sfputs_r>:
 8006a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	4614      	mov	r4, r2
 8006a12:	18d5      	adds	r5, r2, r3
 8006a14:	42ac      	cmp	r4, r5
 8006a16:	d101      	bne.n	8006a1c <__sfputs_r+0x12>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e007      	b.n	8006a2c <__sfputs_r+0x22>
 8006a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a20:	463a      	mov	r2, r7
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ffda 	bl	80069dc <__sfputc_r>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d1f3      	bne.n	8006a14 <__sfputs_r+0xa>
 8006a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a30 <_vfiprintf_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	460d      	mov	r5, r1
 8006a36:	b09d      	sub	sp, #116	@ 0x74
 8006a38:	4614      	mov	r4, r2
 8006a3a:	4698      	mov	r8, r3
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	b118      	cbz	r0, 8006a48 <_vfiprintf_r+0x18>
 8006a40:	6a03      	ldr	r3, [r0, #32]
 8006a42:	b90b      	cbnz	r3, 8006a48 <_vfiprintf_r+0x18>
 8006a44:	f7ff fdbc 	bl	80065c0 <__sinit>
 8006a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_vfiprintf_r+0x2a>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_vfiprintf_r+0x2a>
 8006a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a56:	f7ff feb8 	bl	80067ca <__retarget_lock_acquire_recursive>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	071b      	lsls	r3, r3, #28
 8006a5e:	d501      	bpl.n	8006a64 <_vfiprintf_r+0x34>
 8006a60:	692b      	ldr	r3, [r5, #16]
 8006a62:	b99b      	cbnz	r3, 8006a8c <_vfiprintf_r+0x5c>
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fb72 	bl	8007150 <__swsetup_r>
 8006a6c:	b170      	cbz	r0, 8006a8c <_vfiprintf_r+0x5c>
 8006a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a70:	07dc      	lsls	r4, r3, #31
 8006a72:	d504      	bpl.n	8006a7e <_vfiprintf_r+0x4e>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a78:	b01d      	add	sp, #116	@ 0x74
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	89ab      	ldrh	r3, [r5, #12]
 8006a80:	0598      	lsls	r0, r3, #22
 8006a82:	d4f7      	bmi.n	8006a74 <_vfiprintf_r+0x44>
 8006a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a86:	f7ff fea1 	bl	80067cc <__retarget_lock_release_recursive>
 8006a8a:	e7f3      	b.n	8006a74 <_vfiprintf_r+0x44>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a90:	2320      	movs	r3, #32
 8006a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a9a:	2330      	movs	r3, #48	@ 0x30
 8006a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c4c <_vfiprintf_r+0x21c>
 8006aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006aa4:	f04f 0901 	mov.w	r9, #1
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	469a      	mov	sl, r3
 8006aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ab0:	b10a      	cbz	r2, 8006ab6 <_vfiprintf_r+0x86>
 8006ab2:	2a25      	cmp	r2, #37	@ 0x25
 8006ab4:	d1f9      	bne.n	8006aaa <_vfiprintf_r+0x7a>
 8006ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8006aba:	d00b      	beq.n	8006ad4 <_vfiprintf_r+0xa4>
 8006abc:	465b      	mov	r3, fp
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffa1 	bl	8006a0a <__sfputs_r>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f000 80a7 	beq.w	8006c1c <_vfiprintf_r+0x1ec>
 8006ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad0:	445a      	add	r2, fp
 8006ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 809f 	beq.w	8006c1c <_vfiprintf_r+0x1ec>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae8:	f10a 0a01 	add.w	sl, sl, #1
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006af6:	4654      	mov	r4, sl
 8006af8:	2205      	movs	r2, #5
 8006afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afe:	4853      	ldr	r0, [pc, #332]	@ (8006c4c <_vfiprintf_r+0x21c>)
 8006b00:	f7f9 fb86 	bl	8000210 <memchr>
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	b9d8      	cbnz	r0, 8006b40 <_vfiprintf_r+0x110>
 8006b08:	06d1      	lsls	r1, r2, #27
 8006b0a:	bf44      	itt	mi
 8006b0c:	2320      	movmi	r3, #32
 8006b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b12:	0713      	lsls	r3, r2, #28
 8006b14:	bf44      	itt	mi
 8006b16:	232b      	movmi	r3, #43	@ 0x2b
 8006b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b22:	d015      	beq.n	8006b50 <_vfiprintf_r+0x120>
 8006b24:	9a07      	ldr	r2, [sp, #28]
 8006b26:	4654      	mov	r4, sl
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f04f 0c0a 	mov.w	ip, #10
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b34:	3b30      	subs	r3, #48	@ 0x30
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d94b      	bls.n	8006bd2 <_vfiprintf_r+0x1a2>
 8006b3a:	b1b0      	cbz	r0, 8006b6a <_vfiprintf_r+0x13a>
 8006b3c:	9207      	str	r2, [sp, #28]
 8006b3e:	e014      	b.n	8006b6a <_vfiprintf_r+0x13a>
 8006b40:	eba0 0308 	sub.w	r3, r0, r8
 8006b44:	fa09 f303 	lsl.w	r3, r9, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	46a2      	mov	sl, r4
 8006b4e:	e7d2      	b.n	8006af6 <_vfiprintf_r+0xc6>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	1d19      	adds	r1, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfbb      	ittet	lt
 8006b5c:	425b      	neglt	r3, r3
 8006b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b62:	9307      	strge	r3, [sp, #28]
 8006b64:	9307      	strlt	r3, [sp, #28]
 8006b66:	bfb8      	it	lt
 8006b68:	9204      	strlt	r2, [sp, #16]
 8006b6a:	7823      	ldrb	r3, [r4, #0]
 8006b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b6e:	d10a      	bne.n	8006b86 <_vfiprintf_r+0x156>
 8006b70:	7863      	ldrb	r3, [r4, #1]
 8006b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b74:	d132      	bne.n	8006bdc <_vfiprintf_r+0x1ac>
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	9203      	str	r2, [sp, #12]
 8006b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b82:	3402      	adds	r4, #2
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c5c <_vfiprintf_r+0x22c>
 8006b8a:	7821      	ldrb	r1, [r4, #0]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4650      	mov	r0, sl
 8006b90:	f7f9 fb3e 	bl	8000210 <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_vfiprintf_r+0x176>
 8006b96:	9b04      	ldr	r3, [sp, #16]
 8006b98:	eba0 000a 	sub.w	r0, r0, sl
 8006b9c:	2240      	movs	r2, #64	@ 0x40
 8006b9e:	4082      	lsls	r2, r0
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	3401      	adds	r4, #1
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006baa:	4829      	ldr	r0, [pc, #164]	@ (8006c50 <_vfiprintf_r+0x220>)
 8006bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bb0:	2206      	movs	r2, #6
 8006bb2:	f7f9 fb2d 	bl	8000210 <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d03f      	beq.n	8006c3a <_vfiprintf_r+0x20a>
 8006bba:	4b26      	ldr	r3, [pc, #152]	@ (8006c54 <_vfiprintf_r+0x224>)
 8006bbc:	bb1b      	cbnz	r3, 8006c06 <_vfiprintf_r+0x1d6>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	443b      	add	r3, r7
 8006bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd0:	e76a      	b.n	8006aa8 <_vfiprintf_r+0x78>
 8006bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	2001      	movs	r0, #1
 8006bda:	e7a8      	b.n	8006b2e <_vfiprintf_r+0xfe>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	3401      	adds	r4, #1
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	4619      	mov	r1, r3
 8006be4:	f04f 0c0a 	mov.w	ip, #10
 8006be8:	4620      	mov	r0, r4
 8006bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bee:	3a30      	subs	r2, #48	@ 0x30
 8006bf0:	2a09      	cmp	r2, #9
 8006bf2:	d903      	bls.n	8006bfc <_vfiprintf_r+0x1cc>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0c6      	beq.n	8006b86 <_vfiprintf_r+0x156>
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	e7c4      	b.n	8006b86 <_vfiprintf_r+0x156>
 8006bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c00:	4604      	mov	r4, r0
 8006c02:	2301      	movs	r3, #1
 8006c04:	e7f0      	b.n	8006be8 <_vfiprintf_r+0x1b8>
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <_vfiprintf_r+0x228>)
 8006c0e:	a904      	add	r1, sp, #16
 8006c10:	4630      	mov	r0, r6
 8006c12:	f3af 8000 	nop.w
 8006c16:	4607      	mov	r7, r0
 8006c18:	1c78      	adds	r0, r7, #1
 8006c1a:	d1d6      	bne.n	8006bca <_vfiprintf_r+0x19a>
 8006c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_vfiprintf_r+0x1fe>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_vfiprintf_r+0x1fe>
 8006c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c2a:	f7ff fdcf 	bl	80067cc <__retarget_lock_release_recursive>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	065b      	lsls	r3, r3, #25
 8006c32:	f53f af1f 	bmi.w	8006a74 <_vfiprintf_r+0x44>
 8006c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c38:	e71e      	b.n	8006a78 <_vfiprintf_r+0x48>
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <_vfiprintf_r+0x228>)
 8006c42:	a904      	add	r1, sp, #16
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 f879 	bl	8006d3c <_printf_i>
 8006c4a:	e7e4      	b.n	8006c16 <_vfiprintf_r+0x1e6>
 8006c4c:	08007448 	.word	0x08007448
 8006c50:	08007452 	.word	0x08007452
 8006c54:	00000000 	.word	0x00000000
 8006c58:	08006a0b 	.word	0x08006a0b
 8006c5c:	0800744e 	.word	0x0800744e

08006c60 <_printf_common>:
 8006c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	4616      	mov	r6, r2
 8006c66:	4698      	mov	r8, r3
 8006c68:	688a      	ldr	r2, [r1, #8]
 8006c6a:	690b      	ldr	r3, [r1, #16]
 8006c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bfb8      	it	lt
 8006c74:	4613      	movlt	r3, r2
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b10a      	cbz	r2, 8006c86 <_printf_common+0x26>
 8006c82:	3301      	adds	r3, #1
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	0699      	lsls	r1, r3, #26
 8006c8a:	bf42      	ittt	mi
 8006c8c:	6833      	ldrmi	r3, [r6, #0]
 8006c8e:	3302      	addmi	r3, #2
 8006c90:	6033      	strmi	r3, [r6, #0]
 8006c92:	6825      	ldr	r5, [r4, #0]
 8006c94:	f015 0506 	ands.w	r5, r5, #6
 8006c98:	d106      	bne.n	8006ca8 <_printf_common+0x48>
 8006c9a:	f104 0a19 	add.w	sl, r4, #25
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	6832      	ldr	r2, [r6, #0]
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	42ab      	cmp	r3, r5
 8006ca6:	dc26      	bgt.n	8006cf6 <_printf_common+0x96>
 8006ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	3b00      	subs	r3, #0
 8006cb0:	bf18      	it	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	0692      	lsls	r2, r2, #26
 8006cb6:	d42b      	bmi.n	8006d10 <_printf_common+0xb0>
 8006cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	47c8      	blx	r9
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d01e      	beq.n	8006d04 <_printf_common+0xa4>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	f003 0306 	and.w	r3, r3, #6
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf02      	ittt	eq
 8006cd2:	68e5      	ldreq	r5, [r4, #12]
 8006cd4:	6833      	ldreq	r3, [r6, #0]
 8006cd6:	1aed      	subeq	r5, r5, r3
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	bf0c      	ite	eq
 8006cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce0:	2500      	movne	r5, #0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bfc4      	itt	gt
 8006ce6:	1a9b      	subgt	r3, r3, r2
 8006ce8:	18ed      	addgt	r5, r5, r3
 8006cea:	2600      	movs	r6, #0
 8006cec:	341a      	adds	r4, #26
 8006cee:	42b5      	cmp	r5, r6
 8006cf0:	d11a      	bne.n	8006d28 <_printf_common+0xc8>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e008      	b.n	8006d08 <_printf_common+0xa8>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	47c8      	blx	r9
 8006d00:	3001      	adds	r0, #1
 8006d02:	d103      	bne.n	8006d0c <_printf_common+0xac>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	e7c6      	b.n	8006c9e <_printf_common+0x3e>
 8006d10:	18e1      	adds	r1, r4, r3
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	2030      	movs	r0, #48	@ 0x30
 8006d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d1a:	4422      	add	r2, r4
 8006d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d24:	3302      	adds	r3, #2
 8006d26:	e7c7      	b.n	8006cb8 <_printf_common+0x58>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c8      	blx	r9
 8006d32:	3001      	adds	r0, #1
 8006d34:	d0e6      	beq.n	8006d04 <_printf_common+0xa4>
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7d9      	b.n	8006cee <_printf_common+0x8e>
	...

08006d3c <_printf_i>:
 8006d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	7e0f      	ldrb	r7, [r1, #24]
 8006d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d44:	2f78      	cmp	r7, #120	@ 0x78
 8006d46:	4691      	mov	r9, r2
 8006d48:	4680      	mov	r8, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	469a      	mov	sl, r3
 8006d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d52:	d807      	bhi.n	8006d64 <_printf_i+0x28>
 8006d54:	2f62      	cmp	r7, #98	@ 0x62
 8006d56:	d80a      	bhi.n	8006d6e <_printf_i+0x32>
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	f000 80d2 	beq.w	8006f02 <_printf_i+0x1c6>
 8006d5e:	2f58      	cmp	r7, #88	@ 0x58
 8006d60:	f000 80b9 	beq.w	8006ed6 <_printf_i+0x19a>
 8006d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d6c:	e03a      	b.n	8006de4 <_printf_i+0xa8>
 8006d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d72:	2b15      	cmp	r3, #21
 8006d74:	d8f6      	bhi.n	8006d64 <_printf_i+0x28>
 8006d76:	a101      	add	r1, pc, #4	@ (adr r1, 8006d7c <_printf_i+0x40>)
 8006d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d7c:	08006dd5 	.word	0x08006dd5
 8006d80:	08006de9 	.word	0x08006de9
 8006d84:	08006d65 	.word	0x08006d65
 8006d88:	08006d65 	.word	0x08006d65
 8006d8c:	08006d65 	.word	0x08006d65
 8006d90:	08006d65 	.word	0x08006d65
 8006d94:	08006de9 	.word	0x08006de9
 8006d98:	08006d65 	.word	0x08006d65
 8006d9c:	08006d65 	.word	0x08006d65
 8006da0:	08006d65 	.word	0x08006d65
 8006da4:	08006d65 	.word	0x08006d65
 8006da8:	08006ee9 	.word	0x08006ee9
 8006dac:	08006e13 	.word	0x08006e13
 8006db0:	08006ea3 	.word	0x08006ea3
 8006db4:	08006d65 	.word	0x08006d65
 8006db8:	08006d65 	.word	0x08006d65
 8006dbc:	08006f0b 	.word	0x08006f0b
 8006dc0:	08006d65 	.word	0x08006d65
 8006dc4:	08006e13 	.word	0x08006e13
 8006dc8:	08006d65 	.word	0x08006d65
 8006dcc:	08006d65 	.word	0x08006d65
 8006dd0:	08006eab 	.word	0x08006eab
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6032      	str	r2, [r6, #0]
 8006ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006de4:	2301      	movs	r3, #1
 8006de6:	e09d      	b.n	8006f24 <_printf_i+0x1e8>
 8006de8:	6833      	ldr	r3, [r6, #0]
 8006dea:	6820      	ldr	r0, [r4, #0]
 8006dec:	1d19      	adds	r1, r3, #4
 8006dee:	6031      	str	r1, [r6, #0]
 8006df0:	0606      	lsls	r6, r0, #24
 8006df2:	d501      	bpl.n	8006df8 <_printf_i+0xbc>
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	e003      	b.n	8006e00 <_printf_i+0xc4>
 8006df8:	0645      	lsls	r5, r0, #25
 8006dfa:	d5fb      	bpl.n	8006df4 <_printf_i+0xb8>
 8006dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	da03      	bge.n	8006e0c <_printf_i+0xd0>
 8006e04:	232d      	movs	r3, #45	@ 0x2d
 8006e06:	426d      	negs	r5, r5
 8006e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e0c:	4859      	ldr	r0, [pc, #356]	@ (8006f74 <_printf_i+0x238>)
 8006e0e:	230a      	movs	r3, #10
 8006e10:	e011      	b.n	8006e36 <_printf_i+0xfa>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	6833      	ldr	r3, [r6, #0]
 8006e16:	0608      	lsls	r0, r1, #24
 8006e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e1c:	d402      	bmi.n	8006e24 <_printf_i+0xe8>
 8006e1e:	0649      	lsls	r1, r1, #25
 8006e20:	bf48      	it	mi
 8006e22:	b2ad      	uxthmi	r5, r5
 8006e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e26:	4853      	ldr	r0, [pc, #332]	@ (8006f74 <_printf_i+0x238>)
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	bf14      	ite	ne
 8006e2c:	230a      	movne	r3, #10
 8006e2e:	2308      	moveq	r3, #8
 8006e30:	2100      	movs	r1, #0
 8006e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e36:	6866      	ldr	r6, [r4, #4]
 8006e38:	60a6      	str	r6, [r4, #8]
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	bfa2      	ittt	ge
 8006e3e:	6821      	ldrge	r1, [r4, #0]
 8006e40:	f021 0104 	bicge.w	r1, r1, #4
 8006e44:	6021      	strge	r1, [r4, #0]
 8006e46:	b90d      	cbnz	r5, 8006e4c <_printf_i+0x110>
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	d04b      	beq.n	8006ee4 <_printf_i+0x1a8>
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e52:	fb03 5711 	mls	r7, r3, r1, r5
 8006e56:	5dc7      	ldrb	r7, [r0, r7]
 8006e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e5c:	462f      	mov	r7, r5
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	460d      	mov	r5, r1
 8006e62:	d9f4      	bls.n	8006e4e <_printf_i+0x112>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d10b      	bne.n	8006e80 <_printf_i+0x144>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07df      	lsls	r7, r3, #31
 8006e6c:	d508      	bpl.n	8006e80 <_printf_i+0x144>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	6861      	ldr	r1, [r4, #4]
 8006e72:	4299      	cmp	r1, r3
 8006e74:	bfde      	ittt	le
 8006e76:	2330      	movle	r3, #48	@ 0x30
 8006e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e80:	1b92      	subs	r2, r2, r6
 8006e82:	6122      	str	r2, [r4, #16]
 8006e84:	f8cd a000 	str.w	sl, [sp]
 8006e88:	464b      	mov	r3, r9
 8006e8a:	aa03      	add	r2, sp, #12
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7ff fee6 	bl	8006c60 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	d14a      	bne.n	8006f2e <_printf_i+0x1f2>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e9c:	b004      	add	sp, #16
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	4833      	ldr	r0, [pc, #204]	@ (8006f78 <_printf_i+0x23c>)
 8006eac:	2778      	movs	r7, #120	@ 0x78
 8006eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	6831      	ldr	r1, [r6, #0]
 8006eb6:	061f      	lsls	r7, r3, #24
 8006eb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ebc:	d402      	bmi.n	8006ec4 <_printf_i+0x188>
 8006ebe:	065f      	lsls	r7, r3, #25
 8006ec0:	bf48      	it	mi
 8006ec2:	b2ad      	uxthmi	r5, r5
 8006ec4:	6031      	str	r1, [r6, #0]
 8006ec6:	07d9      	lsls	r1, r3, #31
 8006ec8:	bf44      	itt	mi
 8006eca:	f043 0320 	orrmi.w	r3, r3, #32
 8006ece:	6023      	strmi	r3, [r4, #0]
 8006ed0:	b11d      	cbz	r5, 8006eda <_printf_i+0x19e>
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	e7ac      	b.n	8006e30 <_printf_i+0xf4>
 8006ed6:	4827      	ldr	r0, [pc, #156]	@ (8006f74 <_printf_i+0x238>)
 8006ed8:	e7e9      	b.n	8006eae <_printf_i+0x172>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f023 0320 	bic.w	r3, r3, #32
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	e7f6      	b.n	8006ed2 <_printf_i+0x196>
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	e7bd      	b.n	8006e64 <_printf_i+0x128>
 8006ee8:	6833      	ldr	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	6961      	ldr	r1, [r4, #20]
 8006eee:	1d18      	adds	r0, r3, #4
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	062e      	lsls	r6, r5, #24
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	d501      	bpl.n	8006efc <_printf_i+0x1c0>
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	e002      	b.n	8006f02 <_printf_i+0x1c6>
 8006efc:	0668      	lsls	r0, r5, #25
 8006efe:	d5fb      	bpl.n	8006ef8 <_printf_i+0x1bc>
 8006f00:	8019      	strh	r1, [r3, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	4616      	mov	r6, r2
 8006f08:	e7bc      	b.n	8006e84 <_printf_i+0x148>
 8006f0a:	6833      	ldr	r3, [r6, #0]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	6032      	str	r2, [r6, #0]
 8006f10:	681e      	ldr	r6, [r3, #0]
 8006f12:	6862      	ldr	r2, [r4, #4]
 8006f14:	2100      	movs	r1, #0
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7f9 f97a 	bl	8000210 <memchr>
 8006f1c:	b108      	cbz	r0, 8006f22 <_printf_i+0x1e6>
 8006f1e:	1b80      	subs	r0, r0, r6
 8006f20:	6060      	str	r0, [r4, #4]
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	6123      	str	r3, [r4, #16]
 8006f26:	2300      	movs	r3, #0
 8006f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f2c:	e7aa      	b.n	8006e84 <_printf_i+0x148>
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	4632      	mov	r2, r6
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0ad      	beq.n	8006e98 <_printf_i+0x15c>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	079b      	lsls	r3, r3, #30
 8006f40:	d413      	bmi.n	8006f6a <_printf_i+0x22e>
 8006f42:	68e0      	ldr	r0, [r4, #12]
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	4298      	cmp	r0, r3
 8006f48:	bfb8      	it	lt
 8006f4a:	4618      	movlt	r0, r3
 8006f4c:	e7a6      	b.n	8006e9c <_printf_i+0x160>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4632      	mov	r2, r6
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	47d0      	blx	sl
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d09d      	beq.n	8006e98 <_printf_i+0x15c>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	9903      	ldr	r1, [sp, #12]
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	dcf2      	bgt.n	8006f4e <_printf_i+0x212>
 8006f68:	e7eb      	b.n	8006f42 <_printf_i+0x206>
 8006f6a:	2500      	movs	r5, #0
 8006f6c:	f104 0619 	add.w	r6, r4, #25
 8006f70:	e7f5      	b.n	8006f5e <_printf_i+0x222>
 8006f72:	bf00      	nop
 8006f74:	08007459 	.word	0x08007459
 8006f78:	0800746a 	.word	0x0800746a

08006f7c <__sflush_r>:
 8006f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f84:	0716      	lsls	r6, r2, #28
 8006f86:	4605      	mov	r5, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	d454      	bmi.n	8007036 <__sflush_r+0xba>
 8006f8c:	684b      	ldr	r3, [r1, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dc02      	bgt.n	8006f98 <__sflush_r+0x1c>
 8006f92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd48      	ble.n	800702a <__sflush_r+0xae>
 8006f98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d045      	beq.n	800702a <__sflush_r+0xae>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006fa4:	682f      	ldr	r7, [r5, #0]
 8006fa6:	6a21      	ldr	r1, [r4, #32]
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	d030      	beq.n	800700e <__sflush_r+0x92>
 8006fac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	0759      	lsls	r1, r3, #29
 8006fb2:	d505      	bpl.n	8006fc0 <__sflush_r+0x44>
 8006fb4:	6863      	ldr	r3, [r4, #4]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fba:	b10b      	cbz	r3, 8006fc0 <__sflush_r+0x44>
 8006fbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	d106      	bne.n	8006fde <__sflush_r+0x62>
 8006fd0:	6829      	ldr	r1, [r5, #0]
 8006fd2:	291d      	cmp	r1, #29
 8006fd4:	d82b      	bhi.n	800702e <__sflush_r+0xb2>
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007080 <__sflush_r+0x104>)
 8006fd8:	410a      	asrs	r2, r1
 8006fda:	07d6      	lsls	r6, r2, #31
 8006fdc:	d427      	bmi.n	800702e <__sflush_r+0xb2>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6062      	str	r2, [r4, #4]
 8006fe2:	04d9      	lsls	r1, r3, #19
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	d504      	bpl.n	8006ff4 <__sflush_r+0x78>
 8006fea:	1c42      	adds	r2, r0, #1
 8006fec:	d101      	bne.n	8006ff2 <__sflush_r+0x76>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b903      	cbnz	r3, 8006ff4 <__sflush_r+0x78>
 8006ff2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ff6:	602f      	str	r7, [r5, #0]
 8006ff8:	b1b9      	cbz	r1, 800702a <__sflush_r+0xae>
 8006ffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ffe:	4299      	cmp	r1, r3
 8007000:	d002      	beq.n	8007008 <__sflush_r+0x8c>
 8007002:	4628      	mov	r0, r5
 8007004:	f7ff fbf2 	bl	80067ec <_free_r>
 8007008:	2300      	movs	r3, #0
 800700a:	6363      	str	r3, [r4, #52]	@ 0x34
 800700c:	e00d      	b.n	800702a <__sflush_r+0xae>
 800700e:	2301      	movs	r3, #1
 8007010:	4628      	mov	r0, r5
 8007012:	47b0      	blx	r6
 8007014:	4602      	mov	r2, r0
 8007016:	1c50      	adds	r0, r2, #1
 8007018:	d1c9      	bne.n	8006fae <__sflush_r+0x32>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0c6      	beq.n	8006fae <__sflush_r+0x32>
 8007020:	2b1d      	cmp	r3, #29
 8007022:	d001      	beq.n	8007028 <__sflush_r+0xac>
 8007024:	2b16      	cmp	r3, #22
 8007026:	d11e      	bne.n	8007066 <__sflush_r+0xea>
 8007028:	602f      	str	r7, [r5, #0]
 800702a:	2000      	movs	r0, #0
 800702c:	e022      	b.n	8007074 <__sflush_r+0xf8>
 800702e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007032:	b21b      	sxth	r3, r3
 8007034:	e01b      	b.n	800706e <__sflush_r+0xf2>
 8007036:	690f      	ldr	r7, [r1, #16]
 8007038:	2f00      	cmp	r7, #0
 800703a:	d0f6      	beq.n	800702a <__sflush_r+0xae>
 800703c:	0793      	lsls	r3, r2, #30
 800703e:	680e      	ldr	r6, [r1, #0]
 8007040:	bf08      	it	eq
 8007042:	694b      	ldreq	r3, [r1, #20]
 8007044:	600f      	str	r7, [r1, #0]
 8007046:	bf18      	it	ne
 8007048:	2300      	movne	r3, #0
 800704a:	eba6 0807 	sub.w	r8, r6, r7
 800704e:	608b      	str	r3, [r1, #8]
 8007050:	f1b8 0f00 	cmp.w	r8, #0
 8007054:	dde9      	ble.n	800702a <__sflush_r+0xae>
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800705a:	4643      	mov	r3, r8
 800705c:	463a      	mov	r2, r7
 800705e:	4628      	mov	r0, r5
 8007060:	47b0      	blx	r6
 8007062:	2800      	cmp	r0, #0
 8007064:	dc08      	bgt.n	8007078 <__sflush_r+0xfc>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007078:	4407      	add	r7, r0
 800707a:	eba8 0800 	sub.w	r8, r8, r0
 800707e:	e7e7      	b.n	8007050 <__sflush_r+0xd4>
 8007080:	dfbffffe 	.word	0xdfbffffe

08007084 <_fflush_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b913      	cbnz	r3, 8007094 <_fflush_r+0x10>
 800708e:	2500      	movs	r5, #0
 8007090:	4628      	mov	r0, r5
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	b118      	cbz	r0, 800709e <_fflush_r+0x1a>
 8007096:	6a03      	ldr	r3, [r0, #32]
 8007098:	b90b      	cbnz	r3, 800709e <_fflush_r+0x1a>
 800709a:	f7ff fa91 	bl	80065c0 <__sinit>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f3      	beq.n	800708e <_fflush_r+0xa>
 80070a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070a8:	07d0      	lsls	r0, r2, #31
 80070aa:	d404      	bmi.n	80070b6 <_fflush_r+0x32>
 80070ac:	0599      	lsls	r1, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_fflush_r+0x32>
 80070b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070b2:	f7ff fb8a 	bl	80067ca <__retarget_lock_acquire_recursive>
 80070b6:	4628      	mov	r0, r5
 80070b8:	4621      	mov	r1, r4
 80070ba:	f7ff ff5f 	bl	8006f7c <__sflush_r>
 80070be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070c0:	07da      	lsls	r2, r3, #31
 80070c2:	4605      	mov	r5, r0
 80070c4:	d4e4      	bmi.n	8007090 <_fflush_r+0xc>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	d4e1      	bmi.n	8007090 <_fflush_r+0xc>
 80070cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ce:	f7ff fb7d 	bl	80067cc <__retarget_lock_release_recursive>
 80070d2:	e7dd      	b.n	8007090 <_fflush_r+0xc>

080070d4 <__swbuf_r>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	460e      	mov	r6, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	4605      	mov	r5, r0
 80070dc:	b118      	cbz	r0, 80070e6 <__swbuf_r+0x12>
 80070de:	6a03      	ldr	r3, [r0, #32]
 80070e0:	b90b      	cbnz	r3, 80070e6 <__swbuf_r+0x12>
 80070e2:	f7ff fa6d 	bl	80065c0 <__sinit>
 80070e6:	69a3      	ldr	r3, [r4, #24]
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	071a      	lsls	r2, r3, #28
 80070ee:	d501      	bpl.n	80070f4 <__swbuf_r+0x20>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	b943      	cbnz	r3, 8007106 <__swbuf_r+0x32>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f82a 	bl	8007150 <__swsetup_r>
 80070fc:	b118      	cbz	r0, 8007106 <__swbuf_r+0x32>
 80070fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007102:	4638      	mov	r0, r7
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	1a98      	subs	r0, r3, r2
 800710c:	6963      	ldr	r3, [r4, #20]
 800710e:	b2f6      	uxtb	r6, r6
 8007110:	4283      	cmp	r3, r0
 8007112:	4637      	mov	r7, r6
 8007114:	dc05      	bgt.n	8007122 <__swbuf_r+0x4e>
 8007116:	4621      	mov	r1, r4
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff ffb3 	bl	8007084 <_fflush_r>
 800711e:	2800      	cmp	r0, #0
 8007120:	d1ed      	bne.n	80070fe <__swbuf_r+0x2a>
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	3b01      	subs	r3, #1
 8007126:	60a3      	str	r3, [r4, #8]
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	6022      	str	r2, [r4, #0]
 800712e:	701e      	strb	r6, [r3, #0]
 8007130:	6962      	ldr	r2, [r4, #20]
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	429a      	cmp	r2, r3
 8007136:	d004      	beq.n	8007142 <__swbuf_r+0x6e>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	07db      	lsls	r3, r3, #31
 800713c:	d5e1      	bpl.n	8007102 <__swbuf_r+0x2e>
 800713e:	2e0a      	cmp	r6, #10
 8007140:	d1df      	bne.n	8007102 <__swbuf_r+0x2e>
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff ff9d 	bl	8007084 <_fflush_r>
 800714a:	2800      	cmp	r0, #0
 800714c:	d0d9      	beq.n	8007102 <__swbuf_r+0x2e>
 800714e:	e7d6      	b.n	80070fe <__swbuf_r+0x2a>

08007150 <__swsetup_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <__swsetup_r+0xa8>)
 8007154:	4605      	mov	r5, r0
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	460c      	mov	r4, r1
 800715a:	b118      	cbz	r0, 8007164 <__swsetup_r+0x14>
 800715c:	6a03      	ldr	r3, [r0, #32]
 800715e:	b90b      	cbnz	r3, 8007164 <__swsetup_r+0x14>
 8007160:	f7ff fa2e 	bl	80065c0 <__sinit>
 8007164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007168:	0719      	lsls	r1, r3, #28
 800716a:	d422      	bmi.n	80071b2 <__swsetup_r+0x62>
 800716c:	06da      	lsls	r2, r3, #27
 800716e:	d407      	bmi.n	8007180 <__swsetup_r+0x30>
 8007170:	2209      	movs	r2, #9
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800717e:	e033      	b.n	80071e8 <__swsetup_r+0x98>
 8007180:	0758      	lsls	r0, r3, #29
 8007182:	d512      	bpl.n	80071aa <__swsetup_r+0x5a>
 8007184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007186:	b141      	cbz	r1, 800719a <__swsetup_r+0x4a>
 8007188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800718c:	4299      	cmp	r1, r3
 800718e:	d002      	beq.n	8007196 <__swsetup_r+0x46>
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fb2b 	bl	80067ec <_free_r>
 8007196:	2300      	movs	r3, #0
 8007198:	6363      	str	r3, [r4, #52]	@ 0x34
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	2300      	movs	r3, #0
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	b94b      	cbnz	r3, 80071ca <__swsetup_r+0x7a>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c0:	d003      	beq.n	80071ca <__swsetup_r+0x7a>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f84f 	bl	8007268 <__smakebuf_r>
 80071ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ce:	f013 0201 	ands.w	r2, r3, #1
 80071d2:	d00a      	beq.n	80071ea <__swsetup_r+0x9a>
 80071d4:	2200      	movs	r2, #0
 80071d6:	60a2      	str	r2, [r4, #8]
 80071d8:	6962      	ldr	r2, [r4, #20]
 80071da:	4252      	negs	r2, r2
 80071dc:	61a2      	str	r2, [r4, #24]
 80071de:	6922      	ldr	r2, [r4, #16]
 80071e0:	b942      	cbnz	r2, 80071f4 <__swsetup_r+0xa4>
 80071e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071e6:	d1c5      	bne.n	8007174 <__swsetup_r+0x24>
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	0799      	lsls	r1, r3, #30
 80071ec:	bf58      	it	pl
 80071ee:	6962      	ldrpl	r2, [r4, #20]
 80071f0:	60a2      	str	r2, [r4, #8]
 80071f2:	e7f4      	b.n	80071de <__swsetup_r+0x8e>
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7f7      	b.n	80071e8 <__swsetup_r+0x98>
 80071f8:	2000001c 	.word	0x2000001c

080071fc <_sbrk_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d06      	ldr	r5, [pc, #24]	@ (8007218 <_sbrk_r+0x1c>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7f9 fd4e 	bl	8000ca8 <_sbrk>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_sbrk_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_sbrk_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20004c38 	.word	0x20004c38

0800721c <__swhatbuf_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	460c      	mov	r4, r1
 8007220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007224:	2900      	cmp	r1, #0
 8007226:	b096      	sub	sp, #88	@ 0x58
 8007228:	4615      	mov	r5, r2
 800722a:	461e      	mov	r6, r3
 800722c:	da0d      	bge.n	800724a <__swhatbuf_r+0x2e>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007234:	f04f 0100 	mov.w	r1, #0
 8007238:	bf14      	ite	ne
 800723a:	2340      	movne	r3, #64	@ 0x40
 800723c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007240:	2000      	movs	r0, #0
 8007242:	6031      	str	r1, [r6, #0]
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	b016      	add	sp, #88	@ 0x58
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	466a      	mov	r2, sp
 800724c:	f000 f848 	bl	80072e0 <_fstat_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	dbec      	blt.n	800722e <__swhatbuf_r+0x12>
 8007254:	9901      	ldr	r1, [sp, #4]
 8007256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800725a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800725e:	4259      	negs	r1, r3
 8007260:	4159      	adcs	r1, r3
 8007262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007266:	e7eb      	b.n	8007240 <__swhatbuf_r+0x24>

08007268 <__smakebuf_r>:
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800726c:	079d      	lsls	r5, r3, #30
 800726e:	4606      	mov	r6, r0
 8007270:	460c      	mov	r4, r1
 8007272:	d507      	bpl.n	8007284 <__smakebuf_r+0x1c>
 8007274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	2301      	movs	r3, #1
 800727e:	6163      	str	r3, [r4, #20]
 8007280:	b003      	add	sp, #12
 8007282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007284:	ab01      	add	r3, sp, #4
 8007286:	466a      	mov	r2, sp
 8007288:	f7ff ffc8 	bl	800721c <__swhatbuf_r>
 800728c:	9f00      	ldr	r7, [sp, #0]
 800728e:	4605      	mov	r5, r0
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff fb16 	bl	80068c4 <_malloc_r>
 8007298:	b948      	cbnz	r0, 80072ae <__smakebuf_r+0x46>
 800729a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729e:	059a      	lsls	r2, r3, #22
 80072a0:	d4ee      	bmi.n	8007280 <__smakebuf_r+0x18>
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	e7e2      	b.n	8007274 <__smakebuf_r+0xc>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	6020      	str	r0, [r4, #0]
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072be:	b15b      	cbz	r3, 80072d8 <__smakebuf_r+0x70>
 80072c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 f81d 	bl	8007304 <_isatty_r>
 80072ca:	b128      	cbz	r0, 80072d8 <__smakebuf_r+0x70>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	431d      	orrs	r5, r3
 80072dc:	81a5      	strh	r5, [r4, #12]
 80072de:	e7cf      	b.n	8007280 <__smakebuf_r+0x18>

080072e0 <_fstat_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_fstat_r+0x20>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	f7f9 fcb2 	bl	8000c56 <_fstat>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	d102      	bne.n	80072fc <_fstat_r+0x1c>
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	b103      	cbz	r3, 80072fc <_fstat_r+0x1c>
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
 80072fe:	bf00      	nop
 8007300:	20004c38 	.word	0x20004c38

08007304 <_isatty_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d06      	ldr	r5, [pc, #24]	@ (8007320 <_isatty_r+0x1c>)
 8007308:	2300      	movs	r3, #0
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7f9 fcb1 	bl	8000c76 <_isatty>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_isatty_r+0x1a>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_isatty_r+0x1a>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20004c38 	.word	0x20004c38

08007324 <_init>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr

08007330 <_fini>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr
