
RTOS basic implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007984  08007984  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800798c  0800798c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007994  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  2000006c  08007a00  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08007a00  00009c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136bc  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309d  00000000  00000000  0001c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8f  00000000  00000000  00020860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000458b  00000000  00000000  000214ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ff  00000000  00000000  00025a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4dbd  00000000  00000000  00037c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ca36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  0010ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00111580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076a0 	.word	0x080076a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080076a0 	.word	0x080076a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__io_putchar>:
volatile SystemState_t systemState = BOOT;
volatile uint32_t buttonPressStartTime = 0;
volatile uint8_t buttonPressCount = 0;


int __io_putchar(int ch) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <__io_putchar+0x20>)
 80005b2:	f002 fa6d 	bl	8002a90 <HAL_UART_Transmit>
    return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000088 	.word	0x20000088

080005c4 <isButtonPressed>:


uint8_t isButtonPressed()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <isButtonPressed+0x20>)
 80005ce:	f001 fbdb 	bl	8001d88 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020800 	.word	0x40020800

080005e8 <handleButtonPress>:

void handleButtonPress()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    if (isButtonPressed())
 80005ec:	f7ff ffea 	bl	80005c4 <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00d      	beq.n	8000612 <handleButtonPress+0x2a>
    {
        if (!buttonPressed) // If button was not already pressed
 80005f6:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <handleButtonPress+0xc4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d153      	bne.n	80006a8 <handleButtonPress+0xc0>
        {
            buttonPressTime = HAL_GetTick();
 8000600:	f000 fd70 	bl	80010e4 <HAL_GetTick>
 8000604:	4603      	mov	r3, r0
 8000606:	4a2a      	ldr	r2, [pc, #168]	@ (80006b0 <handleButtonPress+0xc8>)
 8000608:	6013      	str	r3, [r2, #0]
            buttonPressed = 1;
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <handleButtonPress+0xc4>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
                systemState = RECOVERY;
            }
        }
        buttonPressed = 0; // Reset button state
    }
}
 8000610:	e04a      	b.n	80006a8 <handleButtonPress+0xc0>
        if (buttonPressed && HAL_GetTick() - buttonPressTime >= 2000) // 2-second press
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <handleButtonPress+0xc4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d011      	beq.n	8000640 <handleButtonPress+0x58>
 800061c:	f000 fd62 	bl	80010e4 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <handleButtonPress+0xc8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800062c:	d308      	bcc.n	8000640 <handleButtonPress+0x58>
            if (systemState == BOOT)
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <handleButtonPress+0xcc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d134      	bne.n	80006a2 <handleButtonPress+0xba>
                systemState = IDLE; // Transition from BOOT to IDLE
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <handleButtonPress+0xcc>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
            if (systemState == BOOT)
 800063e:	e030      	b.n	80006a2 <handleButtonPress+0xba>
        else if (buttonPressed && HAL_GetTick() - buttonPressTime < 2000) // Single press
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <handleButtonPress+0xc4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d02b      	beq.n	80006a2 <handleButtonPress+0xba>
 800064a:	f000 fd4b 	bl	80010e4 <HAL_GetTick>
 800064e:	4602      	mov	r2, r0
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <handleButtonPress+0xc8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800065a:	d222      	bcs.n	80006a2 <handleButtonPress+0xba>
            if (systemState == IDLE)
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <handleButtonPress+0xcc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b01      	cmp	r3, #1
 8000664:	d103      	bne.n	800066e <handleButtonPress+0x86>
                systemState = TELEMETRY;
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <handleButtonPress+0xcc>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e019      	b.n	80006a2 <handleButtonPress+0xba>
            else if (systemState == TELEMETRY)
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <handleButtonPress+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b02      	cmp	r3, #2
 8000676:	d103      	bne.n	8000680 <handleButtonPress+0x98>
                systemState = ASCENT;
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <handleButtonPress+0xcc>)
 800067a:	2203      	movs	r2, #3
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e010      	b.n	80006a2 <handleButtonPress+0xba>
            else if (systemState == ASCENT)
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <handleButtonPress+0xcc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b03      	cmp	r3, #3
 8000688:	d103      	bne.n	8000692 <handleButtonPress+0xaa>
                systemState = DESCENT;
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <handleButtonPress+0xcc>)
 800068c:	2204      	movs	r2, #4
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e007      	b.n	80006a2 <handleButtonPress+0xba>
            else if (systemState == DESCENT)
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <handleButtonPress+0xcc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b04      	cmp	r3, #4
 800069a:	d102      	bne.n	80006a2 <handleButtonPress+0xba>
                systemState = RECOVERY;
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <handleButtonPress+0xcc>)
 800069e:	2205      	movs	r2, #5
 80006a0:	701a      	strb	r2, [r3, #0]
        buttonPressed = 0; // Reset button state
 80006a2:	4b02      	ldr	r3, [pc, #8]	@ (80006ac <handleButtonPress+0xc4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200001b0 	.word	0x200001b0
 80006b0:	200001ac 	.word	0x200001ac
 80006b4:	200001b1 	.word	0x200001b1

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fcac 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f86e 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f92c 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 f902 	bl	80008d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f8d6 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d0:	f003 f9c4 	bl	8003a5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d4:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <main+0x94>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	481d      	ldr	r0, [pc, #116]	@ (8000750 <main+0x98>)
 80006da:	f003 fa09 	bl	8003af0 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <main+0x9c>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 80006e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <main+0xa0>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481c      	ldr	r0, [pc, #112]	@ (800075c <main+0xa4>)
 80006ea:	f003 fa01 	bl	8003af0 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <main+0xa8>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of bootTask */
  bootTaskHandle = osThreadNew(StartBootTask, NULL, &bootTask_attributes);
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <main+0xac>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481b      	ldr	r0, [pc, #108]	@ (8000768 <main+0xb0>)
 80006fa:	f003 f9f9 	bl	8003af0 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1a      	ldr	r2, [pc, #104]	@ (800076c <main+0xb4>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartIdleTask, NULL, &idleTask_attributes);
 8000704:	4a1a      	ldr	r2, [pc, #104]	@ (8000770 <main+0xb8>)
 8000706:	2100      	movs	r1, #0
 8000708:	481a      	ldr	r0, [pc, #104]	@ (8000774 <main+0xbc>)
 800070a:	f003 f9f1 	bl	8003af0 <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <main+0xc0>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of ascentTask */
  ascentTaskHandle = osThreadNew(StartAscentTask, NULL, &ascentTask_attributes);
 8000714:	4a19      	ldr	r2, [pc, #100]	@ (800077c <main+0xc4>)
 8000716:	2100      	movs	r1, #0
 8000718:	4819      	ldr	r0, [pc, #100]	@ (8000780 <main+0xc8>)
 800071a:	f003 f9e9 	bl	8003af0 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <main+0xcc>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of descentTask */
  descentTaskHandle = osThreadNew(StartDescentTask, NULL, &descentTask_attributes);
 8000724:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <main+0xd0>)
 8000726:	2100      	movs	r1, #0
 8000728:	4818      	ldr	r0, [pc, #96]	@ (800078c <main+0xd4>)
 800072a:	f003 f9e1 	bl	8003af0 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <main+0xd8>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of recoveryTask */
  recoveryTaskHandle = osThreadNew(StartRecoveryTask, NULL, &recoveryTask_attributes);
 8000734:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <main+0xdc>)
 8000736:	2100      	movs	r1, #0
 8000738:	4817      	ldr	r0, [pc, #92]	@ (8000798 <main+0xe0>)
 800073a:	f003 f9d9 	bl	8003af0 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a16      	ldr	r2, [pc, #88]	@ (800079c <main+0xe4>)
 8000742:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f003 f9ae 	bl	8003aa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <main+0x90>
 800074c:	08007834 	.word	0x08007834
 8000750:	080009fd 	.word	0x080009fd
 8000754:	20000190 	.word	0x20000190
 8000758:	08007858 	.word	0x08007858
 800075c:	08000a0d 	.word	0x08000a0d
 8000760:	20000194 	.word	0x20000194
 8000764:	0800787c 	.word	0x0800787c
 8000768:	08000a49 	.word	0x08000a49
 800076c:	20000198 	.word	0x20000198
 8000770:	080078a0 	.word	0x080078a0
 8000774:	08000aa1 	.word	0x08000aa1
 8000778:	2000019c 	.word	0x2000019c
 800077c:	080078c4 	.word	0x080078c4
 8000780:	08000ae5 	.word	0x08000ae5
 8000784:	200001a0 	.word	0x200001a0
 8000788:	080078e8 	.word	0x080078e8
 800078c:	08000b1d 	.word	0x08000b1d
 8000790:	200001a4 	.word	0x200001a4
 8000794:	0800790c 	.word	0x0800790c
 8000798:	08000bb1 	.word	0x08000bb1
 800079c:	200001a8 	.word	0x200001a8

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	@ 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f9e4 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000874 <SystemClock_Config+0xd4>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <SystemClock_Config+0xd4>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <SystemClock_Config+0xd4>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <SystemClock_Config+0xd8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ec:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <SystemClock_Config+0xd8>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <SystemClock_Config+0xd8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000814:	2310      	movs	r3, #16
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000818:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800081c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800081e:	2304      	movs	r3, #4
 8000820:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fe40 	bl	80024b4 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800083a:	f000 f9e1 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fae0 	bl	8001e20 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000866:	f000 f9cb 	bl	8000c00 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	@ 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f002 f89c 	bl	80029f0 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f99f 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000088 	.word	0x20000088
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <MX_DMA_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <MX_DMA_Init+0x4c>)
 80008e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <MX_DMA_Init+0x4c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2105      	movs	r1, #5
 80008f6:	2010      	movs	r0, #16
 80008f8:	f000 fcff 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008fc:	2010      	movs	r0, #16
 80008fe:	f000 fd18 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	2011      	movs	r0, #17
 8000908:	f000 fcf7 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800090c:	2011      	movs	r0, #17
 800090e:	f000 fd10 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 80009ac:	f001 fa04 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_GPIO_Init+0xd8>)
 80009c8:	f001 f84a 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 80009e4:	f001 f83c 	bl	8001a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020800 	.word	0x40020800

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f003 f932 	bl	8003c6e <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartDefaultTask+0x8>

08000a0c <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	  const char *telemetryMessage = "Telemetry Data\r\n";
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <StartUartTask+0x34>)
 8000a16:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	    handleButtonPress();
 8000a18:	f7ff fde6 	bl	80005e8 <handleButtonPress>

	    if (systemState == TELEMETRY) // Telemetry state
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <StartUartTask+0x38>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d107      	bne.n	8000a36 <StartUartTask+0x2a>
	    {
	      printf(telemetryMessage);
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f005 ff60 	bl	80068ec <iprintf>
	      osDelay(1000); // Send telemetry every second
 8000a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a30:	f003 f91d 	bl	8003c6e <osDelay>
 8000a34:	e7f0      	b.n	8000a18 <StartUartTask+0xc>
	    }
	    else
	    {
	      osDelay(100); // Check periodically
 8000a36:	2064      	movs	r0, #100	@ 0x64
 8000a38:	f003 f919 	bl	8003c6e <osDelay>
	    handleButtonPress();
 8000a3c:	e7ec      	b.n	8000a18 <StartUartTask+0xc>
 8000a3e:	bf00      	nop
 8000a40:	08007710 	.word	0x08007710
 8000a44:	200001b1 	.word	0x200001b1

08000a48 <StartBootTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBootTask */
void StartBootTask(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBootTask */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Example: Reset an LED
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <StartBootTask+0x48>)
 8000a56:	f001 f9af 	bl	8001db8 <HAL_GPIO_WritePin>
    printf("Boot State\r\n");
 8000a5a:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <StartBootTask+0x4c>)
 8000a5c:	f005 ffae 	bl	80069bc <puts>

	HAL_Delay(100); // Simulate boot process
 8000a60:	2064      	movs	r0, #100	@ 0x64
 8000a62:	f000 fb4b 	bl	80010fc <HAL_Delay>
    printf("Initializing sensors and actuators \r\n");
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <StartBootTask+0x50>)
 8000a68:	f005 ffa8 	bl	80069bc <puts>

    handleButtonPress();
 8000a6c:	f7ff fdbc 	bl	80005e8 <handleButtonPress>

    if (systemState == IDLE)
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <StartBootTask+0x54>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d102      	bne.n	8000a80 <StartBootTask+0x38>
    {
      osThreadTerminate(NULL); // Terminate Boot Task after transition
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f003 f8ca 	bl	8003c14 <osThreadTerminate>
    }

    osDelay(100);
 8000a80:	2064      	movs	r0, #100	@ 0x64
 8000a82:	f003 f8f4 	bl	8003c6e <osDelay>

  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f003 f8f1 	bl	8003c6e <osDelay>
 8000a8c:	e7fb      	b.n	8000a86 <StartBootTask+0x3e>
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000
 8000a94:	08007724 	.word	0x08007724
 8000a98:	08007730 	.word	0x08007730
 8000a9c:	200001b1 	.word	0x200001b1

08000aa0 <StartIdleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
	  handleButtonPress();
 8000aa8:	f7ff fd9e 	bl	80005e8 <handleButtonPress>

	      if (systemState == IDLE) // Idle state
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <StartIdleTask+0x3c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d105      	bne.n	8000ac2 <StartIdleTask+0x22>
	      {
	        printf("Idle State: All sensors and actuators initialized\r\n");
 8000ab6:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <StartIdleTask+0x40>)
 8000ab8:	f005 ff80 	bl	80069bc <puts>
	        StartUartTask(NULL); // Start UART task to send telemetry
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ffa5 	bl	8000a0c <StartUartTask>
	      }

	      if (systemState != IDLE) // Exit Idle state
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <StartIdleTask+0x3c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d002      	beq.n	8000ad2 <StartIdleTask+0x32>
	      {
	        osThreadTerminate(NULL); // Terminate Idle Task
 8000acc:	2000      	movs	r0, #0
 8000ace:	f003 f8a1 	bl	8003c14 <osThreadTerminate>
	      }

	      osDelay(100);
 8000ad2:	2064      	movs	r0, #100	@ 0x64
 8000ad4:	f003 f8cb 	bl	8003c6e <osDelay>
	  handleButtonPress();
 8000ad8:	e7e6      	b.n	8000aa8 <StartIdleTask+0x8>
 8000ada:	bf00      	nop
 8000adc:	200001b1 	.word	0x200001b1
 8000ae0:	08007758 	.word	0x08007758

08000ae4 <StartAscentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAscentTask */
void StartAscentTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAscentTask */
  /* Infinite loop */
  for(;;)
  {
	    handleButtonPress();
 8000aec:	f7ff fd7c 	bl	80005e8 <handleButtonPress>

	    if (systemState == ASCENT)
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <StartAscentTask+0x30>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d107      	bne.n	8000b0a <StartAscentTask+0x26>
	    {
	      printf("Ascent Telemetry Data\r\n");
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <StartAscentTask+0x34>)
 8000afc:	f005 ff5e 	bl	80069bc <puts>
	      osDelay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f003 f8b3 	bl	8003c6e <osDelay>
 8000b08:	e7f0      	b.n	8000aec <StartAscentTask+0x8>
	    }
	    else
	    {
	      osDelay(100);
 8000b0a:	2064      	movs	r0, #100	@ 0x64
 8000b0c:	f003 f8af 	bl	8003c6e <osDelay>
	    handleButtonPress();
 8000b10:	e7ec      	b.n	8000aec <StartAscentTask+0x8>
 8000b12:	bf00      	nop
 8000b14:	200001b1 	.word	0x200001b1
 8000b18:	0800778c 	.word	0x0800778c

08000b1c <StartDescentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDescentTask */
void StartDescentTask(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)

  {
	    handleButtonPress();
 8000b24:	f7ff fd60 	bl	80005e8 <handleButtonPress>

	    if (systemState == DESCENT)
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <StartDescentTask+0x7c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d12e      	bne.n	8000b90 <StartDescentTask+0x74>
	    {
	      // Simulate actions during descent
	      HAL_UART_Transmit(&huart2, (uint8_t *)"Release drogue parachute\r\n", 26, HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b36:	221a      	movs	r2, #26
 8000b38:	4918      	ldr	r1, [pc, #96]	@ (8000b9c <StartDescentTask+0x80>)
 8000b3a:	4819      	ldr	r0, [pc, #100]	@ (8000ba0 <StartDescentTask+0x84>)
 8000b3c:	f001 ffa8 	bl	8002a90 <HAL_UART_Transmit>
	      osDelay(2000);
 8000b40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b44:	f003 f893 	bl	8003c6e <osDelay>

	      HAL_UART_Transmit(&huart2, (uint8_t *)"Payload ejection\r\n", 18, HAL_MAX_DELAY);
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4c:	2212      	movs	r2, #18
 8000b4e:	4915      	ldr	r1, [pc, #84]	@ (8000ba4 <StartDescentTask+0x88>)
 8000b50:	4813      	ldr	r0, [pc, #76]	@ (8000ba0 <StartDescentTask+0x84>)
 8000b52:	f001 ff9d 	bl	8002a90 <HAL_UART_Transmit>
	      osDelay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	f003 f888 	bl	8003c6e <osDelay>

	      HAL_UART_Transmit(&huart2, (uint8_t *)"Deploy main parachute\r\n", 24, HAL_MAX_DELAY);
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b62:	2218      	movs	r2, #24
 8000b64:	4910      	ldr	r1, [pc, #64]	@ (8000ba8 <StartDescentTask+0x8c>)
 8000b66:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <StartDescentTask+0x84>)
 8000b68:	f001 ff92 	bl	8002a90 <HAL_UART_Transmit>
	      osDelay(2000);
 8000b6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b70:	f003 f87d 	bl	8003c6e <osDelay>

	      // Continue sending descent telemetry without waiting for actions
	      while (systemState == DESCENT)
 8000b74:	e006      	b.n	8000b84 <StartDescentTask+0x68>
	      {
	        printf("Descent Telemetry Data\r\n");
 8000b76:	480d      	ldr	r0, [pc, #52]	@ (8000bac <StartDescentTask+0x90>)
 8000b78:	f005 ff20 	bl	80069bc <puts>
	        osDelay(1000); // Send telemetry every second
 8000b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b80:	f003 f875 	bl	8003c6e <osDelay>
	      while (systemState == DESCENT)
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <StartDescentTask+0x7c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d0f3      	beq.n	8000b76 <StartDescentTask+0x5a>
 8000b8e:	e7c9      	b.n	8000b24 <StartDescentTask+0x8>
	      }
	    }
	    else
	    {
	      osDelay(100);
 8000b90:	2064      	movs	r0, #100	@ 0x64
 8000b92:	f003 f86c 	bl	8003c6e <osDelay>
	    handleButtonPress();
 8000b96:	e7c5      	b.n	8000b24 <StartDescentTask+0x8>
 8000b98:	200001b1 	.word	0x200001b1
 8000b9c:	080077a4 	.word	0x080077a4
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	080077c0 	.word	0x080077c0
 8000ba8:	080077d4 	.word	0x080077d4
 8000bac:	080077ec 	.word	0x080077ec

08000bb0 <StartRecoveryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecoveryTask */
void StartRecoveryTask(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecoveryTask */
  /* Infinite loop */
  for(;;)
  {
	    handleButtonPress();
 8000bb8:	f7ff fd16 	bl	80005e8 <handleButtonPress>

	    if (systemState == RECOVERY)
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <StartRecoveryTask+0x40>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d10f      	bne.n	8000be6 <StartRecoveryTask+0x36>
	    {
	      HAL_UART_Transmit(&huart2, (uint8_t *)"Shortened Telemetry\r\n", 22, HAL_MAX_DELAY);
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bca:	2216      	movs	r2, #22
 8000bcc:	4909      	ldr	r1, [pc, #36]	@ (8000bf4 <StartRecoveryTask+0x44>)
 8000bce:	480a      	ldr	r0, [pc, #40]	@ (8000bf8 <StartRecoveryTask+0x48>)
 8000bd0:	f001 ff5e 	bl	8002a90 <HAL_UART_Transmit>

	      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <StartRecoveryTask+0x4c>)
 8000bd8:	f001 f907 	bl	8001dea <HAL_GPIO_TogglePin>
	      osDelay(1000);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be0:	f003 f845 	bl	8003c6e <osDelay>
 8000be4:	e7e8      	b.n	8000bb8 <StartRecoveryTask+0x8>
	    }
	    else
	    {
	      osDelay(100);
 8000be6:	2064      	movs	r0, #100	@ 0x64
 8000be8:	f003 f841 	bl	8003c6e <osDelay>
	    handleButtonPress();
 8000bec:	e7e4      	b.n	8000bb8 <StartRecoveryTask+0x8>
 8000bee:	bf00      	nop
 8000bf0:	200001b1 	.word	0x200001b1
 8000bf4:	08007804 	.word	0x08007804
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	40020000 	.word	0x40020000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a11      	ldr	r2, [pc, #68]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f06f 0001 	mvn.w	r0, #1
 8000c52:	f000 fb52 	bl	80012fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	@ (8000db0 <HAL_UART_MspInit+0x14c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f040 8090 	bne.w	8000da8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	4b49      	ldr	r3, [pc, #292]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b46      	ldr	r3, [pc, #280]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	4a41      	ldr	r2, [pc, #260]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8000db4 <HAL_UART_MspInit+0x150>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <HAL_UART_MspInit+0x154>)
 8000cdc:	f000 fec0 	bl	8001a60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000ce2:	4a37      	ldr	r2, [pc, #220]	@ (8000dc0 <HAL_UART_MspInit+0x15c>)
 8000ce4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000ce8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cee:	4b33      	ldr	r3, [pc, #204]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf4:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfa:	4b30      	ldr	r3, [pc, #192]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000cfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d20:	4826      	ldr	r0, [pc, #152]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d22:	f000 fb21 	bl	8001368 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d2c:	f7ff ff68 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d36:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <HAL_UART_MspInit+0x158>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d3e:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000d40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d4c:	2240      	movs	r2, #64	@ 0x40
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d7c:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d7e:	f000 faf3 	bl	8001368 <HAL_DMA_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000d88:	f7ff ff3a 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d92:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	2026      	movs	r0, #38	@ 0x26
 8000d9e:	f000 faac 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da2:	2026      	movs	r0, #38	@ 0x26
 8000da4:	f000 fac5 	bl	8001332 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	200000d0 	.word	0x200000d0
 8000dc0:	40026088 	.word	0x40026088
 8000dc4:	20000130 	.word	0x20000130
 8000dc8:	400260a0 	.word	0x400260a0

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f959 	bl	80010bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e0a:	f004 fc33 	bl	8005674 <xTaskGetSchedulerState>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d001      	beq.n	8000e18 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e14:	f005 fa28 	bl	8006268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <DMA1_Stream5_IRQHandler+0x10>)
 8000e22:	f000 fbe1 	bl	80015e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000d0 	.word	0x200000d0

08000e30 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <DMA1_Stream6_IRQHandler+0x10>)
 8000e36:	f000 fbd7 	bl	80015e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000130 	.word	0x20000130

08000e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <USART2_IRQHandler+0x10>)
 8000e4a:	f001 fead 	bl	8002ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000088 	.word	0x20000088

08000e58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
  }

  return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb77 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
  }
  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f005 fe58 	bl	8006c18 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200001b4 	.word	0x200001b4
 8000f9c:	20004c58 	.word	0x20004c58

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f005 fe17 	bl	8006c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fb5f 	bl	80006b8 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001008:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 800100c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001010:	20004c58 	.word	0x20004c58

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fdde 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	200001b8 	.word	0x200001b8

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200001b8 	.word	0x200001b8

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff feb6 	bl	80010e4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fe9d 	bl	80010e4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa7b 	bl	8001968 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa32 	bl	80018fc <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d2:	f7ff fe07 	bl	80010e4 <HAL_GetTick>
 80014d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e052      	b.n	800159c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0216 	bic.w	r2, r2, #22
 8001504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_DMA_Abort+0x62>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0208 	bic.w	r2, r2, #8
 8001534:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	e013      	b.n	8001570 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001548:	f7ff fdcc 	bl	80010e4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b05      	cmp	r3, #5
 8001554:	d90c      	bls.n	8001570 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e015      	b.n	800159c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1e4      	bne.n	8001548 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001582:	223f      	movs	r2, #63	@ 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d004      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00c      	b.n	80015dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001830 <HAL_DMA_IRQHandler+0x248>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001834 <HAL_DMA_IRQHandler+0x24c>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a9b      	lsrs	r3, r3, #10
 8001600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	2208      	movs	r2, #8
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01a      	beq.n	8001654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001640:	2208      	movs	r2, #8
 8001642:	409a      	lsls	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164c:	f043 0201 	orr.w	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001658:	2201      	movs	r2, #1
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	2201      	movs	r2, #1
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	f043 0202 	orr.w	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	2204      	movs	r2, #4
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d012      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	2204      	movs	r2, #4
 80016ae:	409a      	lsls	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	f043 0204 	orr.w	r2, r3, #4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	2210      	movs	r2, #16
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d043      	beq.n	8001758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03c      	beq.n	8001758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e2:	2210      	movs	r2, #16
 80016e4:	409a      	lsls	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d018      	beq.n	800172a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d108      	bne.n	8001718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d024      	beq.n	8001758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
 8001716:	e01f      	b.n	8001758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
 8001728:	e016      	b.n	8001758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d107      	bne.n	8001748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0208 	bic.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	2220      	movs	r2, #32
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 808f 	beq.w	8001888 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8087 	beq.w	8001888 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	2220      	movs	r2, #32
 8001780:	409a      	lsls	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b05      	cmp	r3, #5
 8001790:	d136      	bne.n	8001800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0216 	bic.w	r2, r2, #22
 80017a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d103      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x1da>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0208 	bic.w	r2, r2, #8
 80017d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	223f      	movs	r2, #63	@ 0x3f
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d07e      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
        }
        return;
 80017fe:	e079      	b.n	80018f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01d      	beq.n	800184a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	2b00      	cmp	r3, #0
 8001822:	d031      	beq.n	8001888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
 800182c:	e02c      	b.n	8001888 <HAL_DMA_IRQHandler+0x2a0>
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d023      	beq.n	8001888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
 8001848:	e01e      	b.n	8001888 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10f      	bne.n	8001878 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0210 	bic.w	r2, r2, #16
 8001866:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188c:	2b00      	cmp	r3, #0
 800188e:	d032      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2205      	movs	r2, #5
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d307      	bcc.n	80018d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f2      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x2cc>
 80018ce:	e000      	b.n	80018d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
 80018f2:	e000      	b.n	80018f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018f4:	bf00      	nop
    }
  }
}
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3b10      	subs	r3, #16
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <DMA_CalcBaseAndBitshift+0x64>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001916:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <DMA_CalcBaseAndBitshift+0x68>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d909      	bls.n	800193e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	1d1a      	adds	r2, r3, #4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58
 800193c:	e007      	b.n	800194e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	aaaaaaab 	.word	0xaaaaaaab
 8001964:	08007948 	.word	0x08007948

08001968 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11f      	bne.n	80019c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d856      	bhi.n	8001a36 <DMA_CheckFifoParam+0xce>
 8001988:	a201      	add	r2, pc, #4	@ (adr r2, 8001990 <DMA_CheckFifoParam+0x28>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019b3 	.word	0x080019b3
 8001998:	080019a1 	.word	0x080019a1
 800199c:	08001a37 	.word	0x08001a37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d046      	beq.n	8001a3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b0:	e043      	b.n	8001a3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019ba:	d140      	bne.n	8001a3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c0:	e03d      	b.n	8001a3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ca:	d121      	bne.n	8001a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d837      	bhi.n	8001a42 <DMA_CheckFifoParam+0xda>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <DMA_CheckFifoParam+0x70>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	080019ef 	.word	0x080019ef
 80019e0:	080019e9 	.word	0x080019e9
 80019e4:	08001a01 	.word	0x08001a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      break;
 80019ec:	e030      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d025      	beq.n	8001a46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fe:	e022      	b.n	8001a46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a08:	d11f      	bne.n	8001a4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a0e:	e01c      	b.n	8001a4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d903      	bls.n	8001a1e <DMA_CheckFifoParam+0xb6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d003      	beq.n	8001a24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a1c:	e018      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
      break;
 8001a22:	e015      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00e      	beq.n	8001a4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
      break;
 8001a34:	e00b      	b.n	8001a4e <DMA_CheckFifoParam+0xe6>
      break;
 8001a36:	bf00      	nop
 8001a38:	e00a      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e008      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e006      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e004      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e002      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a4a:	bf00      	nop
 8001a4c:	e000      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e165      	b.n	8001d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8154 	bne.w	8001d42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80ae 	beq.w	8001d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <HAL_GPIO_Init+0x300>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a5c      	ldr	r2, [pc, #368]	@ (8001d60 <HAL_GPIO_Init+0x300>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d60 <HAL_GPIO_Init+0x300>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a58      	ldr	r2, [pc, #352]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4f      	ldr	r2, [pc, #316]	@ (8001d68 <HAL_GPIO_Init+0x308>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x21a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4e      	ldr	r2, [pc, #312]	@ (8001d6c <HAL_GPIO_Init+0x30c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x216>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4d      	ldr	r2, [pc, #308]	@ (8001d70 <HAL_GPIO_Init+0x310>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x212>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4c      	ldr	r2, [pc, #304]	@ (8001d74 <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4b      	ldr	r2, [pc, #300]	@ (8001d78 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x20a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4a      	ldr	r2, [pc, #296]	@ (8001d7c <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x206>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x202>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x21c>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a31      	ldr	r2, [pc, #196]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a26      	ldr	r2, [pc, #152]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae96 	bls.w	8001a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0cc      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b68      	ldr	r3, [pc, #416]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d90c      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b65      	ldr	r3, [pc, #404]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a58      	ldr	r2, [pc, #352]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a52      	ldr	r2, [pc, #328]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d044      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d119      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e067      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4934      	ldr	r1, [pc, #208]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7ff f8e8 	bl	80010e4 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f18:	f7ff f8e4 	bl	80010e4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e04f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 020c 	and.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1eb      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d20c      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f855 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	490a      	ldr	r1, [pc, #40]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	5ccb      	ldrb	r3, [r1, r3]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f848 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	08007930 	.word	0x08007930
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08007940 	.word	0x08007940

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffdc 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08007940 	.word	0x08007940

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b0ae      	sub	sp, #184	@ 0xb8
 800205a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207a:	4bcb      	ldr	r3, [pc, #812]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b0c      	cmp	r3, #12
 8002084:	f200 8206 	bhi.w	8002494 <HAL_RCC_GetSysClockFreq+0x440>
 8002088:	a201      	add	r2, pc, #4	@ (adr r2, 8002090 <HAL_RCC_GetSysClockFreq+0x3c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020c5 	.word	0x080020c5
 8002094:	08002495 	.word	0x08002495
 8002098:	08002495 	.word	0x08002495
 800209c:	08002495 	.word	0x08002495
 80020a0:	080020cd 	.word	0x080020cd
 80020a4:	08002495 	.word	0x08002495
 80020a8:	08002495 	.word	0x08002495
 80020ac:	08002495 	.word	0x08002495
 80020b0:	080020d5 	.word	0x080020d5
 80020b4:	08002495 	.word	0x08002495
 80020b8:	08002495 	.word	0x08002495
 80020bc:	08002495 	.word	0x08002495
 80020c0:	080022c5 	.word	0x080022c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4bb9      	ldr	r3, [pc, #740]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x358>)
 80020c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ca:	e1e7      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4bb8      	ldr	r3, [pc, #736]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020d2:	e1e3      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d4:	4bb4      	ldr	r3, [pc, #720]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e0:	4bb1      	ldr	r3, [pc, #708]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d071      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ec:	4bae      	ldr	r3, [pc, #696]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80020fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800210e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	f04f 0000 	mov.w	r0, #0
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002124:	0150      	lsls	r0, r2, #5
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4621      	mov	r1, r4
 800212c:	1a51      	subs	r1, r2, r1
 800212e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002130:	4629      	mov	r1, r5
 8002132:	eb63 0301 	sbc.w	r3, r3, r1
 8002136:	647b      	str	r3, [r7, #68]	@ 0x44
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002144:	4649      	mov	r1, r9
 8002146:	018b      	lsls	r3, r1, #6
 8002148:	4641      	mov	r1, r8
 800214a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214e:	4641      	mov	r1, r8
 8002150:	018a      	lsls	r2, r1, #6
 8002152:	4641      	mov	r1, r8
 8002154:	1a51      	subs	r1, r2, r1
 8002156:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002158:	4649      	mov	r1, r9
 800215a:	eb63 0301 	sbc.w	r3, r3, r1
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800216c:	4649      	mov	r1, r9
 800216e:	00cb      	lsls	r3, r1, #3
 8002170:	4641      	mov	r1, r8
 8002172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002176:	4641      	mov	r1, r8
 8002178:	00ca      	lsls	r2, r1, #3
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	4603      	mov	r3, r0
 8002180:	4622      	mov	r2, r4
 8002182:	189b      	adds	r3, r3, r2
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
 8002186:	462b      	mov	r3, r5
 8002188:	460a      	mov	r2, r1
 800218a:	eb42 0303 	adc.w	r3, r2, r3
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800219c:	4629      	mov	r1, r5
 800219e:	024b      	lsls	r3, r1, #9
 80021a0:	4621      	mov	r1, r4
 80021a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021a6:	4621      	mov	r1, r4
 80021a8:	024a      	lsls	r2, r1, #9
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80021c0:	f7fe f876 	bl	80002b0 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021ce:	e067      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80021e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021ea:	2300      	movs	r3, #0
 80021ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002204:	0150      	lsls	r0, r2, #5
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4621      	mov	r1, r4
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002210:	4629      	mov	r1, r5
 8002212:	eb63 0301 	sbc.w	r3, r3, r1
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002224:	4649      	mov	r1, r9
 8002226:	018b      	lsls	r3, r1, #6
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222e:	4641      	mov	r1, r8
 8002230:	018a      	lsls	r2, r1, #6
 8002232:	4641      	mov	r1, r8
 8002234:	ebb2 0a01 	subs.w	sl, r2, r1
 8002238:	4649      	mov	r1, r9
 800223a:	eb63 0b01 	sbc.w	fp, r3, r1
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800224a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800224e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002252:	4692      	mov	sl, r2
 8002254:	469b      	mov	fp, r3
 8002256:	4623      	mov	r3, r4
 8002258:	eb1a 0303 	adds.w	r3, sl, r3
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	462b      	mov	r3, r5
 8002260:	eb4b 0303 	adc.w	r3, fp, r3
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002272:	4629      	mov	r1, r5
 8002274:	028b      	lsls	r3, r1, #10
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800227c:	4621      	mov	r1, r4
 800227e:	028a      	lsls	r2, r1, #10
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002288:	2200      	movs	r2, #0
 800228a:	673b      	str	r3, [r7, #112]	@ 0x70
 800228c:	677a      	str	r2, [r7, #116]	@ 0x74
 800228e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002292:	f7fe f80d 	bl	80002b0 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4613      	mov	r3, r2
 800229c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022a0:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80022b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022c2:	e0eb      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d06b      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	2200      	movs	r2, #0
 80022e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f0:	2300      	movs	r3, #0
 80022f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80022f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022f8:	4622      	mov	r2, r4
 80022fa:	462b      	mov	r3, r5
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0159      	lsls	r1, r3, #5
 8002306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230a:	0150      	lsls	r0, r2, #5
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4621      	mov	r1, r4
 8002312:	1a51      	subs	r1, r2, r1
 8002314:	61b9      	str	r1, [r7, #24]
 8002316:	4629      	mov	r1, r5
 8002318:	eb63 0301 	sbc.w	r3, r3, r1
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800232a:	4659      	mov	r1, fp
 800232c:	018b      	lsls	r3, r1, #6
 800232e:	4651      	mov	r1, sl
 8002330:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002334:	4651      	mov	r1, sl
 8002336:	018a      	lsls	r2, r1, #6
 8002338:	4651      	mov	r1, sl
 800233a:	ebb2 0801 	subs.w	r8, r2, r1
 800233e:	4659      	mov	r1, fp
 8002340:	eb63 0901 	sbc.w	r9, r3, r1
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002350:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002354:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002358:	4690      	mov	r8, r2
 800235a:	4699      	mov	r9, r3
 800235c:	4623      	mov	r3, r4
 800235e:	eb18 0303 	adds.w	r3, r8, r3
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	462b      	mov	r3, r5
 8002366:	eb49 0303 	adc.w	r3, r9, r3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002378:	4629      	mov	r1, r5
 800237a:	024b      	lsls	r3, r1, #9
 800237c:	4621      	mov	r1, r4
 800237e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002382:	4621      	mov	r1, r4
 8002384:	024a      	lsls	r2, r1, #9
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800238e:	2200      	movs	r2, #0
 8002390:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002392:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002394:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002398:	f7fd ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023a6:	e065      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x420>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x458>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	4611      	mov	r1, r2
 80023c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80023c6:	2300      	movs	r3, #0
 80023c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80023ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80023ce:	4642      	mov	r2, r8
 80023d0:	464b      	mov	r3, r9
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4641      	mov	r1, r8
 80023e8:	1a51      	subs	r1, r2, r1
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	4649      	mov	r1, r9
 80023ee:	eb63 0301 	sbc.w	r3, r3, r1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002400:	4659      	mov	r1, fp
 8002402:	018b      	lsls	r3, r1, #6
 8002404:	4651      	mov	r1, sl
 8002406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240a:	4651      	mov	r1, sl
 800240c:	018a      	lsls	r2, r1, #6
 800240e:	4651      	mov	r1, sl
 8002410:	1a54      	subs	r4, r2, r1
 8002412:	4659      	mov	r1, fp
 8002414:	eb63 0501 	sbc.w	r5, r3, r1
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	464b      	mov	r3, r9
 8002434:	eb45 0303 	adc.w	r3, r5, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002446:	4629      	mov	r1, r5
 8002448:	028b      	lsls	r3, r1, #10
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002450:	4621      	mov	r1, r4
 8002452:	028a      	lsls	r2, r1, #10
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800245c:	2200      	movs	r2, #0
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002460:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002466:	f7fd ff23 	bl	80002b0 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4613      	mov	r3, r2
 8002470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0f1b      	lsrs	r3, r3, #28
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002492:	e003      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800249a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	37b8      	adds	r7, #184	@ 0xb8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400

080024b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e28d      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8083 	beq.w	80025da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024d4:	4b94      	ldr	r3, [pc, #592]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d019      	beq.n	8002514 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024e0:	4b91      	ldr	r3, [pc, #580]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b84      	ldr	r3, [pc, #528]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x124>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e25a      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x90>
 8002536:	4b7c      	ldr	r3, [pc, #496]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7b      	ldr	r2, [pc, #492]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xcc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xb4>
 800254e:	4b76      	ldr	r3, [pc, #472]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b73      	ldr	r3, [pc, #460]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a72      	ldr	r2, [pc, #456]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xcc>
 8002568:	4b6f      	ldr	r3, [pc, #444]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6e      	ldr	r2, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6c      	ldr	r3, [pc, #432]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6b      	ldr	r2, [pc, #428]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fdac 	bl	80010e4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fda8 	bl	80010e4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e21f      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xdc>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fd98 	bl	80010e4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fd94 	bl	80010e4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e20b      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x104>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06f      	beq.n	80026c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b41      	ldr	r3, [pc, #260]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x186>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1d3      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4937      	ldr	r1, [pc, #220]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e03a      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <HAL_RCC_OscConfig+0x278>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fd41 	bl	80010e4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fd3d 	bl	80010e4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1b4      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4925      	ldr	r1, [pc, #148]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_OscConfig+0x278>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fd20 	bl	80010e4 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fd1c 	bl	80010e4 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e193      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d036      	beq.n	8002740 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fd00 	bl	80010e4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fcfc 	bl	80010e4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e173      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80026fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x234>
 8002706:	e01b      	b.n	8002740 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_RCC_OscConfig+0x27c>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fce9 	bl	80010e4 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	e00e      	b.n	8002734 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fce5 	bl	80010e4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d907      	bls.n	8002734 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e15c      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
 8002730:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b8a      	ldr	r3, [pc, #552]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ea      	bne.n	8002716 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8097 	beq.w	800287c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b83      	ldr	r3, [pc, #524]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	4a7e      	ldr	r2, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	@ 0x40
 800276e:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4b79      	ldr	r3, [pc, #484]	@ (8002964 <HAL_RCC_OscConfig+0x4b0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278a:	4b76      	ldr	r3, [pc, #472]	@ (8002964 <HAL_RCC_OscConfig+0x4b0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x4b0>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe fca5 	bl	80010e4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fca1 	bl	80010e4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e118      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002964 <HAL_RCC_OscConfig+0x4b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31e>
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d0:	e01c      	b.n	800280c <HAL_RCC_OscConfig+0x358>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x340>
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a60      	ldr	r2, [pc, #384]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0x358>
 80027f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a59      	ldr	r2, [pc, #356]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002800:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a56      	ldr	r2, [pc, #344]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fc66 	bl	80010e4 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fc62 	bl	80010e4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0d7      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ee      	beq.n	800281c <HAL_RCC_OscConfig+0x368>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fc50 	bl	80010e4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe fc4c 	bl	80010e4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0c1      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	4b40      	ldr	r3, [pc, #256]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ee      	bne.n	8002848 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	4a3a      	ldr	r2, [pc, #232]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80ad 	beq.w	80029e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002886:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d060      	beq.n	8002954 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d145      	bne.n	8002926 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <HAL_RCC_OscConfig+0x4b4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fc20 	bl	80010e4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fc1c 	bl	80010e4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e093      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	491b      	ldr	r1, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x4b4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fbf1 	bl	80010e4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fbed 	bl	80010e4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e064      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x452>
 8002924:	e05c      	b.n	80029e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCC_OscConfig+0x4b4>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fbda 	bl	80010e4 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fbd6 	bl	80010e4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04d      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x480>
 8002952:	e045      	b.n	80029e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e040      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800296c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <HAL_RCC_OscConfig+0x538>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d030      	beq.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d129      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d122      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d119      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10f      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e042      	b.n	8002a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f924 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2224      	movs	r2, #36	@ 0x24
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fd69 	bl	800350c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d175      	bne.n	8002b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Transmit+0x2c>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e06e      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	@ 0x21
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fb09 	bl	80010e4 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b04:	e02e      	b.n	8002b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb05 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03a      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cb      	bne.n	8002b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fad1 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e006      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0ba      	sub	sp, #232	@ 0xe8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_UART_IRQHandler+0x66>
 8002bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fbc2 	bl	8003390 <UART_Receive_IT>
      return;
 8002c0c:	e25b      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80de 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x22c>
 8002c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80d1 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_UART_IRQHandler+0xae>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_UART_IRQHandler+0xd2>
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_UART_IRQHandler+0xf6>
 8002c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d011      	beq.n	8002cce <HAL_UART_IRQHandler+0x126>
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f043 0208 	orr.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 81f2 	beq.w	80030bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x14e>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb4d 	bl	8003390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_UART_IRQHandler+0x17a>
 8002d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04f      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa55 	bl	80031d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d141      	bne.n	8002dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1d9      	bne.n	8002d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f88 <HAL_UART_IRQHandler+0x3e0>)
 8002d90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fc04 	bl	80015a4 <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dac:	4610      	mov	r0, r2
 8002dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e00e      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f99e 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00a      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f99a 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e006      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f996 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002dce:	e175      	b.n	80030bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	bf00      	nop
    return;
 8002dd2:	e173      	b.n	80030bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 814f 	bne.w	800307c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8148 	beq.w	800307c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8141 	beq.w	800307c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	f040 80b6 	bne.w	8002f8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8145 	beq.w	80030c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	f080 813e 	bcs.w	80030c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e56:	f000 8088 	beq.w	8002f6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1d9      	bne.n	8002e5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e1      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e3      	bne.n	8002f28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe faad 	bl	80014c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8c1 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f86:	e09b      	b.n	80030c0 <HAL_UART_IRQHandler+0x518>
 8002f88:	08003299 	.word	0x08003299
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 808e 	beq.w	80030c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8089 	beq.w	80030c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e3      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800300e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e3      	bne.n	8002fea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0310 	bic.w	r3, r3, #16
 8003046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	617b      	str	r3, [r7, #20]
   return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e3      	bne.n	8003030 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800306e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f847 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800307a:	e023      	b.n	80030c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <HAL_UART_IRQHandler+0x4f4>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f913 	bl	80032c0 <UART_Transmit_IT>
    return;
 800309a:	e014      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <HAL_UART_IRQHandler+0x51e>
 80030a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f953 	bl	8003360 <UART_EndTransmit_IT>
    return;
 80030ba:	e004      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030c4:	bf00      	nop
  }
}
 80030c6:	37e8      	adds	r7, #232	@ 0xe8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	e03b      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003138:	d037      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fd ffd3 	bl	80010e4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <UART_WaitOnFlagUntilTimeout+0x30>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e03a      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b80      	cmp	r3, #128	@ 0x80
 8003166:	d020      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d01d      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d116      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f81d 	bl	80031d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2208      	movs	r2, #8
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d0b4      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b095      	sub	sp, #84	@ 0x54
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80031fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003200:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	61fb      	str	r3, [r7, #28]
   return(result);
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800322e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e5      	bne.n	800320e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	2b01      	cmp	r3, #1
 8003248:	d119      	bne.n	800327e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	60bb      	str	r3, [r7, #8]
   return(result);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800326a:	61ba      	str	r2, [r7, #24]
 800326c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800328c:	bf00      	nop
 800328e:	3754      	adds	r7, #84	@ 0x54
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff1e 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b21      	cmp	r3, #33	@ 0x21
 80032d2:	d13e      	bne.n	8003352 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d114      	bne.n	8003308 <UART_Transmit_IT+0x48>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d110      	bne.n	8003308 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]
 8003306:	e008      	b.n	800331a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6211      	str	r1, [r2, #32]
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4619      	mov	r1, r3
 8003328:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800333c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003376:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fea3 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	@ 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b22      	cmp	r3, #34	@ 0x22
 80033a2:	f040 80ae 	bne.w	8003502 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	d117      	bne.n	80033e0 <UART_Receive_IT+0x50>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	1c9a      	adds	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033de:	e026      	b.n	800342e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d007      	beq.n	8003404 <UART_Receive_IT+0x74>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <UART_Receive_IT+0x82>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e008      	b.n	8003424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800341e:	b2da      	uxtb	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15d      	bne.n	80034fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0220 	bic.w	r2, r2, #32
 8003450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	d135      	bne.n	80034f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f023 0310 	bic.w	r3, r3, #16
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	623a      	str	r2, [r7, #32]
 80034b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d10a      	bne.n	80034e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe0b 	bl	8003108 <HAL_UARTEx_RxEventCallback>
 80034f2:	e002      	b.n	80034fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fdf3 	bl	80030e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e002      	b.n	8003504 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3730      	adds	r7, #48	@ 0x30
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b0c0      	sub	sp, #256	@ 0x100
 8003512:	af00      	add	r7, sp, #0
 8003514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	ea40 0301 	orr.w	r3, r0, r1
 8003534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	431a      	orrs	r2, r3
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003564:	f021 010c 	bic.w	r1, r1, #12
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003572:	430b      	orrs	r3, r1
 8003574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	6999      	ldr	r1, [r3, #24]
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	ea40 0301 	orr.w	r3, r0, r1
 8003592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b8f      	ldr	r3, [pc, #572]	@ (80037d8 <UART_SetConfig+0x2cc>)
 800359c:	429a      	cmp	r2, r3
 800359e:	d005      	beq.n	80035ac <UART_SetConfig+0xa0>
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8d      	ldr	r3, [pc, #564]	@ (80037dc <UART_SetConfig+0x2d0>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d104      	bne.n	80035b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fd3e 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80035b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035b4:	e003      	b.n	80035be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b6:	f7fe fd25 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 80035ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c8:	f040 810c 	bne.w	80037e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035e6:	415b      	adcs	r3, r3
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ee:	4621      	mov	r1, r4
 80035f0:	eb12 0801 	adds.w	r8, r2, r1
 80035f4:	4629      	mov	r1, r5
 80035f6:	eb43 0901 	adc.w	r9, r3, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	4623      	mov	r3, r4
 8003614:	eb18 0303 	adds.w	r3, r8, r3
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800361c:	462b      	mov	r3, r5
 800361e:	eb49 0303 	adc.w	r3, r9, r3
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800363a:	460b      	mov	r3, r1
 800363c:	18db      	adds	r3, r3, r3
 800363e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003640:	4613      	mov	r3, r2
 8003642:	eb42 0303 	adc.w	r3, r2, r3
 8003646:	657b      	str	r3, [r7, #84]	@ 0x54
 8003648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800364c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003650:	f7fc fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <UART_SetConfig+0x2d4>)
 800365a:	fba3 2302 	umull	r2, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	011c      	lsls	r4, r3, #4
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800366c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800367c:	415b      	adcs	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003684:	4641      	mov	r1, r8
 8003686:	eb12 0a01 	adds.w	sl, r2, r1
 800368a:	4649      	mov	r1, r9
 800368c:	eb43 0b01 	adc.w	fp, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800369c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a4:	4692      	mov	sl, r2
 80036a6:	469b      	mov	fp, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	eb1a 0303 	adds.w	r3, sl, r3
 80036ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036b2:	464b      	mov	r3, r9
 80036b4:	eb4b 0303 	adc.w	r3, fp, r3
 80036b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036d0:	460b      	mov	r3, r1
 80036d2:	18db      	adds	r3, r3, r3
 80036d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d6:	4613      	mov	r3, r2
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036e6:	f7fc fde3 	bl	80002b0 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80036f2:	fba3 2301 	umull	r2, r3, r3, r1
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2264      	movs	r2, #100	@ 0x64
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003706:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <UART_SetConfig+0x2d4>)
 8003708:	fba3 2302 	umull	r2, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003714:	441c      	add	r4, r3
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003730:	415b      	adcs	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003738:	4641      	mov	r1, r8
 800373a:	1851      	adds	r1, r2, r1
 800373c:	6339      	str	r1, [r7, #48]	@ 0x30
 800373e:	4649      	mov	r1, r9
 8003740:	414b      	adcs	r3, r1
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003750:	4659      	mov	r1, fp
 8003752:	00cb      	lsls	r3, r1, #3
 8003754:	4651      	mov	r1, sl
 8003756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375a:	4651      	mov	r1, sl
 800375c:	00ca      	lsls	r2, r1, #3
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	4603      	mov	r3, r0
 8003764:	4642      	mov	r2, r8
 8003766:	189b      	adds	r3, r3, r2
 8003768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800376c:	464b      	mov	r3, r9
 800376e:	460a      	mov	r2, r1
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800378c:	460b      	mov	r3, r1
 800378e:	18db      	adds	r3, r3, r3
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003792:	4613      	mov	r3, r2
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800379e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037a2:	f7fc fd85 	bl	80002b0 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	@ 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3332      	adds	r3, #50	@ 0x32
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 0207 	and.w	r2, r3, #7
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4422      	add	r2, r4
 80037d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037d4:	e106      	b.n	80039e4 <UART_SetConfig+0x4d8>
 80037d6:	bf00      	nop
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40011400 	.word	0x40011400
 80037e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037f6:	4642      	mov	r2, r8
 80037f8:	464b      	mov	r3, r9
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	6239      	str	r1, [r7, #32]
 80037fe:	415b      	adcs	r3, r3
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
 8003802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003806:	4641      	mov	r1, r8
 8003808:	1854      	adds	r4, r2, r1
 800380a:	4649      	mov	r1, r9
 800380c:	eb43 0501 	adc.w	r5, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800382c:	464b      	mov	r3, r9
 800382e:	eb45 0303 	adc.w	r3, r5, r3
 8003832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003852:	4629      	mov	r1, r5
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385c:	4621      	mov	r1, r4
 800385e:	008a      	lsls	r2, r1, #2
 8003860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003864:	f7fc fd24 	bl	80002b0 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b60      	ldr	r3, [pc, #384]	@ (80039f0 <UART_SetConfig+0x4e4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	61b9      	str	r1, [r7, #24]
 8003890:	415b      	adcs	r3, r3
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	4641      	mov	r1, r8
 800389a:	1851      	adds	r1, r2, r1
 800389c:	6139      	str	r1, [r7, #16]
 800389e:	4649      	mov	r1, r9
 80038a0:	414b      	adcs	r3, r1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b0:	4659      	mov	r1, fp
 80038b2:	00cb      	lsls	r3, r1, #3
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ba:	4651      	mov	r1, sl
 80038bc:	00ca      	lsls	r2, r1, #3
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	4642      	mov	r2, r8
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038cc:	464b      	mov	r3, r9
 80038ce:	460a      	mov	r2, r1
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038f0:	4649      	mov	r1, r9
 80038f2:	008b      	lsls	r3, r1, #2
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fa:	4641      	mov	r1, r8
 80038fc:	008a      	lsls	r2, r1, #2
 80038fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003902:	f7fc fcd5 	bl	80002b0 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b38      	ldr	r3, [pc, #224]	@ (80039f0 <UART_SetConfig+0x4e4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	@ 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	@ 0x32
 8003920:	4a33      	ldr	r2, [pc, #204]	@ (80039f0 <UART_SetConfig+0x4e4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392c:	441c      	add	r4, r3
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	673b      	str	r3, [r7, #112]	@ 0x70
 8003936:	677a      	str	r2, [r7, #116]	@ 0x74
 8003938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	415b      	adcs	r3, r3
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800397e:	464b      	mov	r3, r9
 8003980:	460a      	mov	r2, r1
 8003982:	eb42 0303 	adc.w	r3, r2, r3
 8003986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	663b      	str	r3, [r7, #96]	@ 0x60
 8003992:	667a      	str	r2, [r7, #100]	@ 0x64
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039a0:	4649      	mov	r1, r9
 80039a2:	008b      	lsls	r3, r1, #2
 80039a4:	4641      	mov	r1, r8
 80039a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039aa:	4641      	mov	r1, r8
 80039ac:	008a      	lsls	r2, r1, #2
 80039ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039b2:	f7fc fc7d 	bl	80002b0 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <UART_SetConfig+0x4e4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	@ 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3332      	adds	r3, #50	@ 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	@ (80039f0 <UART_SetConfig+0x4e4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039ea:	46bd      	mov	sp, r7
 80039ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <__NVIC_SetPriority>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	@ (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	f06f 0004 	mvn.w	r0, #4
 8003a52:	f7ff ffcf 	bl	80039f4 <__NVIC_SetPriority>
#endif
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	603b      	str	r3, [r7, #0]
  return(result);
 8003a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a6e:	f06f 0305 	mvn.w	r3, #5
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e00c      	b.n	8003a90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a76:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <osKernelInitialize+0x44>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <osKernelInitialize+0x44>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	e002      	b.n	8003a90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200001bc 	.word	0x200001bc

08003aa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aaa:	f3ef 8305 	mrs	r3, IPSR
 8003aae:	603b      	str	r3, [r7, #0]
  return(result);
 8003ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ab6:	f06f 0305 	mvn.w	r3, #5
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e010      	b.n	8003ae0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <osKernelStart+0x48>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d109      	bne.n	8003ada <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ac6:	f7ff ffbf 	bl	8003a48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <osKernelStart+0x48>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ad0:	f001 f982 	bl	8004dd8 <vTaskStartScheduler>
      stat = osOK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	e002      	b.n	8003ae0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200001bc 	.word	0x200001bc

08003af0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	@ 0x38
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b00:	f3ef 8305 	mrs	r3, IPSR
 8003b04:	617b      	str	r3, [r7, #20]
  return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d17e      	bne.n	8003c0a <osThreadNew+0x11a>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07b      	beq.n	8003c0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b16:	2318      	movs	r3, #24
 8003b18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d045      	beq.n	8003bb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <osThreadNew+0x48>
        name = attr->name;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <osThreadNew+0x6e>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b38      	cmp	r3, #56	@ 0x38
 8003b50:	d805      	bhi.n	8003b5e <osThreadNew+0x6e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <osThreadNew+0x72>
        return (NULL);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e054      	b.n	8003c0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <osThreadNew+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003b80:	d90a      	bls.n	8003b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <osThreadNew+0xa8>
        mem = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e010      	b.n	8003bba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10c      	bne.n	8003bba <osThreadNew+0xca>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <osThreadNew+0xca>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <osThreadNew+0xca>
          mem = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e001      	b.n	8003bba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d110      	bne.n	8003be2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc8:	9202      	str	r2, [sp, #8]
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6a3a      	ldr	r2, [r7, #32]
 8003bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fe46 	bl	8004868 <xTaskCreateStatic>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e013      	b.n	8003c0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d110      	bne.n	8003c0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	f107 0310 	add.w	r3, r7, #16
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fe94 	bl	8004928 <xTaskCreate>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <osThreadNew+0x11a>
            hTask = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c0a:	693b      	ldr	r3, [r7, #16]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3728      	adds	r7, #40	@ 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c20:	f3ef 8305 	mrs	r3, IPSR
 8003c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8003c2c:	f06f 0305 	mvn.w	r3, #5
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e017      	b.n	8003c64 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8003c3a:	f06f 0303 	mvn.w	r3, #3
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e010      	b.n	8003c64 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003c42:	6938      	ldr	r0, [r7, #16]
 8003c44:	f001 f860 	bl	8004d08 <eTaskGetState>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d005      	beq.n	8003c5e <osThreadTerminate+0x4a>
      stat = osOK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8003c56:	6938      	ldr	r0, [r7, #16]
 8003c58:	f000 ffac 	bl	8004bb4 <vTaskDelete>
 8003c5c:	e002      	b.n	8003c64 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8003c5e:	f06f 0302 	mvn.w	r3, #2
 8003c62:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8003c64:	697b      	ldr	r3, [r7, #20]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c76:	f3ef 8305 	mrs	r3, IPSR
 8003c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <osDelay+0x1c>
    stat = osErrorISR;
 8003c82:	f06f 0305 	mvn.w	r3, #5
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e007      	b.n	8003c9a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f001 f801 	bl	8004c9c <vTaskDelay>
    }
  }

  return (stat);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4a06      	ldr	r2, [pc, #24]	@ (8003cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8003cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200001c0 	.word	0x200001c0
 8003cd4:	2000021c 	.word	0x2000021c

08003cd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ce8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <vApplicationGetTimerTaskMemory+0x30>)
 8003cee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	2000041c 	.word	0x2000041c
 8003d08:	20000478 	.word	0x20000478

08003d0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 0208 	add.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 0208 	add.w	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f103 0208 	add.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dc4:	d103      	bne.n	8003dce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e00c      	b.n	8003de8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e002      	b.n	8003ddc <vListInsert+0x2e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d2f6      	bcs.n	8003dd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6852      	ldr	r2, [r2, #4]
 8003e40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d103      	bne.n	8003e54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ea0:	f002 f952 	bl	8006148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	68f9      	ldr	r1, [r7, #12]
 8003ed4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	441a      	add	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	@ 0xff
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	22ff      	movs	r2, #255	@ 0xff
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d114      	bne.n	8003f20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01a      	beq.n	8003f34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3310      	adds	r3, #16
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 f9f6 	bl	80052f4 <xTaskRemoveFromEventList>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d012      	beq.n	8003f34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <xQueueGenericReset+0xd0>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	e009      	b.n	8003f34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3310      	adds	r3, #16
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fef1 	bl	8003d0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3324      	adds	r3, #36	@ 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff feec 	bl	8003d0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f34:	f002 f93a 	bl	80061ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f38:	2301      	movs	r3, #1
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	@ 0x38
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	e7fd      	b.n	8003f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <xQueueGenericCreateStatic+0x56>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <xQueueGenericCreateStatic+0x5a>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericCreateStatic+0x5c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	623b      	str	r3, [r7, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <xQueueGenericCreateStatic+0x84>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <xQueueGenericCreateStatic+0x88>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <xQueueGenericCreateStatic+0x8a>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	61fb      	str	r3, [r7, #28]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fee:	2350      	movs	r3, #80	@ 0x50
 8003ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b50      	cmp	r3, #80	@ 0x50
 8003ff6:	d00b      	beq.n	8004010 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61bb      	str	r3, [r7, #24]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004010:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004024:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f805 	bl	8004042 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3730      	adds	r7, #48	@ 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e002      	b.n	8004064 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004070:	2101      	movs	r1, #1
 8004072:	69b8      	ldr	r0, [r7, #24]
 8004074:	f7ff fefe 	bl	8003e74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	@ 0x38
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004096:	2300      	movs	r3, #0
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <xQueueGenericSend+0x34>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x42>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <xQueueGenericSend+0x46>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericSend+0x48>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <xQueueGenericSend+0x64>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSend+0x72>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <xQueueGenericSend+0x76>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueGenericSend+0x78>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueGenericSend+0x94>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800411c:	f001 faaa 	bl	8005674 <xTaskGetSchedulerState>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <xQueueGenericSend+0xa4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <xQueueGenericSend+0xa8>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <xQueueGenericSend+0xaa>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <xQueueGenericSend+0xc6>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	61fb      	str	r3, [r7, #28]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800414e:	f001 fffb 	bl	8006148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <xQueueGenericSend+0xdc>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d129      	bne.n	80041b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800416a:	f000 fa0f 	bl	800458c <prvCopyDataToQueue>
 800416e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	3324      	adds	r3, #36	@ 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f8b9 	bl	80052f4 <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004188:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <xQueueGenericSend+0x200>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e00a      	b.n	80041b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <xQueueGenericSend+0x200>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041b0:	f001 fffc 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e063      	b.n	8004280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041be:	f001 fff5 	bl	80061ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e05c      	b.n	8004280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 f8f3 	bl	80053bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041da:	f001 ffe7 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041de:	f000 fe63 	bl	8004ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e2:	f001 ffb1 	bl	8006148 <vPortEnterCritical>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f2:	d103      	bne.n	80041fc <xQueueGenericSend+0x174>
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004202:	b25b      	sxtb	r3, r3
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004208:	d103      	bne.n	8004212 <xQueueGenericSend+0x18a>
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004212:	f001 ffcb 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004216:	1d3a      	adds	r2, r7, #4
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f8e2 	bl	80053e8 <xTaskCheckForTimeOut>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d124      	bne.n	8004274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800422a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800422c:	f000 faa6 	bl	800477c <prvIsQueueFull>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	3310      	adds	r3, #16
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f001 f806 	bl	8005250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004246:	f000 fa31 	bl	80046ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800424a:	f000 fe3b 	bl	8004ec4 <xTaskResumeAll>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af7c 	bne.w	800414e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <xQueueGenericSend+0x200>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	e772      	b.n	800414e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800426a:	f000 fa1f 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800426e:	f000 fe29 	bl	8004ec4 <xTaskResumeAll>
 8004272:	e76c      	b.n	800414e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004276:	f000 fa19 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800427a:	f000 fe23 	bl	8004ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800427e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004280:	4618      	mov	r0, r3
 8004282:	3738      	adds	r7, #56	@ 0x38
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b090      	sub	sp, #64	@ 0x40
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSendFromISR+0x3e>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSendFromISR+0x42>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSendFromISR+0x44>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d103      	bne.n	80042fa <xQueueGenericSendFromISR+0x6e>
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSendFromISR+0x72>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSendFromISR+0x74>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800431c:	f001 fff4 	bl	8006308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004320:	f3ef 8211 	mrs	r2, BASEPRI
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fa      	str	r2, [r7, #28]
 8004336:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004338:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <xQueueGenericSendFromISR+0xc2>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d12f      	bne.n	80043ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004364:	f000 f912 	bl	800458c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004368:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004370:	d112      	bne.n	8004398 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437c:	3324      	adds	r3, #36	@ 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ffb8 	bl	80052f4 <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e007      	b.n	80043a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	b25a      	sxtb	r2, r3
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80043a8:	2301      	movs	r3, #1
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80043ac:	e001      	b.n	80043b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3740      	adds	r7, #64	@ 0x40
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <xQueueReceive+0x32>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	623b      	str	r3, [r7, #32]
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <xQueueReceive+0x40>
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <xQueueReceive+0x44>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <xQueueReceive+0x46>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <xQueueReceive+0x62>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	61fb      	str	r3, [r7, #28]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800442a:	f001 f923 	bl	8005674 <xTaskGetSchedulerState>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <xQueueReceive+0x72>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <xQueueReceive+0x76>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueReceive+0x78>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <xQueueReceive+0x94>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61bb      	str	r3, [r7, #24]
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800445c:	f001 fe74 	bl	8006148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004470:	f000 f8f6 	bl	8004660 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	3310      	adds	r3, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f000 ff33 	bl	80052f4 <xTaskRemoveFromEventList>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004494:	4b3c      	ldr	r3, [pc, #240]	@ (8004588 <xQueueReceive+0x1c0>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044a4:	f001 fe82 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e069      	b.n	8004580 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b2:	f001 fe7b 	bl	80061ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e062      	b.n	8004580 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ff79 	bl	80053bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044ce:	f001 fe6d 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d2:	f000 fce9 	bl	8004ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d6:	f001 fe37 	bl	8006148 <vPortEnterCritical>
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e6:	d103      	bne.n	80044f0 <xQueueReceive+0x128>
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fc:	d103      	bne.n	8004506 <xQueueReceive+0x13e>
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004506:	f001 fe51 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff68 	bl	80053e8 <xTaskCheckForTimeOut>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d123      	bne.n	8004566 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800451e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004520:	f000 f916 	bl	8004750 <prvIsQueueEmpty>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	3324      	adds	r3, #36	@ 0x24
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fe8c 	bl	8005250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800453a:	f000 f8b7 	bl	80046ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800453e:	f000 fcc1 	bl	8004ec4 <xTaskResumeAll>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d189      	bne.n	800445c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <xQueueReceive+0x1c0>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	e780      	b.n	800445c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800455a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800455c:	f000 f8a6 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004560:	f000 fcb0 	bl	8004ec4 <xTaskResumeAll>
 8004564:	e77a      	b.n	800445c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004568:	f000 f8a0 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456c:	f000 fcaa 	bl	8004ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004572:	f000 f8ed 	bl	8004750 <prvIsQueueEmpty>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f43f af6f 	beq.w	800445c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800457e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004580:	4618      	mov	r0, r3
 8004582:	3730      	adds	r7, #48	@ 0x30
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d14d      	bne.n	800464e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 f87a 	bl	80056b0 <xTaskPriorityDisinherit>
 80045bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e043      	b.n	800464e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d119      	bne.n	8004600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6858      	ldr	r0, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	461a      	mov	r2, r3
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	f002 fb4b 	bl	8006c72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d32b      	bcc.n	800464e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e026      	b.n	800464e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68d8      	ldr	r0, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	f002 fb31 	bl	8006c72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	425b      	negs	r3, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d207      	bcs.n	800463c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	425b      	negs	r3, r3
 8004636:	441a      	add	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d105      	bne.n	800464e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3b01      	subs	r3, #1
 800464c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004656:	697b      	ldr	r3, [r7, #20]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d303      	bcc.n	8004694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68d9      	ldr	r1, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	461a      	mov	r2, r3
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f002 fae7 	bl	8006c72 <memcpy>
	}
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046b4:	f001 fd48 	bl	8006148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046c0:	e011      	b.n	80046e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3324      	adds	r3, #36	@ 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fe10 	bl	80052f4 <xTaskRemoveFromEventList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046da:	f000 fee9 	bl	80054b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dce9      	bgt.n	80046c2 <prvUnlockQueue+0x16>
 80046ee:	e000      	b.n	80046f2 <prvUnlockQueue+0x46>
					break;
 80046f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	22ff      	movs	r2, #255	@ 0xff
 80046f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046fa:	f001 fd57 	bl	80061ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046fe:	f001 fd23 	bl	8006148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800470a:	e011      	b.n	8004730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3310      	adds	r3, #16
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fdeb 	bl	80052f4 <xTaskRemoveFromEventList>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004724:	f000 fec4 	bl	80054b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	3b01      	subs	r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004734:	2b00      	cmp	r3, #0
 8004736:	dce9      	bgt.n	800470c <prvUnlockQueue+0x60>
 8004738:	e000      	b.n	800473c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800473a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	22ff      	movs	r2, #255	@ 0xff
 8004740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004744:	f001 fd32 	bl	80061ac <vPortExitCritical>
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004758:	f001 fcf6 	bl	8006148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e001      	b.n	800476e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f001 fd1d 	bl	80061ac <vPortExitCritical>

	return xReturn;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004784:	f001 fce0 	bl	8006148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004790:	429a      	cmp	r2, r3
 8004792:	d102      	bne.n	800479a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e001      	b.n	800479e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800479e:	f001 fd05 	bl	80061ac <vPortExitCritical>

	return xReturn;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e014      	b.n	80047e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047bc:	4a0f      	ldr	r2, [pc, #60]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047c8:	490c      	ldr	r1, [pc, #48]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047de:	e006      	b.n	80047ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d9e7      	bls.n	80047bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000878 	.word	0x20000878

08004800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004810:	f001 fc9a 	bl	8006148 <vPortEnterCritical>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800481a:	b25b      	sxtb	r3, r3
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004820:	d103      	bne.n	800482a <vQueueWaitForMessageRestricted+0x2a>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004830:	b25b      	sxtb	r3, r3
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004836:	d103      	bne.n	8004840 <vQueueWaitForMessageRestricted+0x40>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004840:	f001 fcb4 	bl	80061ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3324      	adds	r3, #36	@ 0x24
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd21 	bl	800529c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f7ff ff26 	bl	80046ac <prvUnlockQueue>
	}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	@ 0x38
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <xTaskCreateStatic+0x2c>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	623b      	str	r3, [r7, #32]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fb      	str	r3, [r7, #28]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048b2:	235c      	movs	r3, #92	@ 0x5c
 80048b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80048ba:	d00b      	beq.n	80048d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	61bb      	str	r3, [r7, #24]
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01e      	beq.n	800491a <xTaskCreateStatic+0xb2>
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048f4:	2300      	movs	r3, #0
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f850 	bl	80049b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004914:	f000 f8de 	bl	8004ad4 <prvAddNewTaskToReadyList>
 8004918:	e001      	b.n	800491e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800491e:	697b      	ldr	r3, [r7, #20]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	3728      	adds	r7, #40	@ 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	@ 0x30
 800492c:	af04      	add	r7, sp, #16
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fd25 	bl	800638c <pvPortMalloc>
 8004942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800494a:	205c      	movs	r0, #92	@ 0x5c
 800494c:	f001 fd1e 	bl	800638c <pvPortMalloc>
 8004950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
 800495e:	e005      	b.n	800496c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f001 fde1 	bl	8006528 <vPortFree>
 8004966:	e001      	b.n	800496c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	2300      	movs	r3, #0
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	9302      	str	r3, [sp, #8]
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f80e 	bl	80049b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004996:	69f8      	ldr	r0, [r7, #28]
 8004998:	f000 f89c 	bl	8004ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800499c:	2301      	movs	r3, #1
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	e002      	b.n	80049a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049a8:	69bb      	ldr	r3, [r7, #24]
	}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	21a5      	movs	r1, #165	@ 0xa5
 80049cc:	f002 f8d6 	bl	8006b7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049da:	3b01      	subs	r3, #1
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	617b      	str	r3, [r7, #20]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01f      	beq.n	8004a52 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e012      	b.n	8004a3e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	7819      	ldrb	r1, [r3, #0]
 8004a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	3334      	adds	r3, #52	@ 0x34
 8004a28:	460a      	mov	r2, r1
 8004a2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	d9e9      	bls.n	8004a18 <prvInitialiseNewTask+0x66>
 8004a44:	e000      	b.n	8004a48 <prvInitialiseNewTask+0x96>
			{
				break;
 8004a46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a50:	e003      	b.n	8004a5a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	2b37      	cmp	r3, #55	@ 0x37
 8004a5e:	d901      	bls.n	8004a64 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a60:	2337      	movs	r3, #55	@ 0x37
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff f966 	bl	8003d4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	3318      	adds	r3, #24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff f961 	bl	8003d4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	69b8      	ldr	r0, [r7, #24]
 8004ab4:	f001 fa1a 	bl	8005eec <pxPortInitialiseStack>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aca:	bf00      	nop
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004adc:	f001 fb34 	bl	8006148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b98 <prvAddNewTaskToReadyList+0xc4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <prvAddNewTaskToReadyList+0xc4>)
 8004ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <prvAddNewTaskToReadyList+0xc8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004af2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b9c <prvAddNewTaskToReadyList+0xc8>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004af8:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <prvAddNewTaskToReadyList+0xc4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d110      	bne.n	8004b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b00:	f000 fcfa 	bl	80054f8 <prvInitialiseTaskLists>
 8004b04:	e00d      	b.n	8004b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b06:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <prvAddNewTaskToReadyList+0xcc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b0e:	4b23      	ldr	r3, [pc, #140]	@ (8004b9c <prvAddNewTaskToReadyList+0xc8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d802      	bhi.n	8004b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <prvAddNewTaskToReadyList+0xc8>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b22:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <prvAddNewTaskToReadyList+0xd0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <prvAddNewTaskToReadyList+0xd0>)
 8004b2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <prvAddNewTaskToReadyList+0xd0>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <prvAddNewTaskToReadyList+0xd4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d903      	bls.n	8004b48 <prvAddNewTaskToReadyList+0x74>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	4a18      	ldr	r2, [pc, #96]	@ (8004ba8 <prvAddNewTaskToReadyList+0xd4>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4a15      	ldr	r2, [pc, #84]	@ (8004bac <prvAddNewTaskToReadyList+0xd8>)
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7ff f901 	bl	8003d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b64:	f001 fb22 	bl	80061ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <prvAddNewTaskToReadyList+0xcc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <prvAddNewTaskToReadyList+0xc8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d207      	bcs.n	8004b8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <prvAddNewTaskToReadyList+0xdc>)
 8004b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000d8c 	.word	0x20000d8c
 8004b9c:	200008b8 	.word	0x200008b8
 8004ba0:	20000d98 	.word	0x20000d98
 8004ba4:	20000da8 	.word	0x20000da8
 8004ba8:	20000d94 	.word	0x20000d94
 8004bac:	200008bc 	.word	0x200008bc
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004bbc:	f001 fac4 	bl	8006148 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <vTaskDelete+0x18>
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <vTaskDelete+0xc8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	e000      	b.n	8004bce <vTaskDelete+0x1a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f923 	bl	8003e20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3318      	adds	r3, #24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff f91a 	bl	8003e20 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <vTaskDelete+0xcc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a23      	ldr	r2, [pc, #140]	@ (8004c80 <vTaskDelete+0xcc>)
 8004bf4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004bf6:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <vTaskDelete+0xc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d10b      	bne.n	8004c18 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	481f      	ldr	r0, [pc, #124]	@ (8004c84 <vTaskDelete+0xd0>)
 8004c08:	f7ff f8ad 	bl	8003d66 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <vTaskDelete+0xd4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <vTaskDelete+0xd4>)
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e009      	b.n	8004c2c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004c18:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <vTaskDelete+0xd8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <vTaskDelete+0xd8>)
 8004c20:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fcd6 	bl	80055d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004c28:	f000 fd04 	bl	8005634 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004c2c:	f001 fabe 	bl	80061ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004c30:	4b17      	ldr	r3, [pc, #92]	@ (8004c90 <vTaskDelete+0xdc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01c      	beq.n	8004c72 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <vTaskDelete+0xc8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d117      	bne.n	8004c72 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004c42:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <vTaskDelete+0xe0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <vTaskDelete+0xae>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	60bb      	str	r3, [r7, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <vTaskDelete+0xe4>)
 8004c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200008b8 	.word	0x200008b8
 8004c80:	20000da8 	.word	0x20000da8
 8004c84:	20000d60 	.word	0x20000d60
 8004c88:	20000d74 	.word	0x20000d74
 8004c8c:	20000d8c 	.word	0x20000d8c
 8004c90:	20000d98 	.word	0x20000d98
 8004c94:	20000db4 	.word	0x20000db4
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cae:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <vTaskDelay+0x64>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <vTaskDelay+0x32>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60bb      	str	r3, [r7, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cce:	f000 f8eb 	bl	8004ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fd5b 	bl	8005790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cda:	f000 f8f3 	bl	8004ec4 <xTaskResumeAll>
 8004cde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <vTaskDelay+0x68>)
 8004ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000db4 	.word	0x20000db4
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <eTaskGetState+0x2a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <eTaskGetState+0xbc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d102      	bne.n	8004d42 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e03a      	b.n	8004db8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004d42:	f001 fa01 	bl	8006148 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <eTaskGetState+0xc0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004d52:	4b1e      	ldr	r3, [pc, #120]	@ (8004dcc <eTaskGetState+0xc4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004d58:	f001 fa28 	bl	80061ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d003      	beq.n	8004d6c <eTaskGetState+0x64>
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d102      	bne.n	8004d72 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e022      	b.n	8004db8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	4a16      	ldr	r2, [pc, #88]	@ (8004dd0 <eTaskGetState+0xc8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d112      	bne.n	8004da0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e011      	b.n	8004db8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004d94:	2303      	movs	r3, #3
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e00e      	b.n	8004db8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e00b      	b.n	8004db8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <eTaskGetState+0xcc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d002      	beq.n	8004dae <eTaskGetState+0xa6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004dae:	2304      	movs	r3, #4
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e001      	b.n	8004db8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004db8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200008b8 	.word	0x200008b8
 8004dc8:	20000d44 	.word	0x20000d44
 8004dcc:	20000d48 	.word	0x20000d48
 8004dd0:	20000d78 	.word	0x20000d78
 8004dd4:	20000d60 	.word	0x20000d60

08004dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004de6:	463a      	mov	r2, r7
 8004de8:	1d39      	adds	r1, r7, #4
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe ff58 	bl	8003ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	9202      	str	r2, [sp, #8]
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	460a      	mov	r2, r1
 8004e06:	4922      	ldr	r1, [pc, #136]	@ (8004e90 <vTaskStartScheduler+0xb8>)
 8004e08:	4822      	ldr	r0, [pc, #136]	@ (8004e94 <vTaskStartScheduler+0xbc>)
 8004e0a:	f7ff fd2d 	bl	8004868 <xTaskCreateStatic>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4a21      	ldr	r2, [pc, #132]	@ (8004e98 <vTaskStartScheduler+0xc0>)
 8004e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e14:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <vTaskStartScheduler+0xc0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e001      	b.n	8004e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e2c:	f000 fd04 	bl	8005838 <xTimerCreateTimerTask>
 8004e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d116      	bne.n	8004e66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	613b      	str	r3, [r7, #16]
}
 8004e4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e4c:	4b13      	ldr	r3, [pc, #76]	@ (8004e9c <vTaskStartScheduler+0xc4>)
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e54:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <vTaskStartScheduler+0xc8>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ea4 <vTaskStartScheduler+0xcc>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e60:	f001 f8ce 	bl	8006000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e64:	e00f      	b.n	8004e86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e6c:	d10b      	bne.n	8004e86 <vTaskStartScheduler+0xae>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	e7fd      	b.n	8004e82 <vTaskStartScheduler+0xaa>
}
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800781c 	.word	0x0800781c
 8004e94:	080054c9 	.word	0x080054c9
 8004e98:	20000db0 	.word	0x20000db0
 8004e9c:	20000dac 	.word	0x20000dac
 8004ea0:	20000d98 	.word	0x20000d98
 8004ea4:	20000d90 	.word	0x20000d90

08004ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eac:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <vTaskSuspendAll+0x18>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	4a03      	ldr	r2, [pc, #12]	@ (8004ec0 <vTaskSuspendAll+0x18>)
 8004eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	20000db4 	.word	0x20000db4

08004ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ed2:	4b42      	ldr	r3, [pc, #264]	@ (8004fdc <xTaskResumeAll+0x118>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ef2:	f001 f929 	bl	8006148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ef6:	4b39      	ldr	r3, [pc, #228]	@ (8004fdc <xTaskResumeAll+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4a37      	ldr	r2, [pc, #220]	@ (8004fdc <xTaskResumeAll+0x118>)
 8004efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <xTaskResumeAll+0x118>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d162      	bne.n	8004fce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f08:	4b35      	ldr	r3, [pc, #212]	@ (8004fe0 <xTaskResumeAll+0x11c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d05e      	beq.n	8004fce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f10:	e02f      	b.n	8004f72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f12:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <xTaskResumeAll+0x120>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe ff7e 	bl	8003e20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe ff79 	bl	8003e20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f32:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <xTaskResumeAll+0x124>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d903      	bls.n	8004f42 <xTaskResumeAll+0x7e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <xTaskResumeAll+0x124>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a27      	ldr	r2, [pc, #156]	@ (8004fec <xTaskResumeAll+0x128>)
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe ff04 	bl	8003d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	4b23      	ldr	r3, [pc, #140]	@ (8004ff0 <xTaskResumeAll+0x12c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ff4 <xTaskResumeAll+0x130>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f72:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe4 <xTaskResumeAll+0x120>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1cb      	bne.n	8004f12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f80:	f000 fb58 	bl	8005634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f84:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff8 <xTaskResumeAll+0x134>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f90:	f000 f846 	bl	8005020 <xTaskIncrementTick>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	@ (8004ff4 <xTaskResumeAll+0x130>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f1      	bne.n	8004f90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004fac:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <xTaskResumeAll+0x134>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <xTaskResumeAll+0x130>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <xTaskResumeAll+0x138>)
 8004fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fce:	f001 f8ed 	bl	80061ac <vPortExitCritical>

	return xAlreadyYielded;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000db4 	.word	0x20000db4
 8004fe0:	20000d8c 	.word	0x20000d8c
 8004fe4:	20000d4c 	.word	0x20000d4c
 8004fe8:	20000d94 	.word	0x20000d94
 8004fec:	200008bc 	.word	0x200008bc
 8004ff0:	200008b8 	.word	0x200008b8
 8004ff4:	20000da0 	.word	0x20000da0
 8004ff8:	20000d9c 	.word	0x20000d9c
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <xTaskGetTickCount+0x1c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800500c:	687b      	ldr	r3, [r7, #4]
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000d90 	.word	0x20000d90

08005020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502a:	4b4f      	ldr	r3, [pc, #316]	@ (8005168 <xTaskIncrementTick+0x148>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 8090 	bne.w	8005154 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005034:	4b4d      	ldr	r3, [pc, #308]	@ (800516c <xTaskIncrementTick+0x14c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800503c:	4a4b      	ldr	r2, [pc, #300]	@ (800516c <xTaskIncrementTick+0x14c>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d121      	bne.n	800508c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005048:	4b49      	ldr	r3, [pc, #292]	@ (8005170 <xTaskIncrementTick+0x150>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <xTaskIncrementTick+0x46>
 800506a:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <xTaskIncrementTick+0x150>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	4b40      	ldr	r3, [pc, #256]	@ (8005174 <xTaskIncrementTick+0x154>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3e      	ldr	r2, [pc, #248]	@ (8005170 <xTaskIncrementTick+0x150>)
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4a3e      	ldr	r2, [pc, #248]	@ (8005174 <xTaskIncrementTick+0x154>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b3e      	ldr	r3, [pc, #248]	@ (8005178 <xTaskIncrementTick+0x158>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a3c      	ldr	r2, [pc, #240]	@ (8005178 <xTaskIncrementTick+0x158>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	f000 fad4 	bl	8005634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800508c:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <xTaskIncrementTick+0x15c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d349      	bcc.n	800512a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005096:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <xTaskIncrementTick+0x150>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a0:	4b36      	ldr	r3, [pc, #216]	@ (800517c <xTaskIncrementTick+0x15c>)
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050a6:	601a      	str	r2, [r3, #0]
					break;
 80050a8:	e03f      	b.n	800512a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b31      	ldr	r3, [pc, #196]	@ (8005170 <xTaskIncrementTick+0x150>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d203      	bcs.n	80050ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050c2:	4a2e      	ldr	r2, [pc, #184]	@ (800517c <xTaskIncrementTick+0x15c>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050c8:	e02f      	b.n	800512a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fea6 	bl	8003e20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3318      	adds	r3, #24
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fe9d 	bl	8003e20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ea:	4b25      	ldr	r3, [pc, #148]	@ (8005180 <xTaskIncrementTick+0x160>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d903      	bls.n	80050fa <xTaskIncrementTick+0xda>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	4a22      	ldr	r2, [pc, #136]	@ (8005180 <xTaskIncrementTick+0x160>)
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <xTaskIncrementTick+0x164>)
 8005108:	441a      	add	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe fe28 	bl	8003d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511a:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <xTaskIncrementTick+0x168>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	429a      	cmp	r2, r3
 8005122:	d3b8      	bcc.n	8005096 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005128:	e7b5      	b.n	8005096 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800512a:	4b17      	ldr	r3, [pc, #92]	@ (8005188 <xTaskIncrementTick+0x168>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	4914      	ldr	r1, [pc, #80]	@ (8005184 <xTaskIncrementTick+0x164>)
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d901      	bls.n	8005146 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005146:	4b11      	ldr	r3, [pc, #68]	@ (800518c <xTaskIncrementTick+0x16c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e004      	b.n	800515e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005154:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <xTaskIncrementTick+0x170>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	4a0d      	ldr	r2, [pc, #52]	@ (8005190 <xTaskIncrementTick+0x170>)
 800515c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000db4 	.word	0x20000db4
 800516c:	20000d90 	.word	0x20000d90
 8005170:	20000d44 	.word	0x20000d44
 8005174:	20000d48 	.word	0x20000d48
 8005178:	20000da4 	.word	0x20000da4
 800517c:	20000dac 	.word	0x20000dac
 8005180:	20000d94 	.word	0x20000d94
 8005184:	200008bc 	.word	0x200008bc
 8005188:	200008b8 	.word	0x200008b8
 800518c:	20000da0 	.word	0x20000da0
 8005190:	20000d9c 	.word	0x20000d9c

08005194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800519a:	4b28      	ldr	r3, [pc, #160]	@ (800523c <vTaskSwitchContext+0xa8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051a2:	4b27      	ldr	r3, [pc, #156]	@ (8005240 <vTaskSwitchContext+0xac>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051a8:	e042      	b.n	8005230 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80051aa:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <vTaskSwitchContext+0xac>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <vTaskSwitchContext+0xb0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e011      	b.n	80051dc <vTaskSwitchContext+0x48>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <vTaskSwitchContext+0x3e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3b01      	subs	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	491a      	ldr	r1, [pc, #104]	@ (8005248 <vTaskSwitchContext+0xb4>)
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0e3      	beq.n	80051b8 <vTaskSwitchContext+0x24>
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <vTaskSwitchContext+0xb4>)
 80051fc:	4413      	add	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3308      	adds	r3, #8
 8005212:	429a      	cmp	r2, r3
 8005214:	d104      	bne.n	8005220 <vTaskSwitchContext+0x8c>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a09      	ldr	r2, [pc, #36]	@ (800524c <vTaskSwitchContext+0xb8>)
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	4a06      	ldr	r2, [pc, #24]	@ (8005244 <vTaskSwitchContext+0xb0>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20000db4 	.word	0x20000db4
 8005240:	20000da0 	.word	0x20000da0
 8005244:	20000d94 	.word	0x20000d94
 8005248:	200008bc 	.word	0x200008bc
 800524c:	200008b8 	.word	0x200008b8

08005250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60fb      	str	r3, [r7, #12]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005278:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <vTaskPlaceOnEventList+0x48>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3318      	adds	r3, #24
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fe fd94 	bl	8003dae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005286:	2101      	movs	r1, #1
 8005288:	6838      	ldr	r0, [r7, #0]
 800528a:	f000 fa81 	bl	8005790 <prvAddCurrentTaskToDelayedList>
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200008b8 	.word	0x200008b8

0800529c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052c6:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3318      	adds	r3, #24
 80052cc:	4619      	mov	r1, r3
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7fe fd49 	bl	8003d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	68b8      	ldr	r0, [r7, #8]
 80052e4:	f000 fa54 	bl	8005790 <prvAddCurrentTaskToDelayedList>
	}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	200008b8 	.word	0x200008b8

080052f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60fb      	str	r3, [r7, #12]
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3318      	adds	r3, #24
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fd7a 	bl	8003e20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <xTaskRemoveFromEventList+0xb0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11d      	bne.n	8005370 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fd71 	bl	8003e20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <xTaskRemoveFromEventList+0xb4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d903      	bls.n	8005352 <xTaskRemoveFromEventList+0x5e>
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	4a16      	ldr	r2, [pc, #88]	@ (80053a8 <xTaskRemoveFromEventList+0xb4>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a13      	ldr	r2, [pc, #76]	@ (80053ac <xTaskRemoveFromEventList+0xb8>)
 8005360:	441a      	add	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7fe fcfc 	bl	8003d66 <vListInsertEnd>
 800536e:	e005      	b.n	800537c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	3318      	adds	r3, #24
 8005374:	4619      	mov	r1, r3
 8005376:	480e      	ldr	r0, [pc, #56]	@ (80053b0 <xTaskRemoveFromEventList+0xbc>)
 8005378:	f7fe fcf5 	bl	8003d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <xTaskRemoveFromEventList+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	429a      	cmp	r2, r3
 8005388:	d905      	bls.n	8005396 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800538e:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <xTaskRemoveFromEventList+0xc4>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e001      	b.n	800539a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000db4 	.word	0x20000db4
 80053a8:	20000d94 	.word	0x20000d94
 80053ac:	200008bc 	.word	0x200008bc
 80053b0:	20000d4c 	.word	0x20000d4c
 80053b4:	200008b8 	.word	0x200008b8
 80053b8:	20000da0 	.word	0x20000da0

080053bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053c4:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <vTaskInternalSetTimeOutState+0x24>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <vTaskInternalSetTimeOutState+0x28>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20000da4 	.word	0x20000da4
 80053e4:	20000d90 	.word	0x20000d90

080053e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	613b      	str	r3, [r7, #16]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	60fb      	str	r3, [r7, #12]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800542e:	f000 fe8b 	bl	8006148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005432:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <xTaskCheckForTimeOut+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800544a:	d102      	bne.n	8005452 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	e023      	b.n	800549a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <xTaskCheckForTimeOut+0xc4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d007      	beq.n	800546e <xTaskCheckForTimeOut+0x86>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e015      	b.n	800549a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	429a      	cmp	r2, r3
 8005476:	d20b      	bcs.n	8005490 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff99 	bl	80053bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e004      	b.n	800549a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005496:	2301      	movs	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800549a:	f000 fe87 	bl	80061ac <vPortExitCritical>

	return xReturn;
 800549e:	69fb      	ldr	r3, [r7, #28]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000d90 	.word	0x20000d90
 80054ac:	20000da4 	.word	0x20000da4

080054b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054b4:	4b03      	ldr	r3, [pc, #12]	@ (80054c4 <vTaskMissedYield+0x14>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000da0 	.word	0x20000da0

080054c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054d0:	f000 f852 	bl	8005578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054d4:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <prvIdleTask+0x28>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d9f9      	bls.n	80054d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054dc:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <prvIdleTask+0x2c>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054ec:	e7f0      	b.n	80054d0 <prvIdleTask+0x8>
 80054ee:	bf00      	nop
 80054f0:	200008bc 	.word	0x200008bc
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	e00c      	b.n	800551e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a12      	ldr	r2, [pc, #72]	@ (8005558 <prvInitialiseTaskLists+0x60>)
 8005510:	4413      	add	r3, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fbfa 	bl	8003d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3301      	adds	r3, #1
 800551c:	607b      	str	r3, [r7, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b37      	cmp	r3, #55	@ 0x37
 8005522:	d9ef      	bls.n	8005504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005524:	480d      	ldr	r0, [pc, #52]	@ (800555c <prvInitialiseTaskLists+0x64>)
 8005526:	f7fe fbf1 	bl	8003d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800552a:	480d      	ldr	r0, [pc, #52]	@ (8005560 <prvInitialiseTaskLists+0x68>)
 800552c:	f7fe fbee 	bl	8003d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005530:	480c      	ldr	r0, [pc, #48]	@ (8005564 <prvInitialiseTaskLists+0x6c>)
 8005532:	f7fe fbeb 	bl	8003d0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005536:	480c      	ldr	r0, [pc, #48]	@ (8005568 <prvInitialiseTaskLists+0x70>)
 8005538:	f7fe fbe8 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800553c:	480b      	ldr	r0, [pc, #44]	@ (800556c <prvInitialiseTaskLists+0x74>)
 800553e:	f7fe fbe5 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <prvInitialiseTaskLists+0x78>)
 8005544:	4a05      	ldr	r2, [pc, #20]	@ (800555c <prvInitialiseTaskLists+0x64>)
 8005546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <prvInitialiseTaskLists+0x7c>)
 800554a:	4a05      	ldr	r2, [pc, #20]	@ (8005560 <prvInitialiseTaskLists+0x68>)
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200008bc 	.word	0x200008bc
 800555c:	20000d1c 	.word	0x20000d1c
 8005560:	20000d30 	.word	0x20000d30
 8005564:	20000d4c 	.word	0x20000d4c
 8005568:	20000d60 	.word	0x20000d60
 800556c:	20000d78 	.word	0x20000d78
 8005570:	20000d44 	.word	0x20000d44
 8005574:	20000d48 	.word	0x20000d48

08005578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800557e:	e019      	b.n	80055b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005580:	f000 fde2 	bl	8006148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005584:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <prvCheckTasksWaitingTermination+0x50>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fc45 	bl	8003e20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <prvCheckTasksWaitingTermination+0x54>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3b01      	subs	r3, #1
 800559c:	4a0b      	ldr	r2, [pc, #44]	@ (80055cc <prvCheckTasksWaitingTermination+0x54>)
 800559e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055aa:	f000 fdff 	bl	80061ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f810 	bl	80055d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e1      	bne.n	8005580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000d60 	.word	0x20000d60
 80055cc:	20000d8c 	.word	0x20000d8c
 80055d0:	20000d74 	.word	0x20000d74

080055d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 ff9c 	bl	8006528 <vPortFree>
				vPortFree( pxTCB );
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 ff99 	bl	8006528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055f6:	e019      	b.n	800562c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d103      	bne.n	800560a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 ff90 	bl	8006528 <vPortFree>
	}
 8005608:	e010      	b.n	800562c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005610:	2b02      	cmp	r3, #2
 8005612:	d00b      	beq.n	800562c <prvDeleteTCB+0x58>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60fb      	str	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <prvDeleteTCB+0x54>
	}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <prvResetNextTaskUnblockTime+0x38>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <prvResetNextTaskUnblockTime+0x3c>)
 8005646:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800564a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800564c:	e008      	b.n	8005660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564e:	4b07      	ldr	r3, [pc, #28]	@ (800566c <prvResetNextTaskUnblockTime+0x38>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a04      	ldr	r2, [pc, #16]	@ (8005670 <prvResetNextTaskUnblockTime+0x3c>)
 800565e:	6013      	str	r3, [r2, #0]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000d44 	.word	0x20000d44
 8005670:	20000dac 	.word	0x20000dac

08005674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <xTaskGetSchedulerState+0x34>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005682:	2301      	movs	r3, #1
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	e008      	b.n	800569a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005688:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <xTaskGetSchedulerState+0x38>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005690:	2302      	movs	r3, #2
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	e001      	b.n	800569a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800569a:	687b      	ldr	r3, [r7, #4]
	}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000d98 	.word	0x20000d98
 80056ac:	20000db4 	.word	0x20000db4

080056b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d058      	beq.n	8005778 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005784 <xTaskPriorityDisinherit+0xd4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d00b      	beq.n	80056e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571a:	429a      	cmp	r2, r3
 800571c:	d02c      	beq.n	8005778 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d128      	bne.n	8005778 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fb78 	bl	8003e20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <xTaskPriorityDisinherit+0xd8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d903      	bls.n	8005758 <xTaskPriorityDisinherit+0xa8>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4a0c      	ldr	r2, [pc, #48]	@ (8005788 <xTaskPriorityDisinherit+0xd8>)
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4a09      	ldr	r2, [pc, #36]	@ (800578c <xTaskPriorityDisinherit+0xdc>)
 8005766:	441a      	add	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f7fe faf9 	bl	8003d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005778:	697b      	ldr	r3, [r7, #20]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	200008b8 	.word	0x200008b8
 8005788:	20000d94 	.word	0x20000d94
 800578c:	200008bc 	.word	0x200008bc

08005790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800579a:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <prvAddCurrentTaskToDelayedList+0x90>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a0:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fb3a 	bl	8003e20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b2:	d10a      	bne.n	80057ca <prvAddCurrentTaskToDelayedList+0x3a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4819      	ldr	r0, [pc, #100]	@ (8005828 <prvAddCurrentTaskToDelayedList+0x98>)
 80057c4:	f7fe facf 	bl	8003d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057c8:	e026      	b.n	8005818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d209      	bcs.n	80057f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e2:	4b12      	ldr	r3, [pc, #72]	@ (800582c <prvAddCurrentTaskToDelayedList+0x9c>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fadd 	bl	8003dae <vListInsert>
}
 80057f4:	e010      	b.n	8005818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7fe fad3 	bl	8003dae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005808:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d202      	bcs.n	8005818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005812:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6013      	str	r3, [r2, #0]
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000d90 	.word	0x20000d90
 8005824:	200008b8 	.word	0x200008b8
 8005828:	20000d78 	.word	0x20000d78
 800582c:	20000d48 	.word	0x20000d48
 8005830:	20000d44 	.word	0x20000d44
 8005834:	20000dac 	.word	0x20000dac

08005838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	@ 0x28
 800583c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005842:	f000 fb13 	bl	8005e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005846:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <xTimerCreateTimerTask+0x84>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d021      	beq.n	8005892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005856:	1d3a      	adds	r2, r7, #4
 8005858:	f107 0108 	add.w	r1, r7, #8
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe fa39 	bl	8003cd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	9202      	str	r2, [sp, #8]
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	2302      	movs	r3, #2
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	460a      	mov	r2, r1
 8005878:	4911      	ldr	r1, [pc, #68]	@ (80058c0 <xTimerCreateTimerTask+0x88>)
 800587a:	4812      	ldr	r0, [pc, #72]	@ (80058c4 <xTimerCreateTimerTask+0x8c>)
 800587c:	f7fe fff4 	bl	8004868 <xTaskCreateStatic>
 8005880:	4603      	mov	r3, r0
 8005882:	4a11      	ldr	r2, [pc, #68]	@ (80058c8 <xTimerCreateTimerTask+0x90>)
 8005884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005886:	4b10      	ldr	r3, [pc, #64]	@ (80058c8 <xTimerCreateTimerTask+0x90>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800588e:	2301      	movs	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	613b      	str	r3, [r7, #16]
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000de8 	.word	0x20000de8
 80058c0:	08007824 	.word	0x08007824
 80058c4:	08005a05 	.word	0x08005a05
 80058c8:	20000dec 	.word	0x20000dec

080058cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	@ 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058da:	2300      	movs	r3, #0
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <xTimerGenericCommand+0x30>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058fc:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <xTimerGenericCommand+0x98>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02a      	beq.n	800595a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b05      	cmp	r3, #5
 8005914:	dc18      	bgt.n	8005948 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005916:	f7ff fead 	bl	8005674 <xTaskGetSchedulerState>
 800591a:	4603      	mov	r3, r0
 800591c:	2b02      	cmp	r3, #2
 800591e:	d109      	bne.n	8005934 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005920:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <xTimerGenericCommand+0x98>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	f107 0110 	add.w	r1, r7, #16
 8005928:	2300      	movs	r3, #0
 800592a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592c:	f7fe fbac 	bl	8004088 <xQueueGenericSend>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24
 8005932:	e012      	b.n	800595a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005934:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <xTimerGenericCommand+0x98>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	f107 0110 	add.w	r1, r7, #16
 800593c:	2300      	movs	r3, #0
 800593e:	2200      	movs	r2, #0
 8005940:	f7fe fba2 	bl	8004088 <xQueueGenericSend>
 8005944:	6278      	str	r0, [r7, #36]	@ 0x24
 8005946:	e008      	b.n	800595a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <xTimerGenericCommand+0x98>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	f107 0110 	add.w	r1, r7, #16
 8005950:	2300      	movs	r3, #0
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f7fe fc9a 	bl	800428c <xQueueGenericSendFromISR>
 8005958:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	@ 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000de8 	.word	0x20000de8

08005968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005972:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <prvProcessExpiredTimer+0x98>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3304      	adds	r3, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fa4d 	bl	8003e20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d023      	beq.n	80059dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	18d1      	adds	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	f000 f8d5 	bl	8005b50 <prvInsertTimerInActiveList>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	2100      	movs	r1, #0
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ff88 	bl	80058cc <xTimerGenericCommand>
 80059bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d114      	bne.n	80059ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	6978      	ldr	r0, [r7, #20]
 80059f4:	4798      	blx	r3
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000de0 	.word	0x20000de0

08005a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f859 	bl	8005ac8 <prvGetNextExpireTime>
 8005a16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f805 	bl	8005a2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a22:	f000 f8d7 	bl	8005bd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a26:	bf00      	nop
 8005a28:	e7f0      	b.n	8005a0c <prvTimerTask+0x8>
	...

08005a2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a36:	f7ff fa37 	bl	8004ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f866 	bl	8005b10 <prvSampleTimeNow>
 8005a44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d130      	bne.n	8005aae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <prvProcessTimerOrBlockTask+0x3c>
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d806      	bhi.n	8005a68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a5a:	f7ff fa33 	bl	8004ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff81 	bl	8005968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a66:	e024      	b.n	8005ab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a6e:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <prvProcessTimerOrBlockTask+0x90>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <prvProcessTimerOrBlockTask+0x50>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x52>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <prvProcessTimerOrBlockTask+0x94>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f7fe feb7 	bl	8004800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a92:	f7ff fa17 	bl	8004ec4 <xTaskResumeAll>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ac4 <prvProcessTimerOrBlockTask+0x98>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
}
 8005aac:	e001      	b.n	8005ab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005aae:	f7ff fa09 	bl	8004ec4 <xTaskResumeAll>
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000de4 	.word	0x20000de4
 8005ac0:	20000de8 	.word	0x20000de8
 8005ac4:	e000ed04 	.word	0xe000ed04

08005ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b0c <prvGetNextExpireTime+0x44>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <prvGetNextExpireTime+0x16>
 8005ada:	2201      	movs	r2, #1
 8005adc:	e000      	b.n	8005ae0 <prvGetNextExpireTime+0x18>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <prvGetNextExpireTime+0x44>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e001      	b.n	8005afc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000de0 	.word	0x20000de0

08005b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b18:	f7ff fa72 	bl	8005000 <xTaskGetTickCount>
 8005b1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <prvSampleTimeNow+0x3c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d205      	bcs.n	8005b34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b28:	f000 f93a 	bl	8005da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e002      	b.n	8005b3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b3a:	4a04      	ldr	r2, [pc, #16]	@ (8005b4c <prvSampleTimeNow+0x3c>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b40:	68fb      	ldr	r3, [r7, #12]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000df0 	.word	0x20000df0

08005b50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d812      	bhi.n	8005b9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e01b      	b.n	8005bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <prvInsertTimerInActiveList+0x7c>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe f90a 	bl	8003dae <vListInsert>
 8005b9a:	e012      	b.n	8005bc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d206      	bcs.n	8005bb2 <prvInsertTimerInActiveList+0x62>
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d302      	bcc.n	8005bb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e007      	b.n	8005bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bb2:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <prvInsertTimerInActiveList+0x80>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7fe f8f6 	bl	8003dae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bc2:	697b      	ldr	r3, [r7, #20]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000de4 	.word	0x20000de4
 8005bd0:	20000de0 	.word	0x20000de0

08005bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bda:	e0ce      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da19      	bge.n	8005c16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	3304      	adds	r3, #4
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	61fb      	str	r3, [r7, #28]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c0c:	6850      	ldr	r0, [r2, #4]
 8005c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	4611      	mov	r1, r2
 8005c14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f2c0 80ae 	blt.w	8005d7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe f8f6 	bl	8003e20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c34:	463b      	mov	r3, r7
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff6a 	bl	8005b10 <prvSampleTimeNow>
 8005c3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b09      	cmp	r3, #9
 8005c42:	f200 8097 	bhi.w	8005d74 <prvProcessReceivedCommands+0x1a0>
 8005c46:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <prvProcessReceivedCommands+0x78>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c75 	.word	0x08005c75
 8005c54:	08005c75 	.word	0x08005c75
 8005c58:	08005ceb 	.word	0x08005ceb
 8005c5c:	08005cff 	.word	0x08005cff
 8005c60:	08005d4b 	.word	0x08005d4b
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c75 	.word	0x08005c75
 8005c6c:	08005ceb 	.word	0x08005ceb
 8005c70:	08005cff 	.word	0x08005cff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	18d1      	adds	r1, r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c94:	f7ff ff5c 	bl	8005b50 <prvInsertTimerInActiveList>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d06c      	beq.n	8005d78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d061      	beq.n	8005d78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	441a      	add	r2, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc6:	f7ff fe01 	bl	80058cc <xTimerGenericCommand>
 8005cca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d152      	bne.n	8005d78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	61bb      	str	r3, [r7, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cfc:	e03d      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	617b      	str	r3, [r7, #20]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	18d1      	adds	r1, r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d44:	f7ff ff04 	bl	8005b50 <prvInsertTimerInActiveList>
					break;
 8005d48:	e017      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d5a:	f000 fbe5 	bl	8006528 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d5e:	e00c      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d72:	e002      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005d74:	bf00      	nop
 8005d76:	e000      	b.n	8005d7a <prvProcessReceivedCommands+0x1a6>
					break;
 8005d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d7a:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <prvProcessReceivedCommands+0x1c8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1d39      	adds	r1, r7, #4
 8005d80:	2200      	movs	r2, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fb20 	bl	80043c8 <xQueueReceive>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f47f af26 	bne.w	8005bdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	3730      	adds	r7, #48	@ 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000de8 	.word	0x20000de8

08005da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005da6:	e049      	b.n	8005e3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005da8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe f82d 	bl	8003e20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02f      	beq.n	8005e3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90e      	bls.n	8005e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fd ffd2 	bl	8003dae <vListInsert>
 8005e0a:	e017      	b.n	8005e3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	2100      	movs	r1, #0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff fd58 	bl	80058cc <xTimerGenericCommand>
 8005e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	603b      	str	r3, [r7, #0]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e3c:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1b0      	bne.n	8005da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e46:	4b07      	ldr	r3, [pc, #28]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <prvSwitchTimerLists+0xc8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <prvSwitchTimerLists+0xc4>)
 8005e52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e54:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <prvSwitchTimerLists+0xc8>)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000de0 	.word	0x20000de0
 8005e68:	20000de4 	.word	0x20000de4

08005e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e72:	f000 f969 	bl	8006148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e76:	4b15      	ldr	r3, [pc, #84]	@ (8005ecc <prvCheckForValidListAndQueue+0x60>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d120      	bne.n	8005ec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e7e:	4814      	ldr	r0, [pc, #80]	@ (8005ed0 <prvCheckForValidListAndQueue+0x64>)
 8005e80:	f7fd ff44 	bl	8003d0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e84:	4813      	ldr	r0, [pc, #76]	@ (8005ed4 <prvCheckForValidListAndQueue+0x68>)
 8005e86:	f7fd ff41 	bl	8003d0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <prvCheckForValidListAndQueue+0x6c>)
 8005e8c:	4a10      	ldr	r2, [pc, #64]	@ (8005ed0 <prvCheckForValidListAndQueue+0x64>)
 8005e8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e90:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <prvCheckForValidListAndQueue+0x70>)
 8005e92:	4a10      	ldr	r2, [pc, #64]	@ (8005ed4 <prvCheckForValidListAndQueue+0x68>)
 8005e94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e96:	2300      	movs	r3, #0
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <prvCheckForValidListAndQueue+0x74>)
 8005e9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <prvCheckForValidListAndQueue+0x78>)
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	200a      	movs	r0, #10
 8005ea2:	f7fe f851 	bl	8003f48 <xQueueGenericCreateStatic>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4a08      	ldr	r2, [pc, #32]	@ (8005ecc <prvCheckForValidListAndQueue+0x60>)
 8005eaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005eac:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <prvCheckForValidListAndQueue+0x60>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <prvCheckForValidListAndQueue+0x60>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	490b      	ldr	r1, [pc, #44]	@ (8005ee8 <prvCheckForValidListAndQueue+0x7c>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fc76 	bl	80047ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ec0:	f000 f974 	bl	80061ac <vPortExitCritical>
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000de8 	.word	0x20000de8
 8005ed0:	20000db8 	.word	0x20000db8
 8005ed4:	20000dcc 	.word	0x20000dcc
 8005ed8:	20000de0 	.word	0x20000de0
 8005edc:	20000de4 	.word	0x20000de4
 8005ee0:	20000e94 	.word	0x20000e94
 8005ee4:	20000df4 	.word	0x20000df4
 8005ee8:	0800782c 	.word	0x0800782c

08005eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3b04      	subs	r3, #4
 8005efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3b04      	subs	r3, #4
 8005f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f50 <pxPortInitialiseStack+0x64>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3b14      	subs	r3, #20
 8005f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f06f 0202 	mvn.w	r2, #2
 8005f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3b20      	subs	r3, #32
 8005f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	08005f55 	.word	0x08005f55

08005f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f5e:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <prvTaskExitError+0x58>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f66:	d00b      	beq.n	8005f80 <prvTaskExitError+0x2c>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60fb      	str	r3, [r7, #12]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <prvTaskExitError+0x28>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60bb      	str	r3, [r7, #8]
}
 8005f92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f94:	bf00      	nop
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0fc      	beq.n	8005f96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	2000000c 	.word	0x2000000c

08005fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fb0:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <pxCurrentTCBConst2>)
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	6808      	ldr	r0, [r1, #0]
 8005fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	f380 8809 	msr	PSP, r0
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8811 	msr	BASEPRI, r0
 8005fca:	4770      	bx	lr
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst2>:
 8005fd0:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fd8:	4808      	ldr	r0, [pc, #32]	@ (8005ffc <prvPortStartFirstTask+0x24>)
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	6800      	ldr	r0, [r0, #0]
 8005fde:	f380 8808 	msr	MSP, r0
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8814 	msr	CONTROL, r0
 8005fea:	b662      	cpsie	i
 8005fec:	b661      	cpsie	f
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	df00      	svc	0
 8005ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed08 	.word	0xe000ed08

08006000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006006:	4b47      	ldr	r3, [pc, #284]	@ (8006124 <xPortStartScheduler+0x124>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a47      	ldr	r2, [pc, #284]	@ (8006128 <xPortStartScheduler+0x128>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10b      	bne.n	8006028 <xPortStartScheduler+0x28>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	613b      	str	r3, [r7, #16]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006028:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <xPortStartScheduler+0x124>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3f      	ldr	r2, [pc, #252]	@ (800612c <xPortStartScheduler+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10b      	bne.n	800604a <xPortStartScheduler+0x4a>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800604a:	4b39      	ldr	r3, [pc, #228]	@ (8006130 <xPortStartScheduler+0x130>)
 800604c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	22ff      	movs	r2, #255	@ 0xff
 800605a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b31      	ldr	r3, [pc, #196]	@ (8006134 <xPortStartScheduler+0x134>)
 8006070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006072:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <xPortStartScheduler+0x138>)
 8006074:	2207      	movs	r2, #7
 8006076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006078:	e009      	b.n	800608e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800607a:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <xPortStartScheduler+0x138>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <xPortStartScheduler+0x138>)
 8006082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d0ef      	beq.n	800607a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800609a:	4b27      	ldr	r3, [pc, #156]	@ (8006138 <xPortStartScheduler+0x138>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1c3 0307 	rsb	r3, r3, #7
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d00b      	beq.n	80060be <xPortStartScheduler+0xbe>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60bb      	str	r3, [r7, #8]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060be:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <xPortStartScheduler+0x138>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006138 <xPortStartScheduler+0x138>)
 80060c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <xPortStartScheduler+0x138>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060d0:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <xPortStartScheduler+0x138>)
 80060d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060dc:	4b17      	ldr	r3, [pc, #92]	@ (800613c <xPortStartScheduler+0x13c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a16      	ldr	r2, [pc, #88]	@ (800613c <xPortStartScheduler+0x13c>)
 80060e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060e8:	4b14      	ldr	r3, [pc, #80]	@ (800613c <xPortStartScheduler+0x13c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a13      	ldr	r2, [pc, #76]	@ (800613c <xPortStartScheduler+0x13c>)
 80060ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060f4:	f000 f8da 	bl	80062ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060f8:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <xPortStartScheduler+0x140>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060fe:	f000 f8f9 	bl	80062f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006102:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <xPortStartScheduler+0x144>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a0f      	ldr	r2, [pc, #60]	@ (8006144 <xPortStartScheduler+0x144>)
 8006108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800610c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800610e:	f7ff ff63 	bl	8005fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006112:	f7ff f83f 	bl	8005194 <vTaskSwitchContext>
	prvTaskExitError();
 8006116:	f7ff ff1d 	bl	8005f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed00 	.word	0xe000ed00
 8006128:	410fc271 	.word	0x410fc271
 800612c:	410fc270 	.word	0x410fc270
 8006130:	e000e400 	.word	0xe000e400
 8006134:	20000ee4 	.word	0x20000ee4
 8006138:	20000ee8 	.word	0x20000ee8
 800613c:	e000ed20 	.word	0xe000ed20
 8006140:	2000000c 	.word	0x2000000c
 8006144:	e000ef34 	.word	0xe000ef34

08006148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <vPortEnterCritical+0x5c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	4a0e      	ldr	r2, [pc, #56]	@ (80061a4 <vPortEnterCritical+0x5c>)
 800616a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800616c:	4b0d      	ldr	r3, [pc, #52]	@ (80061a4 <vPortEnterCritical+0x5c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d110      	bne.n	8006196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <vPortEnterCritical+0x60>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <vPortEnterCritical+0x4e>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <vPortEnterCritical+0x4a>
	}
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <vPortExitCritical+0x26>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	607b      	str	r3, [r7, #4]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <vPortExitCritical+0x50>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a08      	ldr	r2, [pc, #32]	@ (80061fc <vPortExitCritical+0x50>)
 80061da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <vPortExitCritical+0x50>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <vPortExitCritical+0x44>
 80061e4:	2300      	movs	r3, #0
 80061e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2000000c 	.word	0x2000000c

08006200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006200:	f3ef 8009 	mrs	r0, PSP
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4b15      	ldr	r3, [pc, #84]	@ (8006260 <pxCurrentTCBConst>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f01e 0f10 	tst.w	lr, #16
 8006210:	bf08      	it	eq
 8006212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006224:	f380 8811 	msr	BASEPRI, r0
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f7fe ffb0 	bl	8005194 <vTaskSwitchContext>
 8006234:	f04f 0000 	mov.w	r0, #0
 8006238:	f380 8811 	msr	BASEPRI, r0
 800623c:	bc09      	pop	{r0, r3}
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	6808      	ldr	r0, [r1, #0]
 8006242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006246:	f01e 0f10 	tst.w	lr, #16
 800624a:	bf08      	it	eq
 800624c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006250:	f380 8809 	msr	PSP, r0
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	f3af 8000 	nop.w

08006260 <pxCurrentTCBConst>:
 8006260:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
}
 8006280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006282:	f7fe fecd 	bl	8005020 <xTaskIncrementTick>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <xPortSysTickHandler+0x40>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f383 8811 	msr	BASEPRI, r3
}
 800629e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <vPortSetupTimerInterrupt+0x34>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062b6:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <vPortSetupTimerInterrupt+0x38>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <vPortSetupTimerInterrupt+0x3c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <vPortSetupTimerInterrupt+0x40>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	099b      	lsrs	r3, r3, #6
 80062c8:	4a09      	ldr	r2, [pc, #36]	@ (80062f0 <vPortSetupTimerInterrupt+0x44>)
 80062ca:	3b01      	subs	r3, #1
 80062cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ce:	4b04      	ldr	r3, [pc, #16]	@ (80062e0 <vPortSetupTimerInterrupt+0x34>)
 80062d0:	2207      	movs	r2, #7
 80062d2:	601a      	str	r2, [r3, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	e000e010 	.word	0xe000e010
 80062e4:	e000e018 	.word	0xe000e018
 80062e8:	20000000 	.word	0x20000000
 80062ec:	10624dd3 	.word	0x10624dd3
 80062f0:	e000e014 	.word	0xe000e014

080062f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006304 <vPortEnableVFP+0x10>
 80062f8:	6801      	ldr	r1, [r0, #0]
 80062fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062fe:	6001      	str	r1, [r0, #0]
 8006300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006302:	bf00      	nop
 8006304:	e000ed88 	.word	0xe000ed88

08006308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800630e:	f3ef 8305 	mrs	r3, IPSR
 8006312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d915      	bls.n	8006346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800631a:	4a18      	ldr	r2, [pc, #96]	@ (800637c <vPortValidateInterruptPriority+0x74>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006324:	4b16      	ldr	r3, [pc, #88]	@ (8006380 <vPortValidateInterruptPriority+0x78>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	7afa      	ldrb	r2, [r7, #11]
 800632a:	429a      	cmp	r2, r3
 800632c:	d20b      	bcs.n	8006346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <vPortValidateInterruptPriority+0x7c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800634e:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <vPortValidateInterruptPriority+0x80>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d90b      	bls.n	800636e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	603b      	str	r3, [r7, #0]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <vPortValidateInterruptPriority+0x62>
	}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	e000e3f0 	.word	0xe000e3f0
 8006380:	20000ee4 	.word	0x20000ee4
 8006384:	e000ed0c 	.word	0xe000ed0c
 8006388:	20000ee8 	.word	0x20000ee8

0800638c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006398:	f7fe fd86 	bl	8004ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800639c:	4b5c      	ldr	r3, [pc, #368]	@ (8006510 <pvPortMalloc+0x184>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063a4:	f000 f924 	bl	80065f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006514 <pvPortMalloc+0x188>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8095 	bne.w	80064e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01e      	beq.n	80063fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80063bc:	2208      	movs	r2, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	3308      	adds	r3, #8
 80063d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <pvPortMalloc+0x6e>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	617b      	str	r3, [r7, #20]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d06f      	beq.n	80064e0 <pvPortMalloc+0x154>
 8006400:	4b45      	ldr	r3, [pc, #276]	@ (8006518 <pvPortMalloc+0x18c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d86a      	bhi.n	80064e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800640a:	4b44      	ldr	r3, [pc, #272]	@ (800651c <pvPortMalloc+0x190>)
 800640c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800640e:	4b43      	ldr	r3, [pc, #268]	@ (800651c <pvPortMalloc+0x190>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006414:	e004      	b.n	8006420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <pvPortMalloc+0xa6>
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f1      	bne.n	8006416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006432:	4b37      	ldr	r3, [pc, #220]	@ (8006510 <pvPortMalloc+0x184>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006438:	429a      	cmp	r2, r3
 800643a:	d051      	beq.n	80064e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2208      	movs	r2, #8
 8006442:	4413      	add	r3, r2
 8006444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	2308      	movs	r3, #8
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	429a      	cmp	r2, r3
 800645c:	d920      	bls.n	80064a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <pvPortMalloc+0xfc>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800649a:	69b8      	ldr	r0, [r7, #24]
 800649c:	f000 f90a 	bl	80066b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <pvPortMalloc+0x18c>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <pvPortMalloc+0x18c>)
 80064ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <pvPortMalloc+0x18c>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006520 <pvPortMalloc+0x194>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d203      	bcs.n	80064c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064ba:	4b17      	ldr	r3, [pc, #92]	@ (8006518 <pvPortMalloc+0x18c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <pvPortMalloc+0x194>)
 80064c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <pvPortMalloc+0x188>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064d6:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <pvPortMalloc+0x198>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <pvPortMalloc+0x198>)
 80064de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064e0:	f7fe fcf0 	bl	8004ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <pvPortMalloc+0x17a>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <pvPortMalloc+0x176>
	return pvReturn;
 8006506:	69fb      	ldr	r3, [r7, #28]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3728      	adds	r7, #40	@ 0x28
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20004af4 	.word	0x20004af4
 8006514:	20004b08 	.word	0x20004b08
 8006518:	20004af8 	.word	0x20004af8
 800651c:	20004aec 	.word	0x20004aec
 8006520:	20004afc 	.word	0x20004afc
 8006524:	20004b00 	.word	0x20004b00

08006528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04f      	beq.n	80065da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800653a:	2308      	movs	r3, #8
 800653c:	425b      	negs	r3, r3
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b25      	ldr	r3, [pc, #148]	@ (80065e4 <vPortFree+0xbc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <vPortFree+0x46>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	60fb      	str	r3, [r7, #12]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <vPortFree+0x66>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60bb      	str	r3, [r7, #8]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	4b14      	ldr	r3, [pc, #80]	@ (80065e4 <vPortFree+0xbc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01e      	beq.n	80065da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	4b0e      	ldr	r3, [pc, #56]	@ (80065e4 <vPortFree+0xbc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	401a      	ands	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065b4:	f7fe fc78 	bl	8004ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <vPortFree+0xc0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4413      	add	r3, r2
 80065c2:	4a09      	ldr	r2, [pc, #36]	@ (80065e8 <vPortFree+0xc0>)
 80065c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065c6:	6938      	ldr	r0, [r7, #16]
 80065c8:	f000 f874 	bl	80066b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vPortFree+0xc4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a06      	ldr	r2, [pc, #24]	@ (80065ec <vPortFree+0xc4>)
 80065d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065d6:	f7fe fc75 	bl	8004ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065da:	bf00      	nop
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20004b08 	.word	0x20004b08
 80065e8:	20004af8 	.word	0x20004af8
 80065ec:	20004b04 	.word	0x20004b04

080065f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065fc:	4b27      	ldr	r3, [pc, #156]	@ (800669c <prvHeapInit+0xac>)
 80065fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3307      	adds	r3, #7
 800660e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	4a1f      	ldr	r2, [pc, #124]	@ (800669c <prvHeapInit+0xac>)
 8006620:	4413      	add	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006628:	4a1d      	ldr	r2, [pc, #116]	@ (80066a0 <prvHeapInit+0xb0>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <prvHeapInit+0xb0>)
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	4413      	add	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800663c:	2208      	movs	r2, #8
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <prvHeapInit+0xb4>)
 8006650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006652:	4b14      	ldr	r3, [pc, #80]	@ (80066a4 <prvHeapInit+0xb4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800665a:	4b12      	ldr	r3, [pc, #72]	@ (80066a4 <prvHeapInit+0xb4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006670:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <prvHeapInit+0xb4>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4a0a      	ldr	r2, [pc, #40]	@ (80066a8 <prvHeapInit+0xb8>)
 800667e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <prvHeapInit+0xbc>)
 8006686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006688:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <prvHeapInit+0xc0>)
 800668a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20000eec 	.word	0x20000eec
 80066a0:	20004aec 	.word	0x20004aec
 80066a4:	20004af4 	.word	0x20004af4
 80066a8:	20004afc 	.word	0x20004afc
 80066ac:	20004af8 	.word	0x20004af8
 80066b0:	20004b08 	.word	0x20004b08

080066b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066bc:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <prvInsertBlockIntoFreeList+0xac>)
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e002      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x14>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d8f7      	bhi.n	80066c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d108      	bne.n	80066f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d118      	bne.n	800673c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <prvInsertBlockIntoFreeList+0xb0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d00d      	beq.n	8006732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	e008      	b.n	8006744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e003      	b.n	8006744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d002      	beq.n	8006752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20004aec 	.word	0x20004aec
 8006764:	20004af4 	.word	0x20004af4

08006768 <std>:
 8006768:	2300      	movs	r3, #0
 800676a:	b510      	push	{r4, lr}
 800676c:	4604      	mov	r4, r0
 800676e:	e9c0 3300 	strd	r3, r3, [r0]
 8006772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006776:	6083      	str	r3, [r0, #8]
 8006778:	8181      	strh	r1, [r0, #12]
 800677a:	6643      	str	r3, [r0, #100]	@ 0x64
 800677c:	81c2      	strh	r2, [r0, #14]
 800677e:	6183      	str	r3, [r0, #24]
 8006780:	4619      	mov	r1, r3
 8006782:	2208      	movs	r2, #8
 8006784:	305c      	adds	r0, #92	@ 0x5c
 8006786:	f000 f9f9 	bl	8006b7c <memset>
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <std+0x58>)
 800678c:	6263      	str	r3, [r4, #36]	@ 0x24
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <std+0x5c>)
 8006790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <std+0x60>)
 8006794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006796:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <std+0x64>)
 8006798:	6323      	str	r3, [r4, #48]	@ 0x30
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <std+0x68>)
 800679c:	6224      	str	r4, [r4, #32]
 800679e:	429c      	cmp	r4, r3
 80067a0:	d006      	beq.n	80067b0 <std+0x48>
 80067a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067a6:	4294      	cmp	r4, r2
 80067a8:	d002      	beq.n	80067b0 <std+0x48>
 80067aa:	33d0      	adds	r3, #208	@ 0xd0
 80067ac:	429c      	cmp	r4, r3
 80067ae:	d105      	bne.n	80067bc <std+0x54>
 80067b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b8:	f000 ba58 	b.w	8006c6c <__retarget_lock_init_recursive>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	bf00      	nop
 80067c0:	080069cd 	.word	0x080069cd
 80067c4:	080069ef 	.word	0x080069ef
 80067c8:	08006a27 	.word	0x08006a27
 80067cc:	08006a4b 	.word	0x08006a4b
 80067d0:	20004b0c 	.word	0x20004b0c

080067d4 <stdio_exit_handler>:
 80067d4:	4a02      	ldr	r2, [pc, #8]	@ (80067e0 <stdio_exit_handler+0xc>)
 80067d6:	4903      	ldr	r1, [pc, #12]	@ (80067e4 <stdio_exit_handler+0x10>)
 80067d8:	4803      	ldr	r0, [pc, #12]	@ (80067e8 <stdio_exit_handler+0x14>)
 80067da:	f000 b869 	b.w	80068b0 <_fwalk_sglue>
 80067de:	bf00      	nop
 80067e0:	20000010 	.word	0x20000010
 80067e4:	08007529 	.word	0x08007529
 80067e8:	20000020 	.word	0x20000020

080067ec <cleanup_stdio>:
 80067ec:	6841      	ldr	r1, [r0, #4]
 80067ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <cleanup_stdio+0x34>)
 80067f0:	4299      	cmp	r1, r3
 80067f2:	b510      	push	{r4, lr}
 80067f4:	4604      	mov	r4, r0
 80067f6:	d001      	beq.n	80067fc <cleanup_stdio+0x10>
 80067f8:	f000 fe96 	bl	8007528 <_fflush_r>
 80067fc:	68a1      	ldr	r1, [r4, #8]
 80067fe:	4b09      	ldr	r3, [pc, #36]	@ (8006824 <cleanup_stdio+0x38>)
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <cleanup_stdio+0x1e>
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fe8f 	bl	8007528 <_fflush_r>
 800680a:	68e1      	ldr	r1, [r4, #12]
 800680c:	4b06      	ldr	r3, [pc, #24]	@ (8006828 <cleanup_stdio+0x3c>)
 800680e:	4299      	cmp	r1, r3
 8006810:	d004      	beq.n	800681c <cleanup_stdio+0x30>
 8006812:	4620      	mov	r0, r4
 8006814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006818:	f000 be86 	b.w	8007528 <_fflush_r>
 800681c:	bd10      	pop	{r4, pc}
 800681e:	bf00      	nop
 8006820:	20004b0c 	.word	0x20004b0c
 8006824:	20004b74 	.word	0x20004b74
 8006828:	20004bdc 	.word	0x20004bdc

0800682c <global_stdio_init.part.0>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <global_stdio_init.part.0+0x30>)
 8006830:	4c0b      	ldr	r4, [pc, #44]	@ (8006860 <global_stdio_init.part.0+0x34>)
 8006832:	4a0c      	ldr	r2, [pc, #48]	@ (8006864 <global_stdio_init.part.0+0x38>)
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	4620      	mov	r0, r4
 8006838:	2200      	movs	r2, #0
 800683a:	2104      	movs	r1, #4
 800683c:	f7ff ff94 	bl	8006768 <std>
 8006840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006844:	2201      	movs	r2, #1
 8006846:	2109      	movs	r1, #9
 8006848:	f7ff ff8e 	bl	8006768 <std>
 800684c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006850:	2202      	movs	r2, #2
 8006852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006856:	2112      	movs	r1, #18
 8006858:	f7ff bf86 	b.w	8006768 <std>
 800685c:	20004c44 	.word	0x20004c44
 8006860:	20004b0c 	.word	0x20004b0c
 8006864:	080067d5 	.word	0x080067d5

08006868 <__sfp_lock_acquire>:
 8006868:	4801      	ldr	r0, [pc, #4]	@ (8006870 <__sfp_lock_acquire+0x8>)
 800686a:	f000 ba00 	b.w	8006c6e <__retarget_lock_acquire_recursive>
 800686e:	bf00      	nop
 8006870:	20004c4d 	.word	0x20004c4d

08006874 <__sfp_lock_release>:
 8006874:	4801      	ldr	r0, [pc, #4]	@ (800687c <__sfp_lock_release+0x8>)
 8006876:	f000 b9fb 	b.w	8006c70 <__retarget_lock_release_recursive>
 800687a:	bf00      	nop
 800687c:	20004c4d 	.word	0x20004c4d

08006880 <__sinit>:
 8006880:	b510      	push	{r4, lr}
 8006882:	4604      	mov	r4, r0
 8006884:	f7ff fff0 	bl	8006868 <__sfp_lock_acquire>
 8006888:	6a23      	ldr	r3, [r4, #32]
 800688a:	b11b      	cbz	r3, 8006894 <__sinit+0x14>
 800688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006890:	f7ff bff0 	b.w	8006874 <__sfp_lock_release>
 8006894:	4b04      	ldr	r3, [pc, #16]	@ (80068a8 <__sinit+0x28>)
 8006896:	6223      	str	r3, [r4, #32]
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <__sinit+0x2c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f5      	bne.n	800688c <__sinit+0xc>
 80068a0:	f7ff ffc4 	bl	800682c <global_stdio_init.part.0>
 80068a4:	e7f2      	b.n	800688c <__sinit+0xc>
 80068a6:	bf00      	nop
 80068a8:	080067ed 	.word	0x080067ed
 80068ac:	20004c44 	.word	0x20004c44

080068b0 <_fwalk_sglue>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4607      	mov	r7, r0
 80068b6:	4688      	mov	r8, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	2600      	movs	r6, #0
 80068bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c0:	f1b9 0901 	subs.w	r9, r9, #1
 80068c4:	d505      	bpl.n	80068d2 <_fwalk_sglue+0x22>
 80068c6:	6824      	ldr	r4, [r4, #0]
 80068c8:	2c00      	cmp	r4, #0
 80068ca:	d1f7      	bne.n	80068bc <_fwalk_sglue+0xc>
 80068cc:	4630      	mov	r0, r6
 80068ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d2:	89ab      	ldrh	r3, [r5, #12]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d907      	bls.n	80068e8 <_fwalk_sglue+0x38>
 80068d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068dc:	3301      	adds	r3, #1
 80068de:	d003      	beq.n	80068e8 <_fwalk_sglue+0x38>
 80068e0:	4629      	mov	r1, r5
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c0      	blx	r8
 80068e6:	4306      	orrs	r6, r0
 80068e8:	3568      	adds	r5, #104	@ 0x68
 80068ea:	e7e9      	b.n	80068c0 <_fwalk_sglue+0x10>

080068ec <iprintf>:
 80068ec:	b40f      	push	{r0, r1, r2, r3}
 80068ee:	b507      	push	{r0, r1, r2, lr}
 80068f0:	4906      	ldr	r1, [pc, #24]	@ (800690c <iprintf+0x20>)
 80068f2:	ab04      	add	r3, sp, #16
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fa:	6881      	ldr	r1, [r0, #8]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	f000 fae9 	bl	8006ed4 <_vfiprintf_r>
 8006902:	b003      	add	sp, #12
 8006904:	f85d eb04 	ldr.w	lr, [sp], #4
 8006908:	b004      	add	sp, #16
 800690a:	4770      	bx	lr
 800690c:	2000001c 	.word	0x2000001c

08006910 <_puts_r>:
 8006910:	6a03      	ldr	r3, [r0, #32]
 8006912:	b570      	push	{r4, r5, r6, lr}
 8006914:	6884      	ldr	r4, [r0, #8]
 8006916:	4605      	mov	r5, r0
 8006918:	460e      	mov	r6, r1
 800691a:	b90b      	cbnz	r3, 8006920 <_puts_r+0x10>
 800691c:	f7ff ffb0 	bl	8006880 <__sinit>
 8006920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006922:	07db      	lsls	r3, r3, #31
 8006924:	d405      	bmi.n	8006932 <_puts_r+0x22>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	0598      	lsls	r0, r3, #22
 800692a:	d402      	bmi.n	8006932 <_puts_r+0x22>
 800692c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800692e:	f000 f99e 	bl	8006c6e <__retarget_lock_acquire_recursive>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	0719      	lsls	r1, r3, #28
 8006936:	d502      	bpl.n	800693e <_puts_r+0x2e>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d135      	bne.n	80069aa <_puts_r+0x9a>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f8c5 	bl	8006ad0 <__swsetup_r>
 8006946:	b380      	cbz	r0, 80069aa <_puts_r+0x9a>
 8006948:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800694c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d405      	bmi.n	800695e <_puts_r+0x4e>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	059b      	lsls	r3, r3, #22
 8006956:	d402      	bmi.n	800695e <_puts_r+0x4e>
 8006958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800695a:	f000 f989 	bl	8006c70 <__retarget_lock_release_recursive>
 800695e:	4628      	mov	r0, r5
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	2b00      	cmp	r3, #0
 8006964:	da04      	bge.n	8006970 <_puts_r+0x60>
 8006966:	69a2      	ldr	r2, [r4, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	dc17      	bgt.n	800699c <_puts_r+0x8c>
 800696c:	290a      	cmp	r1, #10
 800696e:	d015      	beq.n	800699c <_puts_r+0x8c>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	7019      	strb	r1, [r3, #0]
 8006978:	68a3      	ldr	r3, [r4, #8]
 800697a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800697e:	3b01      	subs	r3, #1
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	2900      	cmp	r1, #0
 8006984:	d1ed      	bne.n	8006962 <_puts_r+0x52>
 8006986:	2b00      	cmp	r3, #0
 8006988:	da11      	bge.n	80069ae <_puts_r+0x9e>
 800698a:	4622      	mov	r2, r4
 800698c:	210a      	movs	r1, #10
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f85f 	bl	8006a52 <__swbuf_r>
 8006994:	3001      	adds	r0, #1
 8006996:	d0d7      	beq.n	8006948 <_puts_r+0x38>
 8006998:	250a      	movs	r5, #10
 800699a:	e7d7      	b.n	800694c <_puts_r+0x3c>
 800699c:	4622      	mov	r2, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f857 	bl	8006a52 <__swbuf_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1e7      	bne.n	8006978 <_puts_r+0x68>
 80069a8:	e7ce      	b.n	8006948 <_puts_r+0x38>
 80069aa:	3e01      	subs	r6, #1
 80069ac:	e7e4      	b.n	8006978 <_puts_r+0x68>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	220a      	movs	r2, #10
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e7ee      	b.n	8006998 <_puts_r+0x88>
	...

080069bc <puts>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	@ (80069c8 <puts+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f7ff bfa5 	b.w	8006910 <_puts_r>
 80069c6:	bf00      	nop
 80069c8:	2000001c 	.word	0x2000001c

080069cc <__sread>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	460c      	mov	r4, r1
 80069d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d4:	f000 f8fc 	bl	8006bd0 <_read_r>
 80069d8:	2800      	cmp	r0, #0
 80069da:	bfab      	itete	ge
 80069dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069de:	89a3      	ldrhlt	r3, [r4, #12]
 80069e0:	181b      	addge	r3, r3, r0
 80069e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069e6:	bfac      	ite	ge
 80069e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069ea:	81a3      	strhlt	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__swrite>:
 80069ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f2:	461f      	mov	r7, r3
 80069f4:	898b      	ldrh	r3, [r1, #12]
 80069f6:	05db      	lsls	r3, r3, #23
 80069f8:	4605      	mov	r5, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	4616      	mov	r6, r2
 80069fe:	d505      	bpl.n	8006a0c <__swrite+0x1e>
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	2302      	movs	r3, #2
 8006a06:	2200      	movs	r2, #0
 8006a08:	f000 f8d0 	bl	8006bac <_lseek_r>
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	4632      	mov	r2, r6
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	f000 b8e7 	b.w	8006bf4 <_write_r>

08006a26 <__sseek>:
 8006a26:	b510      	push	{r4, lr}
 8006a28:	460c      	mov	r4, r1
 8006a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2e:	f000 f8bd 	bl	8006bac <_lseek_r>
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	bf15      	itete	ne
 8006a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a42:	81a3      	strheq	r3, [r4, #12]
 8006a44:	bf18      	it	ne
 8006a46:	81a3      	strhne	r3, [r4, #12]
 8006a48:	bd10      	pop	{r4, pc}

08006a4a <__sclose>:
 8006a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4e:	f000 b89d 	b.w	8006b8c <_close_r>

08006a52 <__swbuf_r>:
 8006a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a54:	460e      	mov	r6, r1
 8006a56:	4614      	mov	r4, r2
 8006a58:	4605      	mov	r5, r0
 8006a5a:	b118      	cbz	r0, 8006a64 <__swbuf_r+0x12>
 8006a5c:	6a03      	ldr	r3, [r0, #32]
 8006a5e:	b90b      	cbnz	r3, 8006a64 <__swbuf_r+0x12>
 8006a60:	f7ff ff0e 	bl	8006880 <__sinit>
 8006a64:	69a3      	ldr	r3, [r4, #24]
 8006a66:	60a3      	str	r3, [r4, #8]
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	071a      	lsls	r2, r3, #28
 8006a6c:	d501      	bpl.n	8006a72 <__swbuf_r+0x20>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	b943      	cbnz	r3, 8006a84 <__swbuf_r+0x32>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f82b 	bl	8006ad0 <__swsetup_r>
 8006a7a:	b118      	cbz	r0, 8006a84 <__swbuf_r+0x32>
 8006a7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a80:	4638      	mov	r0, r7
 8006a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	6922      	ldr	r2, [r4, #16]
 8006a88:	1a98      	subs	r0, r3, r2
 8006a8a:	6963      	ldr	r3, [r4, #20]
 8006a8c:	b2f6      	uxtb	r6, r6
 8006a8e:	4283      	cmp	r3, r0
 8006a90:	4637      	mov	r7, r6
 8006a92:	dc05      	bgt.n	8006aa0 <__swbuf_r+0x4e>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 fd46 	bl	8007528 <_fflush_r>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d1ed      	bne.n	8006a7c <__swbuf_r+0x2a>
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	701e      	strb	r6, [r3, #0]
 8006aae:	6962      	ldr	r2, [r4, #20]
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d004      	beq.n	8006ac0 <__swbuf_r+0x6e>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d5e1      	bpl.n	8006a80 <__swbuf_r+0x2e>
 8006abc:	2e0a      	cmp	r6, #10
 8006abe:	d1df      	bne.n	8006a80 <__swbuf_r+0x2e>
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 fd30 	bl	8007528 <_fflush_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d0d9      	beq.n	8006a80 <__swbuf_r+0x2e>
 8006acc:	e7d6      	b.n	8006a7c <__swbuf_r+0x2a>
	...

08006ad0 <__swsetup_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4b29      	ldr	r3, [pc, #164]	@ (8006b78 <__swsetup_r+0xa8>)
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	460c      	mov	r4, r1
 8006ada:	b118      	cbz	r0, 8006ae4 <__swsetup_r+0x14>
 8006adc:	6a03      	ldr	r3, [r0, #32]
 8006ade:	b90b      	cbnz	r3, 8006ae4 <__swsetup_r+0x14>
 8006ae0:	f7ff fece 	bl	8006880 <__sinit>
 8006ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	d422      	bmi.n	8006b32 <__swsetup_r+0x62>
 8006aec:	06da      	lsls	r2, r3, #27
 8006aee:	d407      	bmi.n	8006b00 <__swsetup_r+0x30>
 8006af0:	2209      	movs	r2, #9
 8006af2:	602a      	str	r2, [r5, #0]
 8006af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006afe:	e033      	b.n	8006b68 <__swsetup_r+0x98>
 8006b00:	0758      	lsls	r0, r3, #29
 8006b02:	d512      	bpl.n	8006b2a <__swsetup_r+0x5a>
 8006b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b06:	b141      	cbz	r1, 8006b1a <__swsetup_r+0x4a>
 8006b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <__swsetup_r+0x46>
 8006b10:	4628      	mov	r0, r5
 8006b12:	f000 f8bd 	bl	8006c90 <_free_r>
 8006b16:	2300      	movs	r3, #0
 8006b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	2300      	movs	r3, #0
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	b94b      	cbnz	r3, 8006b4a <__swsetup_r+0x7a>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b40:	d003      	beq.n	8006b4a <__swsetup_r+0x7a>
 8006b42:	4621      	mov	r1, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 fd3d 	bl	80075c4 <__smakebuf_r>
 8006b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4e:	f013 0201 	ands.w	r2, r3, #1
 8006b52:	d00a      	beq.n	8006b6a <__swsetup_r+0x9a>
 8006b54:	2200      	movs	r2, #0
 8006b56:	60a2      	str	r2, [r4, #8]
 8006b58:	6962      	ldr	r2, [r4, #20]
 8006b5a:	4252      	negs	r2, r2
 8006b5c:	61a2      	str	r2, [r4, #24]
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	b942      	cbnz	r2, 8006b74 <__swsetup_r+0xa4>
 8006b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b66:	d1c5      	bne.n	8006af4 <__swsetup_r+0x24>
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	0799      	lsls	r1, r3, #30
 8006b6c:	bf58      	it	pl
 8006b6e:	6962      	ldrpl	r2, [r4, #20]
 8006b70:	60a2      	str	r2, [r4, #8]
 8006b72:	e7f4      	b.n	8006b5e <__swsetup_r+0x8e>
 8006b74:	2000      	movs	r0, #0
 8006b76:	e7f7      	b.n	8006b68 <__swsetup_r+0x98>
 8006b78:	2000001c 	.word	0x2000001c

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <_close_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d06      	ldr	r5, [pc, #24]	@ (8006ba8 <_close_r+0x1c>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7fa f997 	bl	8000eca <_close>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_close_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_close_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	20004c48 	.word	0x20004c48

08006bac <_lseek_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d07      	ldr	r5, [pc, #28]	@ (8006bcc <_lseek_r+0x20>)
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	602a      	str	r2, [r5, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f7fa f9ac 	bl	8000f18 <_lseek>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_lseek_r+0x1e>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_lseek_r+0x1e>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20004c48 	.word	0x20004c48

08006bd0 <_read_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d07      	ldr	r5, [pc, #28]	@ (8006bf0 <_read_r+0x20>)
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fa f93a 	bl	8000e58 <_read>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_read_r+0x1e>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_read_r+0x1e>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20004c48 	.word	0x20004c48

08006bf4 <_write_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4d07      	ldr	r5, [pc, #28]	@ (8006c14 <_write_r+0x20>)
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	602a      	str	r2, [r5, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f7fa f945 	bl	8000e92 <_write>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_write_r+0x1e>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_write_r+0x1e>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	20004c48 	.word	0x20004c48

08006c18 <__errno>:
 8006c18:	4b01      	ldr	r3, [pc, #4]	@ (8006c20 <__errno+0x8>)
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	2000001c 	.word	0x2000001c

08006c24 <__libc_init_array>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4d0d      	ldr	r5, [pc, #52]	@ (8006c5c <__libc_init_array+0x38>)
 8006c28:	4c0d      	ldr	r4, [pc, #52]	@ (8006c60 <__libc_init_array+0x3c>)
 8006c2a:	1b64      	subs	r4, r4, r5
 8006c2c:	10a4      	asrs	r4, r4, #2
 8006c2e:	2600      	movs	r6, #0
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	d109      	bne.n	8006c48 <__libc_init_array+0x24>
 8006c34:	4d0b      	ldr	r5, [pc, #44]	@ (8006c64 <__libc_init_array+0x40>)
 8006c36:	4c0c      	ldr	r4, [pc, #48]	@ (8006c68 <__libc_init_array+0x44>)
 8006c38:	f000 fd32 	bl	80076a0 <_init>
 8006c3c:	1b64      	subs	r4, r4, r5
 8006c3e:	10a4      	asrs	r4, r4, #2
 8006c40:	2600      	movs	r6, #0
 8006c42:	42a6      	cmp	r6, r4
 8006c44:	d105      	bne.n	8006c52 <__libc_init_array+0x2e>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4c:	4798      	blx	r3
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7ee      	b.n	8006c30 <__libc_init_array+0xc>
 8006c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c56:	4798      	blx	r3
 8006c58:	3601      	adds	r6, #1
 8006c5a:	e7f2      	b.n	8006c42 <__libc_init_array+0x1e>
 8006c5c:	0800798c 	.word	0x0800798c
 8006c60:	0800798c 	.word	0x0800798c
 8006c64:	0800798c 	.word	0x0800798c
 8006c68:	08007990 	.word	0x08007990

08006c6c <__retarget_lock_init_recursive>:
 8006c6c:	4770      	bx	lr

08006c6e <__retarget_lock_acquire_recursive>:
 8006c6e:	4770      	bx	lr

08006c70 <__retarget_lock_release_recursive>:
 8006c70:	4770      	bx	lr

08006c72 <memcpy>:
 8006c72:	440a      	add	r2, r1
 8006c74:	4291      	cmp	r1, r2
 8006c76:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006c7a:	d100      	bne.n	8006c7e <memcpy+0xc>
 8006c7c:	4770      	bx	lr
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c88:	4291      	cmp	r1, r2
 8006c8a:	d1f9      	bne.n	8006c80 <memcpy+0xe>
 8006c8c:	bd10      	pop	{r4, pc}
	...

08006c90 <_free_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4605      	mov	r5, r0
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d041      	beq.n	8006d1c <_free_r+0x8c>
 8006c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9c:	1f0c      	subs	r4, r1, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfb8      	it	lt
 8006ca2:	18e4      	addlt	r4, r4, r3
 8006ca4:	f000 f8e0 	bl	8006e68 <__malloc_lock>
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d20 <_free_r+0x90>)
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	b933      	cbnz	r3, 8006cbc <_free_r+0x2c>
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	6014      	str	r4, [r2, #0]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb8:	f000 b8dc 	b.w	8006e74 <__malloc_unlock>
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	d908      	bls.n	8006cd2 <_free_r+0x42>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	1821      	adds	r1, r4, r0
 8006cc4:	428b      	cmp	r3, r1
 8006cc6:	bf01      	itttt	eq
 8006cc8:	6819      	ldreq	r1, [r3, #0]
 8006cca:	685b      	ldreq	r3, [r3, #4]
 8006ccc:	1809      	addeq	r1, r1, r0
 8006cce:	6021      	streq	r1, [r4, #0]
 8006cd0:	e7ed      	b.n	8006cae <_free_r+0x1e>
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	b10b      	cbz	r3, 8006cdc <_free_r+0x4c>
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	d9fa      	bls.n	8006cd2 <_free_r+0x42>
 8006cdc:	6811      	ldr	r1, [r2, #0]
 8006cde:	1850      	adds	r0, r2, r1
 8006ce0:	42a0      	cmp	r0, r4
 8006ce2:	d10b      	bne.n	8006cfc <_free_r+0x6c>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	4401      	add	r1, r0
 8006ce8:	1850      	adds	r0, r2, r1
 8006cea:	4283      	cmp	r3, r0
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	d1e0      	bne.n	8006cb2 <_free_r+0x22>
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	6053      	str	r3, [r2, #4]
 8006cf6:	4408      	add	r0, r1
 8006cf8:	6010      	str	r0, [r2, #0]
 8006cfa:	e7da      	b.n	8006cb2 <_free_r+0x22>
 8006cfc:	d902      	bls.n	8006d04 <_free_r+0x74>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	e7d6      	b.n	8006cb2 <_free_r+0x22>
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	1821      	adds	r1, r4, r0
 8006d08:	428b      	cmp	r3, r1
 8006d0a:	bf04      	itt	eq
 8006d0c:	6819      	ldreq	r1, [r3, #0]
 8006d0e:	685b      	ldreq	r3, [r3, #4]
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	bf04      	itt	eq
 8006d14:	1809      	addeq	r1, r1, r0
 8006d16:	6021      	streq	r1, [r4, #0]
 8006d18:	6054      	str	r4, [r2, #4]
 8006d1a:	e7ca      	b.n	8006cb2 <_free_r+0x22>
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	20004c54 	.word	0x20004c54

08006d24 <sbrk_aligned>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4e0f      	ldr	r6, [pc, #60]	@ (8006d64 <sbrk_aligned+0x40>)
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b911      	cbnz	r1, 8006d36 <sbrk_aligned+0x12>
 8006d30:	f000 fca6 	bl	8007680 <_sbrk_r>
 8006d34:	6030      	str	r0, [r6, #0]
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 fca1 	bl	8007680 <_sbrk_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d103      	bne.n	8006d4a <sbrk_aligned+0x26>
 8006d42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006d46:	4620      	mov	r0, r4
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d0f8      	beq.n	8006d46 <sbrk_aligned+0x22>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fc92 	bl	8007680 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1f2      	bne.n	8006d46 <sbrk_aligned+0x22>
 8006d60:	e7ef      	b.n	8006d42 <sbrk_aligned+0x1e>
 8006d62:	bf00      	nop
 8006d64:	20004c50 	.word	0x20004c50

08006d68 <_malloc_r>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	1ccd      	adds	r5, r1, #3
 8006d6e:	f025 0503 	bic.w	r5, r5, #3
 8006d72:	3508      	adds	r5, #8
 8006d74:	2d0c      	cmp	r5, #12
 8006d76:	bf38      	it	cc
 8006d78:	250c      	movcc	r5, #12
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	db01      	blt.n	8006d84 <_malloc_r+0x1c>
 8006d80:	42a9      	cmp	r1, r5
 8006d82:	d904      	bls.n	8006d8e <_malloc_r+0x26>
 8006d84:	230c      	movs	r3, #12
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e64 <_malloc_r+0xfc>
 8006d92:	f000 f869 	bl	8006e68 <__malloc_lock>
 8006d96:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9a:	461c      	mov	r4, r3
 8006d9c:	bb44      	cbnz	r4, 8006df0 <_malloc_r+0x88>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff ffbf 	bl	8006d24 <sbrk_aligned>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	4604      	mov	r4, r0
 8006daa:	d158      	bne.n	8006e5e <_malloc_r+0xf6>
 8006dac:	f8d8 4000 	ldr.w	r4, [r8]
 8006db0:	4627      	mov	r7, r4
 8006db2:	2f00      	cmp	r7, #0
 8006db4:	d143      	bne.n	8006e3e <_malloc_r+0xd6>
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d04b      	beq.n	8006e52 <_malloc_r+0xea>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	eb04 0903 	add.w	r9, r4, r3
 8006dc4:	f000 fc5c 	bl	8007680 <_sbrk_r>
 8006dc8:	4581      	cmp	r9, r0
 8006dca:	d142      	bne.n	8006e52 <_malloc_r+0xea>
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	1a6d      	subs	r5, r5, r1
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffa6 	bl	8006d24 <sbrk_aligned>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d03a      	beq.n	8006e52 <_malloc_r+0xea>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	442b      	add	r3, r5
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	f8d8 3000 	ldr.w	r3, [r8]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	bb62      	cbnz	r2, 8006e44 <_malloc_r+0xdc>
 8006dea:	f8c8 7000 	str.w	r7, [r8]
 8006dee:	e00f      	b.n	8006e10 <_malloc_r+0xa8>
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	1b52      	subs	r2, r2, r5
 8006df4:	d420      	bmi.n	8006e38 <_malloc_r+0xd0>
 8006df6:	2a0b      	cmp	r2, #11
 8006df8:	d917      	bls.n	8006e2a <_malloc_r+0xc2>
 8006dfa:	1961      	adds	r1, r4, r5
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	6025      	str	r5, [r4, #0]
 8006e00:	bf18      	it	ne
 8006e02:	6059      	strne	r1, [r3, #4]
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	bf08      	it	eq
 8006e08:	f8c8 1000 	streq.w	r1, [r8]
 8006e0c:	5162      	str	r2, [r4, r5]
 8006e0e:	604b      	str	r3, [r1, #4]
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 f82f 	bl	8006e74 <__malloc_unlock>
 8006e16:	f104 000b 	add.w	r0, r4, #11
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	f020 0007 	bic.w	r0, r0, #7
 8006e20:	1ac2      	subs	r2, r0, r3
 8006e22:	bf1c      	itt	ne
 8006e24:	1a1b      	subne	r3, r3, r0
 8006e26:	50a3      	strne	r3, [r4, r2]
 8006e28:	e7af      	b.n	8006d8a <_malloc_r+0x22>
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	bf0c      	ite	eq
 8006e30:	f8c8 2000 	streq.w	r2, [r8]
 8006e34:	605a      	strne	r2, [r3, #4]
 8006e36:	e7eb      	b.n	8006e10 <_malloc_r+0xa8>
 8006e38:	4623      	mov	r3, r4
 8006e3a:	6864      	ldr	r4, [r4, #4]
 8006e3c:	e7ae      	b.n	8006d9c <_malloc_r+0x34>
 8006e3e:	463c      	mov	r4, r7
 8006e40:	687f      	ldr	r7, [r7, #4]
 8006e42:	e7b6      	b.n	8006db2 <_malloc_r+0x4a>
 8006e44:	461a      	mov	r2, r3
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d1fb      	bne.n	8006e44 <_malloc_r+0xdc>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6053      	str	r3, [r2, #4]
 8006e50:	e7de      	b.n	8006e10 <_malloc_r+0xa8>
 8006e52:	230c      	movs	r3, #12
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f80c 	bl	8006e74 <__malloc_unlock>
 8006e5c:	e794      	b.n	8006d88 <_malloc_r+0x20>
 8006e5e:	6005      	str	r5, [r0, #0]
 8006e60:	e7d6      	b.n	8006e10 <_malloc_r+0xa8>
 8006e62:	bf00      	nop
 8006e64:	20004c54 	.word	0x20004c54

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	@ (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf00 	b.w	8006c6e <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20004c4c 	.word	0x20004c4c

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff befb 	b.w	8006c70 <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20004c4c 	.word	0x20004c4c

08006e80 <__sfputc_r>:
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	b410      	push	{r4}
 8006e88:	6093      	str	r3, [r2, #8]
 8006e8a:	da08      	bge.n	8006e9e <__sfputc_r+0x1e>
 8006e8c:	6994      	ldr	r4, [r2, #24]
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	db01      	blt.n	8006e96 <__sfputc_r+0x16>
 8006e92:	290a      	cmp	r1, #10
 8006e94:	d103      	bne.n	8006e9e <__sfputc_r+0x1e>
 8006e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e9a:	f7ff bdda 	b.w	8006a52 <__swbuf_r>
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	1c58      	adds	r0, r3, #1
 8006ea2:	6010      	str	r0, [r2, #0]
 8006ea4:	7019      	strb	r1, [r3, #0]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <__sfputs_r>:
 8006eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	460f      	mov	r7, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	18d5      	adds	r5, r2, r3
 8006eb8:	42ac      	cmp	r4, r5
 8006eba:	d101      	bne.n	8006ec0 <__sfputs_r+0x12>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e007      	b.n	8006ed0 <__sfputs_r+0x22>
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff ffda 	bl	8006e80 <__sfputc_r>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d1f3      	bne.n	8006eb8 <__sfputs_r+0xa>
 8006ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed4 <_vfiprintf_r>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	460d      	mov	r5, r1
 8006eda:	b09d      	sub	sp, #116	@ 0x74
 8006edc:	4614      	mov	r4, r2
 8006ede:	4698      	mov	r8, r3
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	b118      	cbz	r0, 8006eec <_vfiprintf_r+0x18>
 8006ee4:	6a03      	ldr	r3, [r0, #32]
 8006ee6:	b90b      	cbnz	r3, 8006eec <_vfiprintf_r+0x18>
 8006ee8:	f7ff fcca 	bl	8006880 <__sinit>
 8006eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eee:	07d9      	lsls	r1, r3, #31
 8006ef0:	d405      	bmi.n	8006efe <_vfiprintf_r+0x2a>
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	059a      	lsls	r2, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_vfiprintf_r+0x2a>
 8006ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efa:	f7ff feb8 	bl	8006c6e <__retarget_lock_acquire_recursive>
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	071b      	lsls	r3, r3, #28
 8006f02:	d501      	bpl.n	8006f08 <_vfiprintf_r+0x34>
 8006f04:	692b      	ldr	r3, [r5, #16]
 8006f06:	b99b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x5c>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff fde0 	bl	8006ad0 <__swsetup_r>
 8006f10:	b170      	cbz	r0, 8006f30 <_vfiprintf_r+0x5c>
 8006f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f14:	07dc      	lsls	r4, r3, #31
 8006f16:	d504      	bpl.n	8006f22 <_vfiprintf_r+0x4e>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f1c:	b01d      	add	sp, #116	@ 0x74
 8006f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	0598      	lsls	r0, r3, #22
 8006f26:	d4f7      	bmi.n	8006f18 <_vfiprintf_r+0x44>
 8006f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f2a:	f7ff fea1 	bl	8006c70 <__retarget_lock_release_recursive>
 8006f2e:	e7f3      	b.n	8006f18 <_vfiprintf_r+0x44>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f34:	2320      	movs	r3, #32
 8006f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f3e:	2330      	movs	r3, #48	@ 0x30
 8006f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80070f0 <_vfiprintf_r+0x21c>
 8006f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f48:	f04f 0901 	mov.w	r9, #1
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	469a      	mov	sl, r3
 8006f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f54:	b10a      	cbz	r2, 8006f5a <_vfiprintf_r+0x86>
 8006f56:	2a25      	cmp	r2, #37	@ 0x25
 8006f58:	d1f9      	bne.n	8006f4e <_vfiprintf_r+0x7a>
 8006f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5e:	d00b      	beq.n	8006f78 <_vfiprintf_r+0xa4>
 8006f60:	465b      	mov	r3, fp
 8006f62:	4622      	mov	r2, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ffa1 	bl	8006eae <__sfputs_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f000 80a7 	beq.w	80070c0 <_vfiprintf_r+0x1ec>
 8006f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f74:	445a      	add	r2, fp
 8006f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f78:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 809f 	beq.w	80070c0 <_vfiprintf_r+0x1ec>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9307      	str	r3, [sp, #28]
 8006f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f9a:	4654      	mov	r4, sl
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	4853      	ldr	r0, [pc, #332]	@ (80070f0 <_vfiprintf_r+0x21c>)
 8006fa4:	f7f9 f934 	bl	8000210 <memchr>
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	b9d8      	cbnz	r0, 8006fe4 <_vfiprintf_r+0x110>
 8006fac:	06d1      	lsls	r1, r2, #27
 8006fae:	bf44      	itt	mi
 8006fb0:	2320      	movmi	r3, #32
 8006fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fb6:	0713      	lsls	r3, r2, #28
 8006fb8:	bf44      	itt	mi
 8006fba:	232b      	movmi	r3, #43	@ 0x2b
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fc6:	d015      	beq.n	8006ff4 <_vfiprintf_r+0x120>
 8006fc8:	9a07      	ldr	r2, [sp, #28]
 8006fca:	4654      	mov	r4, sl
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd8:	3b30      	subs	r3, #48	@ 0x30
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d94b      	bls.n	8007076 <_vfiprintf_r+0x1a2>
 8006fde:	b1b0      	cbz	r0, 800700e <_vfiprintf_r+0x13a>
 8006fe0:	9207      	str	r2, [sp, #28]
 8006fe2:	e014      	b.n	800700e <_vfiprintf_r+0x13a>
 8006fe4:	eba0 0308 	sub.w	r3, r0, r8
 8006fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	9304      	str	r3, [sp, #16]
 8006ff0:	46a2      	mov	sl, r4
 8006ff2:	e7d2      	b.n	8006f9a <_vfiprintf_r+0xc6>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	1d19      	adds	r1, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	9103      	str	r1, [sp, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfbb      	ittet	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	f042 0202 	orrlt.w	r2, r2, #2
 8007006:	9307      	strge	r3, [sp, #28]
 8007008:	9307      	strlt	r3, [sp, #28]
 800700a:	bfb8      	it	lt
 800700c:	9204      	strlt	r2, [sp, #16]
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b2e      	cmp	r3, #46	@ 0x2e
 8007012:	d10a      	bne.n	800702a <_vfiprintf_r+0x156>
 8007014:	7863      	ldrb	r3, [r4, #1]
 8007016:	2b2a      	cmp	r3, #42	@ 0x2a
 8007018:	d132      	bne.n	8007080 <_vfiprintf_r+0x1ac>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	9203      	str	r2, [sp, #12]
 8007022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007026:	3402      	adds	r4, #2
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007100 <_vfiprintf_r+0x22c>
 800702e:	7821      	ldrb	r1, [r4, #0]
 8007030:	2203      	movs	r2, #3
 8007032:	4650      	mov	r0, sl
 8007034:	f7f9 f8ec 	bl	8000210 <memchr>
 8007038:	b138      	cbz	r0, 800704a <_vfiprintf_r+0x176>
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	eba0 000a 	sub.w	r0, r0, sl
 8007040:	2240      	movs	r2, #64	@ 0x40
 8007042:	4082      	lsls	r2, r0
 8007044:	4313      	orrs	r3, r2
 8007046:	3401      	adds	r4, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704e:	4829      	ldr	r0, [pc, #164]	@ (80070f4 <_vfiprintf_r+0x220>)
 8007050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007054:	2206      	movs	r2, #6
 8007056:	f7f9 f8db 	bl	8000210 <memchr>
 800705a:	2800      	cmp	r0, #0
 800705c:	d03f      	beq.n	80070de <_vfiprintf_r+0x20a>
 800705e:	4b26      	ldr	r3, [pc, #152]	@ (80070f8 <_vfiprintf_r+0x224>)
 8007060:	bb1b      	cbnz	r3, 80070aa <_vfiprintf_r+0x1d6>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	3307      	adds	r3, #7
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	3308      	adds	r3, #8
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007070:	443b      	add	r3, r7
 8007072:	9309      	str	r3, [sp, #36]	@ 0x24
 8007074:	e76a      	b.n	8006f4c <_vfiprintf_r+0x78>
 8007076:	fb0c 3202 	mla	r2, ip, r2, r3
 800707a:	460c      	mov	r4, r1
 800707c:	2001      	movs	r0, #1
 800707e:	e7a8      	b.n	8006fd2 <_vfiprintf_r+0xfe>
 8007080:	2300      	movs	r3, #0
 8007082:	3401      	adds	r4, #1
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	4619      	mov	r1, r3
 8007088:	f04f 0c0a 	mov.w	ip, #10
 800708c:	4620      	mov	r0, r4
 800708e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007092:	3a30      	subs	r2, #48	@ 0x30
 8007094:	2a09      	cmp	r2, #9
 8007096:	d903      	bls.n	80070a0 <_vfiprintf_r+0x1cc>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0c6      	beq.n	800702a <_vfiprintf_r+0x156>
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	e7c4      	b.n	800702a <_vfiprintf_r+0x156>
 80070a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a4:	4604      	mov	r4, r0
 80070a6:	2301      	movs	r3, #1
 80070a8:	e7f0      	b.n	800708c <_vfiprintf_r+0x1b8>
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	462a      	mov	r2, r5
 80070b0:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <_vfiprintf_r+0x228>)
 80070b2:	a904      	add	r1, sp, #16
 80070b4:	4630      	mov	r0, r6
 80070b6:	f3af 8000 	nop.w
 80070ba:	4607      	mov	r7, r0
 80070bc:	1c78      	adds	r0, r7, #1
 80070be:	d1d6      	bne.n	800706e <_vfiprintf_r+0x19a>
 80070c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c2:	07d9      	lsls	r1, r3, #31
 80070c4:	d405      	bmi.n	80070d2 <_vfiprintf_r+0x1fe>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	059a      	lsls	r2, r3, #22
 80070ca:	d402      	bmi.n	80070d2 <_vfiprintf_r+0x1fe>
 80070cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ce:	f7ff fdcf 	bl	8006c70 <__retarget_lock_release_recursive>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	065b      	lsls	r3, r3, #25
 80070d6:	f53f af1f 	bmi.w	8006f18 <_vfiprintf_r+0x44>
 80070da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070dc:	e71e      	b.n	8006f1c <_vfiprintf_r+0x48>
 80070de:	ab03      	add	r3, sp, #12
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	462a      	mov	r2, r5
 80070e4:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <_vfiprintf_r+0x228>)
 80070e6:	a904      	add	r1, sp, #16
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 f879 	bl	80071e0 <_printf_i>
 80070ee:	e7e4      	b.n	80070ba <_vfiprintf_r+0x1e6>
 80070f0:	08007950 	.word	0x08007950
 80070f4:	0800795a 	.word	0x0800795a
 80070f8:	00000000 	.word	0x00000000
 80070fc:	08006eaf 	.word	0x08006eaf
 8007100:	08007956 	.word	0x08007956

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4698      	mov	r8, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	bfb8      	it	lt
 8007118:	4613      	movlt	r3, r2
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007120:	4607      	mov	r7, r0
 8007122:	460c      	mov	r4, r1
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc26      	bgt.n	800719a <_printf_common+0x96>
 800714c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	3b00      	subs	r3, #0
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d42b      	bmi.n	80071b4 <_printf_common+0xb0>
 800715c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007160:	4641      	mov	r1, r8
 8007162:	4638      	mov	r0, r7
 8007164:	47c8      	blx	r9
 8007166:	3001      	adds	r0, #1
 8007168:	d01e      	beq.n	80071a8 <_printf_common+0xa4>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf02      	ittt	eq
 8007176:	68e5      	ldreq	r5, [r4, #12]
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	1aed      	subeq	r5, r5, r3
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	bf0c      	ite	eq
 8007180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007184:	2500      	movne	r5, #0
 8007186:	4293      	cmp	r3, r2
 8007188:	bfc4      	itt	gt
 800718a:	1a9b      	subgt	r3, r3, r2
 800718c:	18ed      	addgt	r5, r5, r3
 800718e:	2600      	movs	r6, #0
 8007190:	341a      	adds	r4, #26
 8007192:	42b5      	cmp	r5, r6
 8007194:	d11a      	bne.n	80071cc <_printf_common+0xc8>
 8007196:	2000      	movs	r0, #0
 8007198:	e008      	b.n	80071ac <_printf_common+0xa8>
 800719a:	2301      	movs	r3, #1
 800719c:	4652      	mov	r2, sl
 800719e:	4641      	mov	r1, r8
 80071a0:	4638      	mov	r0, r7
 80071a2:	47c8      	blx	r9
 80071a4:	3001      	adds	r0, #1
 80071a6:	d103      	bne.n	80071b0 <_printf_common+0xac>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	3501      	adds	r5, #1
 80071b2:	e7c6      	b.n	8007142 <_printf_common+0x3e>
 80071b4:	18e1      	adds	r1, r4, r3
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	2030      	movs	r0, #48	@ 0x30
 80071ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071be:	4422      	add	r2, r4
 80071c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071c8:	3302      	adds	r3, #2
 80071ca:	e7c7      	b.n	800715c <_printf_common+0x58>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4622      	mov	r2, r4
 80071d0:	4641      	mov	r1, r8
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c8      	blx	r9
 80071d6:	3001      	adds	r0, #1
 80071d8:	d0e6      	beq.n	80071a8 <_printf_common+0xa4>
 80071da:	3601      	adds	r6, #1
 80071dc:	e7d9      	b.n	8007192 <_printf_common+0x8e>
	...

080071e0 <_printf_i>:
 80071e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	7e0f      	ldrb	r7, [r1, #24]
 80071e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071e8:	2f78      	cmp	r7, #120	@ 0x78
 80071ea:	4691      	mov	r9, r2
 80071ec:	4680      	mov	r8, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	469a      	mov	sl, r3
 80071f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071f6:	d807      	bhi.n	8007208 <_printf_i+0x28>
 80071f8:	2f62      	cmp	r7, #98	@ 0x62
 80071fa:	d80a      	bhi.n	8007212 <_printf_i+0x32>
 80071fc:	2f00      	cmp	r7, #0
 80071fe:	f000 80d2 	beq.w	80073a6 <_printf_i+0x1c6>
 8007202:	2f58      	cmp	r7, #88	@ 0x58
 8007204:	f000 80b9 	beq.w	800737a <_printf_i+0x19a>
 8007208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800720c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007210:	e03a      	b.n	8007288 <_printf_i+0xa8>
 8007212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007216:	2b15      	cmp	r3, #21
 8007218:	d8f6      	bhi.n	8007208 <_printf_i+0x28>
 800721a:	a101      	add	r1, pc, #4	@ (adr r1, 8007220 <_printf_i+0x40>)
 800721c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007220:	08007279 	.word	0x08007279
 8007224:	0800728d 	.word	0x0800728d
 8007228:	08007209 	.word	0x08007209
 800722c:	08007209 	.word	0x08007209
 8007230:	08007209 	.word	0x08007209
 8007234:	08007209 	.word	0x08007209
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007209 	.word	0x08007209
 8007240:	08007209 	.word	0x08007209
 8007244:	08007209 	.word	0x08007209
 8007248:	08007209 	.word	0x08007209
 800724c:	0800738d 	.word	0x0800738d
 8007250:	080072b7 	.word	0x080072b7
 8007254:	08007347 	.word	0x08007347
 8007258:	08007209 	.word	0x08007209
 800725c:	08007209 	.word	0x08007209
 8007260:	080073af 	.word	0x080073af
 8007264:	08007209 	.word	0x08007209
 8007268:	080072b7 	.word	0x080072b7
 800726c:	08007209 	.word	0x08007209
 8007270:	08007209 	.word	0x08007209
 8007274:	0800734f 	.word	0x0800734f
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6032      	str	r2, [r6, #0]
 8007280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007288:	2301      	movs	r3, #1
 800728a:	e09d      	b.n	80073c8 <_printf_i+0x1e8>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	6031      	str	r1, [r6, #0]
 8007294:	0606      	lsls	r6, r0, #24
 8007296:	d501      	bpl.n	800729c <_printf_i+0xbc>
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	e003      	b.n	80072a4 <_printf_i+0xc4>
 800729c:	0645      	lsls	r5, r0, #25
 800729e:	d5fb      	bpl.n	8007298 <_printf_i+0xb8>
 80072a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	da03      	bge.n	80072b0 <_printf_i+0xd0>
 80072a8:	232d      	movs	r3, #45	@ 0x2d
 80072aa:	426d      	negs	r5, r5
 80072ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b0:	4859      	ldr	r0, [pc, #356]	@ (8007418 <_printf_i+0x238>)
 80072b2:	230a      	movs	r3, #10
 80072b4:	e011      	b.n	80072da <_printf_i+0xfa>
 80072b6:	6821      	ldr	r1, [r4, #0]
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	0608      	lsls	r0, r1, #24
 80072bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c0:	d402      	bmi.n	80072c8 <_printf_i+0xe8>
 80072c2:	0649      	lsls	r1, r1, #25
 80072c4:	bf48      	it	mi
 80072c6:	b2ad      	uxthmi	r5, r5
 80072c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80072ca:	4853      	ldr	r0, [pc, #332]	@ (8007418 <_printf_i+0x238>)
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	bf14      	ite	ne
 80072d0:	230a      	movne	r3, #10
 80072d2:	2308      	moveq	r3, #8
 80072d4:	2100      	movs	r1, #0
 80072d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072da:	6866      	ldr	r6, [r4, #4]
 80072dc:	60a6      	str	r6, [r4, #8]
 80072de:	2e00      	cmp	r6, #0
 80072e0:	bfa2      	ittt	ge
 80072e2:	6821      	ldrge	r1, [r4, #0]
 80072e4:	f021 0104 	bicge.w	r1, r1, #4
 80072e8:	6021      	strge	r1, [r4, #0]
 80072ea:	b90d      	cbnz	r5, 80072f0 <_printf_i+0x110>
 80072ec:	2e00      	cmp	r6, #0
 80072ee:	d04b      	beq.n	8007388 <_printf_i+0x1a8>
 80072f0:	4616      	mov	r6, r2
 80072f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80072f6:	fb03 5711 	mls	r7, r3, r1, r5
 80072fa:	5dc7      	ldrb	r7, [r0, r7]
 80072fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007300:	462f      	mov	r7, r5
 8007302:	42bb      	cmp	r3, r7
 8007304:	460d      	mov	r5, r1
 8007306:	d9f4      	bls.n	80072f2 <_printf_i+0x112>
 8007308:	2b08      	cmp	r3, #8
 800730a:	d10b      	bne.n	8007324 <_printf_i+0x144>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07df      	lsls	r7, r3, #31
 8007310:	d508      	bpl.n	8007324 <_printf_i+0x144>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4299      	cmp	r1, r3
 8007318:	bfde      	ittt	le
 800731a:	2330      	movle	r3, #48	@ 0x30
 800731c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007320:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007324:	1b92      	subs	r2, r2, r6
 8007326:	6122      	str	r2, [r4, #16]
 8007328:	f8cd a000 	str.w	sl, [sp]
 800732c:	464b      	mov	r3, r9
 800732e:	aa03      	add	r2, sp, #12
 8007330:	4621      	mov	r1, r4
 8007332:	4640      	mov	r0, r8
 8007334:	f7ff fee6 	bl	8007104 <_printf_common>
 8007338:	3001      	adds	r0, #1
 800733a:	d14a      	bne.n	80073d2 <_printf_i+0x1f2>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007340:	b004      	add	sp, #16
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	f043 0320 	orr.w	r3, r3, #32
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	4833      	ldr	r0, [pc, #204]	@ (800741c <_printf_i+0x23c>)
 8007350:	2778      	movs	r7, #120	@ 0x78
 8007352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	6831      	ldr	r1, [r6, #0]
 800735a:	061f      	lsls	r7, r3, #24
 800735c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007360:	d402      	bmi.n	8007368 <_printf_i+0x188>
 8007362:	065f      	lsls	r7, r3, #25
 8007364:	bf48      	it	mi
 8007366:	b2ad      	uxthmi	r5, r5
 8007368:	6031      	str	r1, [r6, #0]
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	bf44      	itt	mi
 800736e:	f043 0320 	orrmi.w	r3, r3, #32
 8007372:	6023      	strmi	r3, [r4, #0]
 8007374:	b11d      	cbz	r5, 800737e <_printf_i+0x19e>
 8007376:	2310      	movs	r3, #16
 8007378:	e7ac      	b.n	80072d4 <_printf_i+0xf4>
 800737a:	4827      	ldr	r0, [pc, #156]	@ (8007418 <_printf_i+0x238>)
 800737c:	e7e9      	b.n	8007352 <_printf_i+0x172>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f023 0320 	bic.w	r3, r3, #32
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	e7f6      	b.n	8007376 <_printf_i+0x196>
 8007388:	4616      	mov	r6, r2
 800738a:	e7bd      	b.n	8007308 <_printf_i+0x128>
 800738c:	6833      	ldr	r3, [r6, #0]
 800738e:	6825      	ldr	r5, [r4, #0]
 8007390:	6961      	ldr	r1, [r4, #20]
 8007392:	1d18      	adds	r0, r3, #4
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	062e      	lsls	r6, r5, #24
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	d501      	bpl.n	80073a0 <_printf_i+0x1c0>
 800739c:	6019      	str	r1, [r3, #0]
 800739e:	e002      	b.n	80073a6 <_printf_i+0x1c6>
 80073a0:	0668      	lsls	r0, r5, #25
 80073a2:	d5fb      	bpl.n	800739c <_printf_i+0x1bc>
 80073a4:	8019      	strh	r1, [r3, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	4616      	mov	r6, r2
 80073ac:	e7bc      	b.n	8007328 <_printf_i+0x148>
 80073ae:	6833      	ldr	r3, [r6, #0]
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	6032      	str	r2, [r6, #0]
 80073b4:	681e      	ldr	r6, [r3, #0]
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	2100      	movs	r1, #0
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7f8 ff28 	bl	8000210 <memchr>
 80073c0:	b108      	cbz	r0, 80073c6 <_printf_i+0x1e6>
 80073c2:	1b80      	subs	r0, r0, r6
 80073c4:	6060      	str	r0, [r4, #4]
 80073c6:	6863      	ldr	r3, [r4, #4]
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	2300      	movs	r3, #0
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d0:	e7aa      	b.n	8007328 <_printf_i+0x148>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	4632      	mov	r2, r6
 80073d6:	4649      	mov	r1, r9
 80073d8:	4640      	mov	r0, r8
 80073da:	47d0      	blx	sl
 80073dc:	3001      	adds	r0, #1
 80073de:	d0ad      	beq.n	800733c <_printf_i+0x15c>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	d413      	bmi.n	800740e <_printf_i+0x22e>
 80073e6:	68e0      	ldr	r0, [r4, #12]
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	4298      	cmp	r0, r3
 80073ec:	bfb8      	it	lt
 80073ee:	4618      	movlt	r0, r3
 80073f0:	e7a6      	b.n	8007340 <_printf_i+0x160>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4632      	mov	r2, r6
 80073f6:	4649      	mov	r1, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	47d0      	blx	sl
 80073fc:	3001      	adds	r0, #1
 80073fe:	d09d      	beq.n	800733c <_printf_i+0x15c>
 8007400:	3501      	adds	r5, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	9903      	ldr	r1, [sp, #12]
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	42ab      	cmp	r3, r5
 800740a:	dcf2      	bgt.n	80073f2 <_printf_i+0x212>
 800740c:	e7eb      	b.n	80073e6 <_printf_i+0x206>
 800740e:	2500      	movs	r5, #0
 8007410:	f104 0619 	add.w	r6, r4, #25
 8007414:	e7f5      	b.n	8007402 <_printf_i+0x222>
 8007416:	bf00      	nop
 8007418:	08007961 	.word	0x08007961
 800741c:	08007972 	.word	0x08007972

08007420 <__sflush_r>:
 8007420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	0716      	lsls	r6, r2, #28
 800742a:	4605      	mov	r5, r0
 800742c:	460c      	mov	r4, r1
 800742e:	d454      	bmi.n	80074da <__sflush_r+0xba>
 8007430:	684b      	ldr	r3, [r1, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc02      	bgt.n	800743c <__sflush_r+0x1c>
 8007436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	dd48      	ble.n	80074ce <__sflush_r+0xae>
 800743c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800743e:	2e00      	cmp	r6, #0
 8007440:	d045      	beq.n	80074ce <__sflush_r+0xae>
 8007442:	2300      	movs	r3, #0
 8007444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007448:	682f      	ldr	r7, [r5, #0]
 800744a:	6a21      	ldr	r1, [r4, #32]
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	d030      	beq.n	80074b2 <__sflush_r+0x92>
 8007450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	0759      	lsls	r1, r3, #29
 8007456:	d505      	bpl.n	8007464 <__sflush_r+0x44>
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800745e:	b10b      	cbz	r3, 8007464 <__sflush_r+0x44>
 8007460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	d106      	bne.n	8007482 <__sflush_r+0x62>
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	291d      	cmp	r1, #29
 8007478:	d82b      	bhi.n	80074d2 <__sflush_r+0xb2>
 800747a:	4a2a      	ldr	r2, [pc, #168]	@ (8007524 <__sflush_r+0x104>)
 800747c:	410a      	asrs	r2, r1
 800747e:	07d6      	lsls	r6, r2, #31
 8007480:	d427      	bmi.n	80074d2 <__sflush_r+0xb2>
 8007482:	2200      	movs	r2, #0
 8007484:	6062      	str	r2, [r4, #4]
 8007486:	04d9      	lsls	r1, r3, #19
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	d504      	bpl.n	8007498 <__sflush_r+0x78>
 800748e:	1c42      	adds	r2, r0, #1
 8007490:	d101      	bne.n	8007496 <__sflush_r+0x76>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b903      	cbnz	r3, 8007498 <__sflush_r+0x78>
 8007496:	6560      	str	r0, [r4, #84]	@ 0x54
 8007498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749a:	602f      	str	r7, [r5, #0]
 800749c:	b1b9      	cbz	r1, 80074ce <__sflush_r+0xae>
 800749e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d002      	beq.n	80074ac <__sflush_r+0x8c>
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7ff fbf2 	bl	8006c90 <_free_r>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b0:	e00d      	b.n	80074ce <__sflush_r+0xae>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	4602      	mov	r2, r0
 80074ba:	1c50      	adds	r0, r2, #1
 80074bc:	d1c9      	bne.n	8007452 <__sflush_r+0x32>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0c6      	beq.n	8007452 <__sflush_r+0x32>
 80074c4:	2b1d      	cmp	r3, #29
 80074c6:	d001      	beq.n	80074cc <__sflush_r+0xac>
 80074c8:	2b16      	cmp	r3, #22
 80074ca:	d11e      	bne.n	800750a <__sflush_r+0xea>
 80074cc:	602f      	str	r7, [r5, #0]
 80074ce:	2000      	movs	r0, #0
 80074d0:	e022      	b.n	8007518 <__sflush_r+0xf8>
 80074d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d6:	b21b      	sxth	r3, r3
 80074d8:	e01b      	b.n	8007512 <__sflush_r+0xf2>
 80074da:	690f      	ldr	r7, [r1, #16]
 80074dc:	2f00      	cmp	r7, #0
 80074de:	d0f6      	beq.n	80074ce <__sflush_r+0xae>
 80074e0:	0793      	lsls	r3, r2, #30
 80074e2:	680e      	ldr	r6, [r1, #0]
 80074e4:	bf08      	it	eq
 80074e6:	694b      	ldreq	r3, [r1, #20]
 80074e8:	600f      	str	r7, [r1, #0]
 80074ea:	bf18      	it	ne
 80074ec:	2300      	movne	r3, #0
 80074ee:	eba6 0807 	sub.w	r8, r6, r7
 80074f2:	608b      	str	r3, [r1, #8]
 80074f4:	f1b8 0f00 	cmp.w	r8, #0
 80074f8:	dde9      	ble.n	80074ce <__sflush_r+0xae>
 80074fa:	6a21      	ldr	r1, [r4, #32]
 80074fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074fe:	4643      	mov	r3, r8
 8007500:	463a      	mov	r2, r7
 8007502:	4628      	mov	r0, r5
 8007504:	47b0      	blx	r6
 8007506:	2800      	cmp	r0, #0
 8007508:	dc08      	bgt.n	800751c <__sflush_r+0xfc>
 800750a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751c:	4407      	add	r7, r0
 800751e:	eba8 0800 	sub.w	r8, r8, r0
 8007522:	e7e7      	b.n	80074f4 <__sflush_r+0xd4>
 8007524:	dfbffffe 	.word	0xdfbffffe

08007528 <_fflush_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	4605      	mov	r5, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b913      	cbnz	r3, 8007538 <_fflush_r+0x10>
 8007532:	2500      	movs	r5, #0
 8007534:	4628      	mov	r0, r5
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	b118      	cbz	r0, 8007542 <_fflush_r+0x1a>
 800753a:	6a03      	ldr	r3, [r0, #32]
 800753c:	b90b      	cbnz	r3, 8007542 <_fflush_r+0x1a>
 800753e:	f7ff f99f 	bl	8006880 <__sinit>
 8007542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f3      	beq.n	8007532 <_fflush_r+0xa>
 800754a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800754c:	07d0      	lsls	r0, r2, #31
 800754e:	d404      	bmi.n	800755a <_fflush_r+0x32>
 8007550:	0599      	lsls	r1, r3, #22
 8007552:	d402      	bmi.n	800755a <_fflush_r+0x32>
 8007554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007556:	f7ff fb8a 	bl	8006c6e <__retarget_lock_acquire_recursive>
 800755a:	4628      	mov	r0, r5
 800755c:	4621      	mov	r1, r4
 800755e:	f7ff ff5f 	bl	8007420 <__sflush_r>
 8007562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007564:	07da      	lsls	r2, r3, #31
 8007566:	4605      	mov	r5, r0
 8007568:	d4e4      	bmi.n	8007534 <_fflush_r+0xc>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	059b      	lsls	r3, r3, #22
 800756e:	d4e1      	bmi.n	8007534 <_fflush_r+0xc>
 8007570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007572:	f7ff fb7d 	bl	8006c70 <__retarget_lock_release_recursive>
 8007576:	e7dd      	b.n	8007534 <_fflush_r+0xc>

08007578 <__swhatbuf_r>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	460c      	mov	r4, r1
 800757c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007580:	2900      	cmp	r1, #0
 8007582:	b096      	sub	sp, #88	@ 0x58
 8007584:	4615      	mov	r5, r2
 8007586:	461e      	mov	r6, r3
 8007588:	da0d      	bge.n	80075a6 <__swhatbuf_r+0x2e>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007590:	f04f 0100 	mov.w	r1, #0
 8007594:	bf14      	ite	ne
 8007596:	2340      	movne	r3, #64	@ 0x40
 8007598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800759c:	2000      	movs	r0, #0
 800759e:	6031      	str	r1, [r6, #0]
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	b016      	add	sp, #88	@ 0x58
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
 80075a6:	466a      	mov	r2, sp
 80075a8:	f000 f848 	bl	800763c <_fstat_r>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	dbec      	blt.n	800758a <__swhatbuf_r+0x12>
 80075b0:	9901      	ldr	r1, [sp, #4]
 80075b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075ba:	4259      	negs	r1, r3
 80075bc:	4159      	adcs	r1, r3
 80075be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075c2:	e7eb      	b.n	800759c <__swhatbuf_r+0x24>

080075c4 <__smakebuf_r>:
 80075c4:	898b      	ldrh	r3, [r1, #12]
 80075c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c8:	079d      	lsls	r5, r3, #30
 80075ca:	4606      	mov	r6, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	d507      	bpl.n	80075e0 <__smakebuf_r+0x1c>
 80075d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2301      	movs	r3, #1
 80075da:	6163      	str	r3, [r4, #20]
 80075dc:	b003      	add	sp, #12
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	ab01      	add	r3, sp, #4
 80075e2:	466a      	mov	r2, sp
 80075e4:	f7ff ffc8 	bl	8007578 <__swhatbuf_r>
 80075e8:	9f00      	ldr	r7, [sp, #0]
 80075ea:	4605      	mov	r5, r0
 80075ec:	4639      	mov	r1, r7
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff fbba 	bl	8006d68 <_malloc_r>
 80075f4:	b948      	cbnz	r0, 800760a <__smakebuf_r+0x46>
 80075f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fa:	059a      	lsls	r2, r3, #22
 80075fc:	d4ee      	bmi.n	80075dc <__smakebuf_r+0x18>
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0302 	orr.w	r3, r3, #2
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	e7e2      	b.n	80075d0 <__smakebuf_r+0xc>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	6020      	str	r0, [r4, #0]
 800760e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007612:	81a3      	strh	r3, [r4, #12]
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800761a:	b15b      	cbz	r3, 8007634 <__smakebuf_r+0x70>
 800761c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007620:	4630      	mov	r0, r6
 8007622:	f000 f81d 	bl	8007660 <_isatty_r>
 8007626:	b128      	cbz	r0, 8007634 <__smakebuf_r+0x70>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	431d      	orrs	r5, r3
 8007638:	81a5      	strh	r5, [r4, #12]
 800763a:	e7cf      	b.n	80075dc <__smakebuf_r+0x18>

0800763c <_fstat_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	@ (800765c <_fstat_r+0x20>)
 8007640:	2300      	movs	r3, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f7f9 fc4a 	bl	8000ee2 <_fstat>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d102      	bne.n	8007658 <_fstat_r+0x1c>
 8007652:	682b      	ldr	r3, [r5, #0]
 8007654:	b103      	cbz	r3, 8007658 <_fstat_r+0x1c>
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	bf00      	nop
 800765c:	20004c48 	.word	0x20004c48

08007660 <_isatty_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d06      	ldr	r5, [pc, #24]	@ (800767c <_isatty_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7f9 fc49 	bl	8000f02 <_isatty>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_isatty_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_isatty_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20004c48 	.word	0x20004c48

08007680 <_sbrk_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d06      	ldr	r5, [pc, #24]	@ (800769c <_sbrk_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	f7f9 fc52 	bl	8000f34 <_sbrk>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_sbrk_r+0x1a>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_sbrk_r+0x1a>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20004c48 	.word	0x20004c48

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
