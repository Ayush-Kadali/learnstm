
Basic Prototype RTOS try 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009498  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009668  08009668  0000a668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca8  08009ca8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb0  08009cb0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cb4  08009cb4  0000acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009cb8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b84  200001d8  08009e90  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d5c  08009e90  0000bd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012832  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d16  00000000  00000000  0001da3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00020750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0e  00000000  00000000  00021710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000446d  00000000  00000000  0002231e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ba  00000000  00000000  0002678b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d12  00000000  00000000  00037b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  0010c89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00111ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009650 	.word	0x08009650

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009650 	.word	0x08009650

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ee0:	1d39      	adds	r1, r7, #4
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <__io_putchar+0x20>)
 8000eea:	f001 fed9 	bl	8002ca0 <HAL_UART_Transmit>
    return ch;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200001f4 	.word	0x200001f4

08000efc <DebugPrint>:


void DebugPrint(const char* message) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff f9d3 	bl	80002b0 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	2364      	movs	r3, #100	@ 0x64
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <DebugPrint+0x24>)
 8000f14:	f001 fec4 	bl	8002ca0 <HAL_UART_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200001f4 	.word	0x200001f4

08000f24 <CheckSystemErrors>:

void SimulateSDCardWrite(const char* data) {
    printf("SD Card Write: %s", data);
}

ErrorFlags CheckSystemErrors(void) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
    ErrorFlags flags = E_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	80fb      	strh	r3, [r7, #6]

    // Check various error conditions
    if(systemData.voltage < 3.3f) flags |= E_BATT;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <CheckSystemErrors+0x34>)
 8000f30:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f34:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f5c <CheckSystemErrors+0x38>
 8000f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	d503      	bpl.n	8000f4a <CheckSystemErrors+0x26>
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	80fb      	strh	r3, [r7, #6]
    // Add other error checks

    return flags;
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	2000025c 	.word	0x2000025c
 8000f5c:	40533333 	.word	0x40533333

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fd46 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f892 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 f928 	bl	80011c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f70:	f000 f8fc 	bl	800116c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f74:	f002 fa84 	bl	8003480 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of systemDataMutex */
  systemDataMutexHandle = osMutexNew(&systemDataMutex_attributes);
 8000f78:	4830      	ldr	r0, [pc, #192]	@ (800103c <main+0xdc>)
 8000f7a:	f002 fbba 	bl	80036f2 <osMutexNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <main+0xe0>)
 8000f82:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  if (systemDataMutexHandle == NULL) {
 8000f84:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <main+0xe0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <main+0x30>
    Error_Handler();
 8000f8c:	f000 fb8e 	bl	80016ac <Error_Handler>
  }
  memset(&systemData, 0, sizeof(SystemData));
 8000f90:	225c      	movs	r2, #92	@ 0x5c
 8000f92:	2100      	movs	r1, #0
 8000f94:	482b      	ldr	r0, [pc, #172]	@ (8001044 <main+0xe4>)
 8000f96:	f006 fa90 	bl	80074ba <memset>
  systemData.currentState = STATE_IDLE;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <main+0xe4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fa0:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <main+0xe8>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4829      	ldr	r0, [pc, #164]	@ (800104c <main+0xec>)
 8000fa6:	f002 faca 	bl	800353e <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a28      	ldr	r2, [pc, #160]	@ (8001050 <main+0xf0>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of telemetryTask */
  telemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &telemetryTask_attributes);
 8000fb0:	4a28      	ldr	r2, [pc, #160]	@ (8001054 <main+0xf4>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4828      	ldr	r0, [pc, #160]	@ (8001058 <main+0xf8>)
 8000fb6:	f002 fac2 	bl	800353e <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <main+0xfc>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(SensorTask, NULL, &sensorTask_attributes);
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <main+0x100>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4827      	ldr	r0, [pc, #156]	@ (8001064 <main+0x104>)
 8000fc6:	f002 faba 	bl	800353e <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a26      	ldr	r2, [pc, #152]	@ (8001068 <main+0x108>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of stateManagerTas */
  stateManagerTaskHandle = osThreadNew(StateManagerTask, NULL, &stateManagerTask_attributes);
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <main+0x10c>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4826      	ldr	r0, [pc, #152]	@ (8001070 <main+0x110>)
 8000fd6:	f002 fab2 	bl	800353e <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <main+0x114>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of errorMonitorTas */
  errorMonitorTaskHandle = osThreadNew(ErrorMonitorTask, NULL, &errorMonitorTask_attributes);
 8000fe0:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <main+0x118>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4825      	ldr	r0, [pc, #148]	@ (800107c <main+0x11c>)
 8000fe6:	f002 faaa 	bl	800353e <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a24      	ldr	r2, [pc, #144]	@ (8001080 <main+0x120>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of flashManagerTas */
  flashManagerTaskHandle = osThreadNew(FlashManagerTask, NULL, &flashManagerTask_attributes);
 8000ff0:	4a24      	ldr	r2, [pc, #144]	@ (8001084 <main+0x124>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4824      	ldr	r0, [pc, #144]	@ (8001088 <main+0x128>)
 8000ff6:	f002 faa2 	bl	800353e <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a23      	ldr	r2, [pc, #140]	@ (800108c <main+0x12c>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if (!defaultTaskHandle || !telemetryTaskHandle || !sensorTaskHandle ||
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <main+0xf0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <main+0xd0>
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <main+0xfc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00f      	beq.n	8001030 <main+0xd0>
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <main+0x108>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <main+0xd0>
      !stateManagerTaskHandle || !errorMonitorTaskHandle || !flashManagerTaskHandle) {
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <main+0x114>)
 800101a:	681b      	ldr	r3, [r3, #0]
  if (!defaultTaskHandle || !telemetryTaskHandle || !sensorTaskHandle ||
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <main+0xd0>
      !stateManagerTaskHandle || !errorMonitorTaskHandle || !flashManagerTaskHandle) {
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <main+0x120>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <main+0xd0>
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <main+0x12c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <main+0xd4>
    Error_Handler();
 8001030:	f000 fb3c 	bl	80016ac <Error_Handler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001034:	f002 fa48 	bl	80034c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <main+0xd8>
 800103c:	08009910 	.word	0x08009910
 8001040:	20000254 	.word	0x20000254
 8001044:	2000025c 	.word	0x2000025c
 8001048:	08009838 	.word	0x08009838
 800104c:	0800129d 	.word	0x0800129d
 8001050:	2000023c 	.word	0x2000023c
 8001054:	0800985c 	.word	0x0800985c
 8001058:	080012ad 	.word	0x080012ad
 800105c:	20000240 	.word	0x20000240
 8001060:	08009880 	.word	0x08009880
 8001064:	08001481 	.word	0x08001481
 8001068:	20000244 	.word	0x20000244
 800106c:	080098a4 	.word	0x080098a4
 8001070:	0800151d 	.word	0x0800151d
 8001074:	20000248 	.word	0x20000248
 8001078:	080098c8 	.word	0x080098c8
 800107c:	0800163d 	.word	0x0800163d
 8001080:	2000024c 	.word	0x2000024c
 8001084:	080098ec 	.word	0x080098ec
 8001088:	0800167d 	.word	0x0800167d
 800108c:	20000250 	.word	0x20000250

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2234      	movs	r2, #52	@ 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fa0b 	bl	80074ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <SystemClock_Config+0xd4>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a29      	ldr	r2, [pc, #164]	@ (8001164 <SystemClock_Config+0xd4>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <SystemClock_Config+0xd4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <SystemClock_Config+0xd8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010dc:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <SystemClock_Config+0xd8>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <SystemClock_Config+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001108:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800110c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800110e:	2304      	movs	r3, #4
 8001110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fad0 	bl	80026c4 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800112a:	f000 fabf 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ff70 	bl	8002030 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001156:	f000 faa9 	bl	80016ac <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	@ 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f001 fd2c 	bl	8002c00 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 fa7d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001f4 	.word	0x200001f4
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a2c      	ldr	r2, [pc, #176]	@ (8001290 <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <MX_GPIO_Init+0xd0>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_GPIO_Init+0xd0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2120      	movs	r1, #32
 800124a:	4812      	ldr	r0, [pc, #72]	@ (8001294 <MX_GPIO_Init+0xd4>)
 800124c:	f000 fed6 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001256:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	@ (8001298 <MX_GPIO_Init+0xd8>)
 8001268:	f000 fd1c 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126c:	2320      	movs	r3, #32
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4804      	ldr	r0, [pc, #16]	@ (8001294 <MX_GPIO_Init+0xd4>)
 8001284:	f000 fd0e 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020800 	.word	0x40020800

0800129c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 f9dc 	bl	8003662 <osDelay>
 80012aa:	e7fb      	b.n	80012a4 <StartDefaultTask+0x8>

080012ac <TelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TelemetryTask */
void TelemetryTask(void *argument)
{
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	b0f5      	sub	sp, #468	@ 0x1d4
 80012b2:	af1e      	add	r7, sp, #120	@ 0x78
 80012b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012bc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN TelemetryTask */
	  char telemString[MAX_TELEM_LENGTH];
	  uint32_t last_wake_time = osKernelGetTickCount();
 80012be:	f002 f929 	bl	8003514 <osKernelGetTickCount>
 80012c2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

	  DebugPrint("Telemetry task started\r\n");
 80012c6:	4868      	ldr	r0, [pc, #416]	@ (8001468 <TelemetryTask+0x1bc>)
 80012c8:	f7ff fe18 	bl	8000efc <DebugPrint>

  /* Infinite loop */
  for(;;)
  {
	    osStatus_t status = osMutexAcquire(systemDataMutexHandle, 100);
 80012cc:	4b67      	ldr	r3, [pc, #412]	@ (800146c <TelemetryTask+0x1c0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2164      	movs	r1, #100	@ 0x64
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fa93 	bl	80037fe <osMutexAcquire>
 80012d8:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
	    if (status == osOK) {
 80012dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 80b6 	bne.w	8001452 <TelemetryTask+0x1a6>
	      // Format telemetry string
	      snprintf(telemString, MAX_TELEM_LENGTH,
 80012e6:	4b62      	ldr	r3, [pc, #392]	@ (8001470 <TelemetryTask+0x1c4>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80012ec:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <TelemetryTask+0x1c4>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	647a      	str	r2, [r7, #68]	@ 0x44
	              "#%s,%lu,%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%.2f,%d,%.2f,%.2f,%d,%.2f,%u$\r\n",
	              TEAM_ID,
	              systemData.missionTime,
	              systemData.packetCount,
	              systemData.altitude,
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <TelemetryTask+0x1c4>)
 80012f4:	691b      	ldr	r3, [r3, #16]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f946 	bl	8000588 <__aeabi_f2d>
 80012fc:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
	              systemData.pressure,
 8001300:	4b5b      	ldr	r3, [pc, #364]	@ (8001470 <TelemetryTask+0x1c4>)
 8001302:	695b      	ldr	r3, [r3, #20]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f93f 	bl	8000588 <__aeabi_f2d>
 800130a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	              systemData.tempAB,
 800130e:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <TelemetryTask+0x1c4>)
 8001310:	699b      	ldr	r3, [r3, #24]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f938 	bl	8000588 <__aeabi_f2d>
 8001318:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	              systemData.voltage,
 800131c:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <TelemetryTask+0x1c4>)
 800131e:	69db      	ldr	r3, [r3, #28]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f931 	bl	8000588 <__aeabi_f2d>
 8001326:	e9c7 0108 	strd	r0, r1, [r7, #32]
	              systemData.gnssTime,
 800132a:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <TelemetryTask+0x1c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f92a 	bl	8000588 <__aeabi_f2d>
 8001334:	e9c7 0106 	strd	r0, r1, [r7, #24]
	              systemData.gnssLat,
 8001338:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <TelemetryTask+0x1c4>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f923 	bl	8000588 <__aeabi_f2d>
 8001342:	e9c7 0104 	strd	r0, r1, [r7, #16]
	              systemData.gnssLong,
 8001346:	4b4a      	ldr	r3, [pc, #296]	@ (8001470 <TelemetryTask+0x1c4>)
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f91c 	bl	8000588 <__aeabi_f2d>
 8001350:	e9c7 0102 	strd	r0, r1, [r7, #8]
	              systemData.gnssAlt,
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <TelemetryTask+0x1c4>)
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f915 	bl	8000588 <__aeabi_f2d>
 800135e:	4682      	mov	sl, r0
 8001360:	468b      	mov	fp, r1
	              systemData.gnssSats,
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <TelemetryTask+0x1c4>)
 8001364:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001368:	643b      	str	r3, [r7, #64]	@ 0x40
	              systemData.accelData[0],
 800136a:	4b41      	ldr	r3, [pc, #260]	@ (8001470 <TelemetryTask+0x1c4>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f90a 	bl	8000588 <__aeabi_f2d>
 8001374:	4680      	mov	r8, r0
 8001376:	4689      	mov	r9, r1
	              systemData.gyroData[0],
 8001378:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <TelemetryTask+0x1c4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f903 	bl	8000588 <__aeabi_f2d>
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
	              systemData.currentState,
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <TelemetryTask+0x1c4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800138a:	607b      	str	r3, [r7, #4]
	              systemData.tempMB,
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <TelemetryTask+0x1c4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	      snprintf(telemString, MAX_TELEM_LENGTH,
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8f9 	bl	8000588 <__aeabi_f2d>
	              systemData.errorFlags);
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <TelemetryTask+0x1c4>)
 8001398:	899b      	ldrh	r3, [r3, #12]
	      snprintf(telemString, MAX_TELEM_LENGTH,
 800139a:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800139e:	931c      	str	r3, [sp, #112]	@ 0x70
 80013a0:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	9118      	str	r1, [sp, #96]	@ 0x60
 80013a8:	e9cd 4516 	strd	r4, r5, [sp, #88]	@ 0x58
 80013ac:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 80013b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013b2:	9112      	str	r1, [sp, #72]	@ 0x48
 80013b4:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 80013b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80013bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80013c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80013c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80013c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80013cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80013d0:	ed97 7b08 	vldr	d7, [r7, #32]
 80013d4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80013d8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80013dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80013e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80013e8:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80013ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80013f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013f2:	9201      	str	r2, [sp, #4]
 80013f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <TelemetryTask+0x1c8>)
 80013fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <TelemetryTask+0x1cc>)
 80013fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001400:	4630      	mov	r0, r6
 8001402:	f005 ffe3 	bl	80073cc <sniprintf>

	      // Send via UART with error checking
	      if (HAL_UART_Transmit(&huart2, (uint8_t*)telemString, strlen(telemString), 100) != HAL_OK) {
 8001406:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe ff50 	bl	80002b0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	4818      	ldr	r0, [pc, #96]	@ (800147c <TelemetryTask+0x1d0>)
 800141c:	f001 fc40 	bl	8002ca0 <HAL_UART_Transmit>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <TelemetryTask+0x188>
	        systemData.errorFlags |= E_COMM_DEL;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <TelemetryTask+0x1c4>)
 8001428:	899b      	ldrh	r3, [r3, #12]
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <TelemetryTask+0x1c4>)
 8001432:	819a      	strh	r2, [r3, #12]
	      }

	      systemData.packetCount++;
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <TelemetryTask+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <TelemetryTask+0x1c4>)
 800143c:	6053      	str	r3, [r2, #4]
	      systemData.missionTime = HAL_GetTick();
 800143e:	f000 fb3f 	bl	8001ac0 <HAL_GetTick>
 8001442:	4603      	mov	r3, r0
 8001444:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <TelemetryTask+0x1c4>)
 8001446:	6093      	str	r3, [r2, #8]

	      osMutexRelease(systemDataMutexHandle);
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <TelemetryTask+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fa21 	bl	8003894 <osMutexRelease>
	    }

	    // Use absolute timing for consistent period
	    osDelayUntil(last_wake_time + TELEM_RATE_MS);
 8001452:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001456:	3364      	adds	r3, #100	@ 0x64
 8001458:	4618      	mov	r0, r3
 800145a:	f002 f91d 	bl	8003698 <osDelayUntil>
	    last_wake_time = osKernelGetTickCount();
 800145e:	f002 f859 	bl	8003514 <osKernelGetTickCount>
 8001462:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
  {
 8001466:	e731      	b.n	80012cc <TelemetryTask+0x20>
 8001468:	08009708 	.word	0x08009708
 800146c:	20000254 	.word	0x20000254
 8001470:	2000025c 	.word	0x2000025c
 8001474:	08009724 	.word	0x08009724
 8001478:	08009734 	.word	0x08009734
 800147c:	200001f4 	.word	0x200001f4

08001480 <SensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorTask */
void SensorTask(void *argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorTask */
	  uint32_t last_wake_time = osKernelGetTickCount();
 8001488:	f002 f844 	bl	8003514 <osKernelGetTickCount>
 800148c:	60f8      	str	r0, [r7, #12]

	  DebugPrint("Sensor task started\r\n");
 800148e:	481c      	ldr	r0, [pc, #112]	@ (8001500 <SensorTask+0x80>)
 8001490:	f7ff fd34 	bl	8000efc <DebugPrint>

  /* Infinite loop */
  for(;;)
  {
	    osStatus_t status = osMutexAcquire(systemDataMutexHandle, 50);
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <SensorTask+0x84>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2132      	movs	r1, #50	@ 0x32
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f9af 	bl	80037fe <osMutexAcquire>
 80014a0:	60b8      	str	r0, [r7, #8]
	    if (status == osOK) {
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d122      	bne.n	80014ee <SensorTask+0x6e>
	      // Simulate sensor readings
	      systemData.altitude += 0.1f;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <SensorTask+0x88>)
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800150c <SensorTask+0x8c>
 80014b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <SensorTask+0x88>)
 80014b8:	edc3 7a04 	vstr	s15, [r3, #16]
	      systemData.pressure = 101325.0f - (systemData.altitude * 12.0f);
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <SensorTask+0x88>)
 80014be:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c2:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001510 <SensorTask+0x90>
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <SensorTask+0x88>)
 80014d4:	edc3 7a05 	vstr	s15, [r3, #20]
	      systemData.tempAB = 25.0f;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <SensorTask+0x88>)
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <SensorTask+0x94>)
 80014dc:	619a      	str	r2, [r3, #24]
	      systemData.voltage = 3.7f; // Simulate battery voltage
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <SensorTask+0x88>)
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <SensorTask+0x98>)
 80014e2:	61da      	str	r2, [r3, #28]

	      osMutexRelease(systemDataMutexHandle);
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <SensorTask+0x84>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f9d3 	bl	8003894 <osMutexRelease>
	    }

	    // Use absolute timing
	    osDelayUntil(last_wake_time + 10);  // 100Hz
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	330a      	adds	r3, #10
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f8d0 	bl	8003698 <osDelayUntil>
	    last_wake_time = osKernelGetTickCount();
 80014f8:	f002 f80c 	bl	8003514 <osKernelGetTickCount>
 80014fc:	60f8      	str	r0, [r7, #12]
  {
 80014fe:	e7c9      	b.n	8001494 <SensorTask+0x14>
 8001500:	08009784 	.word	0x08009784
 8001504:	20000254 	.word	0x20000254
 8001508:	2000025c 	.word	0x2000025c
 800150c:	3dcccccd 	.word	0x3dcccccd
 8001510:	47c5e680 	.word	0x47c5e680
 8001514:	41c80000 	.word	0x41c80000
 8001518:	406ccccd 	.word	0x406ccccd

0800151c <StateManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateManagerTask */
void StateManagerTask(void *argument)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b098      	sub	sp, #96	@ 0x60
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StateManagerTask */
    DebugPrint("State manager task started\r\n");
 8001524:	483f      	ldr	r0, [pc, #252]	@ (8001624 <StateManagerTask+0x108>)
 8001526:	f7ff fce9 	bl	8000efc <DebugPrint>

    const char* stateNames[] = {
 800152a:	4b3f      	ldr	r3, [pc, #252]	@ (8001628 <StateManagerTask+0x10c>)
 800152c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	e895 0003 	ldmia.w	r5, {r0, r1}
 800153a:	e884 0003 	stmia.w	r4, {r0, r1}
    };

  /* Infinite loop */
  for(;;)
  {
      if (osMutexAcquire(systemDataMutex, 100) == osOK) {
 800153e:	4b3b      	ldr	r3, [pc, #236]	@ (800162c <StateManagerTask+0x110>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2164      	movs	r1, #100	@ 0x64
 8001544:	4618      	mov	r0, r3
 8001546:	f002 f95a 	bl	80037fe <osMutexAcquire>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d165      	bne.n	800161c <StateManagerTask+0x100>
          // Check button press with debouncing
          if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001554:	4836      	ldr	r0, [pc, #216]	@ (8001630 <StateManagerTask+0x114>)
 8001556:	f000 fd39 	bl	8001fcc <HAL_GPIO_ReadPin>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d158      	bne.n	8001612 <StateManagerTask+0xf6>
              uint32_t currentTime = HAL_GetTick();
 8001560:	f000 faae 	bl	8001ac0 <HAL_GetTick>
 8001564:	65b8      	str	r0, [r7, #88]	@ 0x58

              if (currentTime - systemData.lastButtonPress > BUTTON_DEBOUNCE_MS) {
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <StateManagerTask+0x118>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001572:	d94e      	bls.n	8001612 <StateManagerTask+0xf6>
                  SystemState nextState = systemData.currentState;
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <StateManagerTask+0x118>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

                  // State transition logic
                  switch(systemData.currentState) {
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <StateManagerTask+0x118>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d827      	bhi.n	80015d4 <StateManagerTask+0xb8>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <StateManagerTask+0x70>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015a5 	.word	0x080015a5
 8001590:	080015ad 	.word	0x080015ad
 8001594:	080015b5 	.word	0x080015b5
 8001598:	080015bd 	.word	0x080015bd
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015cd 	.word	0x080015cd
                      case STATE_IDLE:
                          nextState = STATE_ARMED;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015aa:	e013      	b.n	80015d4 <StateManagerTask+0xb8>
                      case STATE_ARMED:
                          nextState = STATE_LAUNCH;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015b2:	e00f      	b.n	80015d4 <StateManagerTask+0xb8>
                      case STATE_LAUNCH:
                          nextState = STATE_ASCENT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015ba:	e00b      	b.n	80015d4 <StateManagerTask+0xb8>
                      case STATE_ASCENT:
                          nextState = STATE_DESCENT;
 80015bc:	2304      	movs	r3, #4
 80015be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015c2:	e007      	b.n	80015d4 <StateManagerTask+0xb8>
                      case STATE_DESCENT:
                          nextState = STATE_RECOVERY;
 80015c4:	2305      	movs	r3, #5
 80015c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015ca:	e003      	b.n	80015d4 <StateManagerTask+0xb8>
                      case STATE_RECOVERY:
                          nextState = STATE_IDLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                          break;
 80015d2:	bf00      	nop
                  }

                  if (nextState != systemData.currentState) {
 80015d4:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <StateManagerTask+0x118>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80015dc:	429a      	cmp	r2, r3
 80015de:	d015      	beq.n	800160c <StateManagerTask+0xf0>
                      char stateMsg[50];
                      snprintf(stateMsg, sizeof(stateMsg),
 80015e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	3360      	adds	r3, #96	@ 0x60
 80015e8:	443b      	add	r3, r7
 80015ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80015ee:	f107 000c 	add.w	r0, r7, #12
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <StateManagerTask+0x11c>)
 80015f4:	2132      	movs	r1, #50	@ 0x32
 80015f6:	f005 fee9 	bl	80073cc <sniprintf>
                              "State changed to: %s\r\n",
                              stateNames[nextState]);
                      DebugPrint(stateMsg);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fc7c 	bl	8000efc <DebugPrint>
                      systemData.currentState = nextState;
 8001604:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <StateManagerTask+0x118>)
 8001606:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800160a:	7013      	strb	r3, [r2, #0]
                  }

                  systemData.lastButtonPress = currentTime;
 800160c:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <StateManagerTask+0x118>)
 800160e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001610:	6593      	str	r3, [r2, #88]	@ 0x58
              }
          }

          osMutexRelease(systemDataMutex);
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <StateManagerTask+0x110>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 f93c 	bl	8003894 <osMutexRelease>
      }
      osDelay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f002 f820 	bl	8003662 <osDelay>
      if (osMutexAcquire(systemDataMutex, 100) == osOK) {
 8001622:	e78c      	b.n	800153e <StateManagerTask+0x22>
 8001624:	0800979c 	.word	0x0800979c
 8001628:	08009808 	.word	0x08009808
 800162c:	20000258 	.word	0x20000258
 8001630:	40020800 	.word	0x40020800
 8001634:	2000025c 	.word	0x2000025c
 8001638:	080097bc 	.word	0x080097bc

0800163c <ErrorMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorMonitorTask */
void ErrorMonitorTask(void *argument)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorMonitorTask */
  /* Infinite loop */
  for(;;)
  {
      osMutexAcquire(systemDataMutex, osWaitForever);
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <ErrorMonitorTask+0x38>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164c:	4618      	mov	r0, r3
 800164e:	f002 f8d6 	bl	80037fe <osMutexAcquire>
      systemData.errorFlags = CheckSystemErrors();
 8001652:	f7ff fc67 	bl	8000f24 <CheckSystemErrors>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <ErrorMonitorTask+0x3c>)
 800165c:	819a      	strh	r2, [r3, #12]
      osMutexRelease(systemDataMutex);
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <ErrorMonitorTask+0x38>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f916 	bl	8003894 <osMutexRelease>

      osDelay(100);  // Check errors every 100ms
 8001668:	2064      	movs	r0, #100	@ 0x64
 800166a:	f001 fffa 	bl	8003662 <osDelay>
      osMutexAcquire(systemDataMutex, osWaitForever);
 800166e:	bf00      	nop
 8001670:	e7e8      	b.n	8001644 <ErrorMonitorTask+0x8>
 8001672:	bf00      	nop
 8001674:	20000258 	.word	0x20000258
 8001678:	2000025c 	.word	0x2000025c

0800167c <FlashManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashManagerTask */
void FlashManagerTask(void *argument)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashManagerTask */
  /* Infinite loop */
  for(;;)
  {
      osMutexAcquire(systemDataMutex, osWaitForever);
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <FlashManagerTask+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800168c:	4618      	mov	r0, r3
 800168e:	f002 f8b6 	bl	80037fe <osMutexAcquire>
//      SaveToFlash();  // Save critical data periodically
      osMutexRelease(systemDataMutex);
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <FlashManagerTask+0x2c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f8fc 	bl	8003894 <osMutexRelease>

      osDelay(FLASH_SAVE_INTERVAL_MS);
 800169c:	f241 3088 	movw	r0, #5000	@ 0x1388
 80016a0:	f001 ffdf 	bl	8003662 <osDelay>
      osMutexAcquire(systemDataMutex, osWaitForever);
 80016a4:	bf00      	nop
 80016a6:	e7ed      	b.n	8001684 <FlashManagerTask+0x8>
 80016a8:	20000258 	.word	0x20000258

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <Error_Handler+0x8>

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_MspInit+0x54>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	4a11      	ldr	r2, [pc, #68]	@ (800170c <HAL_MspInit+0x54>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_MspInit+0x54>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_MspInit+0x54>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_MspInit+0x54>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_MspInit+0x54>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	f06f 0001 	mvn.w	r0, #1
 80016fe:	f000 faa8 	bl	8001c52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_UART_MspInit+0x88>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176a:	230c      	movs	r3, #12
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <HAL_UART_MspInit+0x8c>)
 8001786:	f000 fa8d 	bl	8001ca4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004400 	.word	0x40004400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f95d 	bl	8001a98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017de:	f003 ff61 	bl	80056a4 <xTaskGetSchedulerState>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017e8:	f004 fe56 	bl	8006498 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	f005 fea9 	bl	8007560 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <_exit+0x12>

08001836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e00a      	b.n	800185e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001848:	f3af 8000 	nop.w
 800184c:	4601      	mov	r1, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbf0      	blt.n	8001848 <_read+0x12>
  }

  return len;
 8001866:	687b      	ldr	r3, [r7, #4]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e009      	b.n	8001896 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb24 	bl	8000ed8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf1      	blt.n	8001882 <_write+0x12>
  }
  return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_close>:

int _close(int file)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d0:	605a      	str	r2, [r3, #4]
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_isatty>:

int _isatty(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f005 fe0e 	bl	8007560 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20020000 	.word	0x20020000
 8001970:	00000400 	.word	0x00000400
 8001974:	200002b8 	.word	0x200002b8
 8001978:	20004d60 	.word	0x20004d60

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019a4:	f7ff ffea 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f005 fdcd 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fac5 	bl	8000f60 <main>
  bx  lr    
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019e4:	08009cb8 	.word	0x08009cb8
  ldr r2, =_sbss
 80019e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019ec:	20004d5c 	.word	0x20004d5c

080019f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <HAL_Init+0x40>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_Init+0x40>)
 8001a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_Init+0x40>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f90d 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fe46 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f917 	bl	8001c8a <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a74:	f000 f8ed 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	200002bc 	.word	0x200002bc

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200002bc 	.word	0x200002bc

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	@ (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff47 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5c 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb0 	bl	8001bf8 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e165      	b.n	8001f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8154 	bne.w	8001f86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80ae 	beq.w	8001f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <HAL_GPIO_Init+0x304>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fac <HAL_GPIO_Init+0x308>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x21a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x216>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb4 <HAL_GPIO_Init+0x310>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x212>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb8 <HAL_GPIO_Init+0x314>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <HAL_GPIO_Init+0x318>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x20a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc0 <HAL_GPIO_Init+0x31c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x206>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	@ (8001fc4 <HAL_GPIO_Init+0x320>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x202>
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x21c>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed0:	4935      	ldr	r1, [pc, #212]	@ (8001fa8 <HAL_GPIO_Init+0x304>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a31      	ldr	r2, [pc, #196]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a26      	ldr	r2, [pc, #152]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f32:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f56:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f80:	4a11      	ldr	r2, [pc, #68]	@ (8001fc8 <HAL_GPIO_Init+0x324>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b0f      	cmp	r3, #15
 8001f90:	f67f ae96 	bls.w	8001cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e001      	b.n	8001fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0cc      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b68      	ldr	r3, [pc, #416]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d90c      	bls.n	800206c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a58      	ldr	r2, [pc, #352]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800208e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a52      	ldr	r2, [pc, #328]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d044      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d119      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e067      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4934      	ldr	r1, [pc, #208]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff fcce 	bl	8001ac0 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff fcca 	bl	8001ac0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d20c      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f855 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc2e 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08009920 	.word	0x08009920
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08009930 	.word	0x08009930

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08009930 	.word	0x08009930

08002264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002268:	b0ae      	sub	sp, #184	@ 0xb8
 800226a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228a:	4bcb      	ldr	r3, [pc, #812]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b0c      	cmp	r3, #12
 8002294:	f200 8206 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x440>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022d5 	.word	0x080022d5
 80022a4:	080026a5 	.word	0x080026a5
 80022a8:	080026a5 	.word	0x080026a5
 80022ac:	080026a5 	.word	0x080026a5
 80022b0:	080022dd 	.word	0x080022dd
 80022b4:	080026a5 	.word	0x080026a5
 80022b8:	080026a5 	.word	0x080026a5
 80022bc:	080026a5 	.word	0x080026a5
 80022c0:	080022e5 	.word	0x080022e5
 80022c4:	080026a5 	.word	0x080026a5
 80022c8:	080026a5 	.word	0x080026a5
 80022cc:	080026a5 	.word	0x080026a5
 80022d0:	080024d5 	.word	0x080024d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4bb9      	ldr	r3, [pc, #740]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x358>)
 80022d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022da:	e1e7      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4bb8      	ldr	r3, [pc, #736]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022e2:	e1e3      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e4:	4bb4      	ldr	r3, [pc, #720]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f0:	4bb1      	ldr	r3, [pc, #708]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d071      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fc:	4bae      	ldr	r3, [pc, #696]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	2200      	movs	r2, #0
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002308:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800231e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002322:	4622      	mov	r2, r4
 8002324:	462b      	mov	r3, r5
 8002326:	f04f 0000 	mov.w	r0, #0
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	0159      	lsls	r1, r3, #5
 8002330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002334:	0150      	lsls	r0, r2, #5
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4621      	mov	r1, r4
 800233c:	1a51      	subs	r1, r2, r1
 800233e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002340:	4629      	mov	r1, r5
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	647b      	str	r3, [r7, #68]	@ 0x44
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002354:	4649      	mov	r1, r9
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235e:	4641      	mov	r1, r8
 8002360:	018a      	lsls	r2, r1, #6
 8002362:	4641      	mov	r1, r8
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002368:	4649      	mov	r1, r9
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800237c:	4649      	mov	r1, r9
 800237e:	00cb      	lsls	r3, r1, #3
 8002380:	4641      	mov	r1, r8
 8002382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002386:	4641      	mov	r1, r8
 8002388:	00ca      	lsls	r2, r1, #3
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	4603      	mov	r3, r0
 8002390:	4622      	mov	r2, r4
 8002392:	189b      	adds	r3, r3, r2
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
 8002396:	462b      	mov	r3, r5
 8002398:	460a      	mov	r2, r1
 800239a:	eb42 0303 	adc.w	r3, r2, r3
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023ac:	4629      	mov	r1, r5
 80023ae:	024b      	lsls	r3, r1, #9
 80023b0:	4621      	mov	r1, r4
 80023b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023b6:	4621      	mov	r1, r4
 80023b8:	024a      	lsls	r2, r1, #9
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023d0:	f7fe fc0a 	bl	8000be8 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023de:	e067      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e0:	4b75      	ldr	r3, [pc, #468]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	2200      	movs	r2, #0
 80023e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023fa:	2300      	movs	r3, #0
 80023fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	0159      	lsls	r1, r3, #5
 8002410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002414:	0150      	lsls	r0, r2, #5
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4621      	mov	r1, r4
 800241c:	1a51      	subs	r1, r2, r1
 800241e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002420:	4629      	mov	r1, r5
 8002422:	eb63 0301 	sbc.w	r3, r3, r1
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002434:	4649      	mov	r1, r9
 8002436:	018b      	lsls	r3, r1, #6
 8002438:	4641      	mov	r1, r8
 800243a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800243e:	4641      	mov	r1, r8
 8002440:	018a      	lsls	r2, r1, #6
 8002442:	4641      	mov	r1, r8
 8002444:	ebb2 0a01 	subs.w	sl, r2, r1
 8002448:	4649      	mov	r1, r9
 800244a:	eb63 0b01 	sbc.w	fp, r3, r1
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800245a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800245e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002462:	4692      	mov	sl, r2
 8002464:	469b      	mov	fp, r3
 8002466:	4623      	mov	r3, r4
 8002468:	eb1a 0303 	adds.w	r3, sl, r3
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	462b      	mov	r3, r5
 8002470:	eb4b 0303 	adc.w	r3, fp, r3
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002482:	4629      	mov	r1, r5
 8002484:	028b      	lsls	r3, r1, #10
 8002486:	4621      	mov	r1, r4
 8002488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800248c:	4621      	mov	r1, r4
 800248e:	028a      	lsls	r2, r1, #10
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002498:	2200      	movs	r2, #0
 800249a:	673b      	str	r3, [r7, #112]	@ 0x70
 800249c:	677a      	str	r2, [r7, #116]	@ 0x74
 800249e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024a2:	f7fe fba1 	bl	8000be8 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4613      	mov	r3, r2
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024b0:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80024c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024d2:	e0eb      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e0:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d06b      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ec:	4b32      	ldr	r3, [pc, #200]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	2200      	movs	r2, #0
 80024f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002500:	2300      	movs	r3, #0
 8002502:	667b      	str	r3, [r7, #100]	@ 0x64
 8002504:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002508:	4622      	mov	r2, r4
 800250a:	462b      	mov	r3, r5
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0159      	lsls	r1, r3, #5
 8002516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251a:	0150      	lsls	r0, r2, #5
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4621      	mov	r1, r4
 8002522:	1a51      	subs	r1, r2, r1
 8002524:	61b9      	str	r1, [r7, #24]
 8002526:	4629      	mov	r1, r5
 8002528:	eb63 0301 	sbc.w	r3, r3, r1
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800253a:	4659      	mov	r1, fp
 800253c:	018b      	lsls	r3, r1, #6
 800253e:	4651      	mov	r1, sl
 8002540:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002544:	4651      	mov	r1, sl
 8002546:	018a      	lsls	r2, r1, #6
 8002548:	4651      	mov	r1, sl
 800254a:	ebb2 0801 	subs.w	r8, r2, r1
 800254e:	4659      	mov	r1, fp
 8002550:	eb63 0901 	sbc.w	r9, r3, r1
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002560:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002564:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002568:	4690      	mov	r8, r2
 800256a:	4699      	mov	r9, r3
 800256c:	4623      	mov	r3, r4
 800256e:	eb18 0303 	adds.w	r3, r8, r3
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	462b      	mov	r3, r5
 8002576:	eb49 0303 	adc.w	r3, r9, r3
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002588:	4629      	mov	r1, r5
 800258a:	024b      	lsls	r3, r1, #9
 800258c:	4621      	mov	r1, r4
 800258e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002592:	4621      	mov	r1, r4
 8002594:	024a      	lsls	r2, r1, #9
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800259e:	2200      	movs	r2, #0
 80025a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025a8:	f7fe fb1e 	bl	8000be8 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025b6:	e065      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x420>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x458>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	2200      	movs	r2, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	4611      	mov	r1, r2
 80025d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80025d6:	2300      	movs	r3, #0
 80025d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80025da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025de:	4642      	mov	r2, r8
 80025e0:	464b      	mov	r3, r9
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4641      	mov	r1, r8
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002610:	4659      	mov	r1, fp
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261a:	4651      	mov	r1, sl
 800261c:	018a      	lsls	r2, r1, #6
 800261e:	4651      	mov	r1, sl
 8002620:	1a54      	subs	r4, r2, r1
 8002622:	4659      	mov	r1, fp
 8002624:	eb63 0501 	sbc.w	r5, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	00eb      	lsls	r3, r5, #3
 8002632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002636:	00e2      	lsls	r2, r4, #3
 8002638:	4614      	mov	r4, r2
 800263a:	461d      	mov	r5, r3
 800263c:	4643      	mov	r3, r8
 800263e:	18e3      	adds	r3, r4, r3
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	464b      	mov	r3, r9
 8002644:	eb45 0303 	adc.w	r3, r5, r3
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002656:	4629      	mov	r1, r5
 8002658:	028b      	lsls	r3, r1, #10
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002660:	4621      	mov	r1, r4
 8002662:	028a      	lsls	r2, r1, #10
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800266c:	2200      	movs	r2, #0
 800266e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002670:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002672:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002676:	f7fe fab7 	bl	8000be8 <__aeabi_uldivmod>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4613      	mov	r3, r2
 8002680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002684:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x458>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0f1b      	lsrs	r3, r3, #28
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026a2:	e003      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	37b8      	adds	r7, #184	@ 0xb8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400

080026c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e28d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8083 	beq.w	80027ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026e4:	4b94      	ldr	r3, [pc, #592]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d019      	beq.n	8002724 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026f0:	4b91      	ldr	r3, [pc, #580]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
        || \
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002708:	d00c      	beq.n	8002724 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d112      	bne.n	800273c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002722:	d10b      	bne.n	800273c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4b84      	ldr	r3, [pc, #528]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d05b      	beq.n	80027e8 <HAL_RCC_OscConfig+0x124>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d157      	bne.n	80027e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e25a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x90>
 8002746:	4b7c      	ldr	r3, [pc, #496]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xcc>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0xb4>
 800275e:	4b76      	ldr	r3, [pc, #472]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a75      	ldr	r2, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b73      	ldr	r3, [pc, #460]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a72      	ldr	r2, [pc, #456]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xcc>
 8002778:	4b6f      	ldr	r3, [pc, #444]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6e      	ldr	r2, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b6c      	ldr	r3, [pc, #432]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6b      	ldr	r2, [pc, #428]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f992 	bl	8001ac0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff f98e 	bl	8001ac0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e21f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xdc>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff f97e 	bl	8001ac0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f97a 	bl	8001ac0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e20b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b57      	ldr	r3, [pc, #348]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x104>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d06f      	beq.n	80028d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027f6:	4b50      	ldr	r3, [pc, #320]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d017      	beq.n	8002832 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002802:	4b4d      	ldr	r3, [pc, #308]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
        || \
 800280a:	2b08      	cmp	r3, #8
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281a:	4b47      	ldr	r3, [pc, #284]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b44      	ldr	r3, [pc, #272]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x186>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1d3      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4937      	ldr	r1, [pc, #220]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b34      	ldr	r3, [pc, #208]	@ (800293c <HAL_RCC_OscConfig+0x278>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f927 	bl	8001ac0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f923 	bl	8001ac0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1b4      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4925      	ldr	r1, [pc, #148]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b24      	ldr	r3, [pc, #144]	@ (800293c <HAL_RCC_OscConfig+0x278>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff f906 	bl	8001ac0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff f902 	bl	8001ac0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e193      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d036      	beq.n	8002950 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_OscConfig+0x27c>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff f8e6 	bl	8001ac0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff f8e2 	bl	8001ac0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e173      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 800290c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x234>
 8002916:	e01b      	b.n	8002950 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_RCC_OscConfig+0x27c>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7ff f8cf 	bl	8001ac0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	e00e      	b.n	8002944 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7ff f8cb 	bl	8001ac0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d907      	bls.n	8002944 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e15c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
 8002938:	40023800 	.word	0x40023800
 800293c:	42470000 	.word	0x42470000
 8002940:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	4b8a      	ldr	r3, [pc, #552]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ea      	bne.n	8002926 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8097 	beq.w	8002a8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002962:	4b83      	ldr	r3, [pc, #524]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b7f      	ldr	r3, [pc, #508]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a7e      	ldr	r2, [pc, #504]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b79      	ldr	r3, [pc, #484]	@ (8002b74 <HAL_RCC_OscConfig+0x4b0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCC_OscConfig+0x4b0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	@ (8002b74 <HAL_RCC_OscConfig+0x4b0>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7ff f88b 	bl	8001ac0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7ff f887 	bl	8001ac0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e118      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <HAL_RCC_OscConfig+0x4b0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x31e>
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x358>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x340>
 80029ea:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	4a60      	ldr	r2, [pc, #384]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0x358>
 8002a04:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	4a59      	ldr	r2, [pc, #356]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a10:	4b57      	ldr	r3, [pc, #348]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a56      	ldr	r2, [pc, #344]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	f023 0304 	bic.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7ff f84c 	bl	8001ac0 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f848 	bl	8001ac0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0d7      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	4b4b      	ldr	r3, [pc, #300]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ee      	beq.n	8002a2c <HAL_RCC_OscConfig+0x368>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff f836 	bl	8001ac0 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7ff f832 	bl	8001ac0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0c1      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ee      	bne.n	8002a58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a80:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	4a3a      	ldr	r2, [pc, #232]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80ad 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a96:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d060      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d145      	bne.n	8002b36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b33      	ldr	r3, [pc, #204]	@ (8002b78 <HAL_RCC_OscConfig+0x4b4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f806 	bl	8001ac0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7ff f802 	bl	8001ac0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e093      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	019b      	lsls	r3, r3, #6
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	3b01      	subs	r3, #1
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	071b      	lsls	r3, r3, #28
 8002b02:	491b      	ldr	r1, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x4b4>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe ffd7 	bl	8001ac0 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe ffd3 	bl	8001ac0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e064      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x452>
 8002b34:	e05c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_RCC_OscConfig+0x4b4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ffc0 	bl	8001ac0 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe ffbc 	bl	8001ac0 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x480>
 8002b62:	e045      	b.n	8002bf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e040      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_RCC_OscConfig+0x538>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d030      	beq.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d129      	bne.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d122      	bne.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d119      	bne.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10f      	bne.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e042      	b.n	8002c98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fd72 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	@ 0x24
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f973 	bl	8002f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d175      	bne.n	8002dac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_UART_Transmit+0x2c>
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e06e      	b.n	8002dae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2221      	movs	r2, #33	@ 0x21
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cde:	f7fe feef 	bl	8001ac0 <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf8:	d108      	bne.n	8002d0c <HAL_UART_Transmit+0x6c>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e003      	b.n	8002d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d14:	e02e      	b.n	8002d74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	@ 0x80
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f848 	bl	8002db6 <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e03a      	b.n	8002dae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	3302      	adds	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e007      	b.n	8002d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1cb      	bne.n	8002d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2140      	movs	r1, #64	@ 0x40
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f814 	bl	8002db6 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc6:	e03b      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dce:	d037      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7fe fe76 	bl	8001ac0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	6a3a      	ldr	r2, [r7, #32]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e03a      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b80      	cmp	r3, #128	@ 0x80
 8002dfc:	d020      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d01d      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d116      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f81d 	bl	8002e68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2208      	movs	r2, #8
 8002e32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00f      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d0b4      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b095      	sub	sp, #84	@ 0x54
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e90:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d119      	bne.n	8002f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f00:	61ba      	str	r2, [r7, #24]
 8002f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6979      	ldr	r1, [r7, #20]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f22:	bf00      	nop
 8002f24:	3754      	adds	r7, #84	@ 0x54
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b0c0      	sub	sp, #256	@ 0x100
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	68d9      	ldr	r1, [r3, #12]
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	ea40 0301 	orr.w	r3, r0, r1
 8002f58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f88:	f021 010c 	bic.w	r1, r1, #12
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f96:	430b      	orrs	r3, r1
 8002f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002faa:	6999      	ldr	r1, [r3, #24]
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	ea40 0301 	orr.w	r3, r0, r1
 8002fb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80031fc <UART_SetConfig+0x2cc>)
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d005      	beq.n	8002fd0 <UART_SetConfig+0xa0>
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b8d      	ldr	r3, [pc, #564]	@ (8003200 <UART_SetConfig+0x2d0>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d104      	bne.n	8002fda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fd0:	f7ff f934 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fd8:	e003      	b.n	8002fe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fda:	f7ff f91b 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002fde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fec:	f040 810c 	bne.w	8003208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ffa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	1891      	adds	r1, r2, r2
 8003008:	65b9      	str	r1, [r7, #88]	@ 0x58
 800300a:	415b      	adcs	r3, r3
 800300c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800300e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003012:	4621      	mov	r1, r4
 8003014:	eb12 0801 	adds.w	r8, r2, r1
 8003018:	4629      	mov	r1, r5
 800301a:	eb43 0901 	adc.w	r9, r3, r1
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003032:	4690      	mov	r8, r2
 8003034:	4699      	mov	r9, r3
 8003036:	4623      	mov	r3, r4
 8003038:	eb18 0303 	adds.w	r3, r8, r3
 800303c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003040:	462b      	mov	r3, r5
 8003042:	eb49 0303 	adc.w	r3, r9, r3
 8003046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003056:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800305a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800305e:	460b      	mov	r3, r1
 8003060:	18db      	adds	r3, r3, r3
 8003062:	653b      	str	r3, [r7, #80]	@ 0x50
 8003064:	4613      	mov	r3, r2
 8003066:	eb42 0303 	adc.w	r3, r2, r3
 800306a:	657b      	str	r3, [r7, #84]	@ 0x54
 800306c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003074:	f7fd fdb8 	bl	8000be8 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4b61      	ldr	r3, [pc, #388]	@ (8003204 <UART_SetConfig+0x2d4>)
 800307e:	fba3 2302 	umull	r2, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	011c      	lsls	r4, r3, #4
 8003086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003090:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003098:	4642      	mov	r2, r8
 800309a:	464b      	mov	r3, r9
 800309c:	1891      	adds	r1, r2, r2
 800309e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030a0:	415b      	adcs	r3, r3
 80030a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030a8:	4641      	mov	r1, r8
 80030aa:	eb12 0a01 	adds.w	sl, r2, r1
 80030ae:	4649      	mov	r1, r9
 80030b0:	eb43 0b01 	adc.w	fp, r3, r1
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030c8:	4692      	mov	sl, r2
 80030ca:	469b      	mov	fp, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	eb1a 0303 	adds.w	r3, sl, r3
 80030d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030d6:	464b      	mov	r3, r9
 80030d8:	eb4b 0303 	adc.w	r3, fp, r3
 80030dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030f4:	460b      	mov	r3, r1
 80030f6:	18db      	adds	r3, r3, r3
 80030f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030fa:	4613      	mov	r3, r2
 80030fc:	eb42 0303 	adc.w	r3, r2, r3
 8003100:	647b      	str	r3, [r7, #68]	@ 0x44
 8003102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800310a:	f7fd fd6d 	bl	8000be8 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4611      	mov	r1, r2
 8003114:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <UART_SetConfig+0x2d4>)
 8003116:	fba3 2301 	umull	r2, r3, r3, r1
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2264      	movs	r2, #100	@ 0x64
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	1acb      	subs	r3, r1, r3
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <UART_SetConfig+0x2d4>)
 800312c:	fba3 2302 	umull	r2, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003138:	441c      	add	r4, r3
 800313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003144:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800314c:	4642      	mov	r2, r8
 800314e:	464b      	mov	r3, r9
 8003150:	1891      	adds	r1, r2, r2
 8003152:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003154:	415b      	adcs	r3, r3
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800315c:	4641      	mov	r1, r8
 800315e:	1851      	adds	r1, r2, r1
 8003160:	6339      	str	r1, [r7, #48]	@ 0x30
 8003162:	4649      	mov	r1, r9
 8003164:	414b      	adcs	r3, r1
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003174:	4659      	mov	r1, fp
 8003176:	00cb      	lsls	r3, r1, #3
 8003178:	4651      	mov	r1, sl
 800317a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800317e:	4651      	mov	r1, sl
 8003180:	00ca      	lsls	r2, r1, #3
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	4603      	mov	r3, r0
 8003188:	4642      	mov	r2, r8
 800318a:	189b      	adds	r3, r3, r2
 800318c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003190:	464b      	mov	r3, r9
 8003192:	460a      	mov	r2, r1
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031b0:	460b      	mov	r3, r1
 80031b2:	18db      	adds	r3, r3, r3
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031b6:	4613      	mov	r3, r2
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031c6:	f7fd fd0f 	bl	8000be8 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <UART_SetConfig+0x2d4>)
 80031d0:	fba3 1302 	umull	r1, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2164      	movs	r1, #100	@ 0x64
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	3332      	adds	r3, #50	@ 0x32
 80031e2:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <UART_SetConfig+0x2d4>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 0207 	and.w	r2, r3, #7
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4422      	add	r2, r4
 80031f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031f8:	e106      	b.n	8003408 <UART_SetConfig+0x4d8>
 80031fa:	bf00      	nop
 80031fc:	40011000 	.word	0x40011000
 8003200:	40011400 	.word	0x40011400
 8003204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003212:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800321a:	4642      	mov	r2, r8
 800321c:	464b      	mov	r3, r9
 800321e:	1891      	adds	r1, r2, r2
 8003220:	6239      	str	r1, [r7, #32]
 8003222:	415b      	adcs	r3, r3
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
 8003226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800322a:	4641      	mov	r1, r8
 800322c:	1854      	adds	r4, r2, r1
 800322e:	4649      	mov	r1, r9
 8003230:	eb43 0501 	adc.w	r5, r3, r1
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	00eb      	lsls	r3, r5, #3
 800323e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003242:	00e2      	lsls	r2, r4, #3
 8003244:	4614      	mov	r4, r2
 8003246:	461d      	mov	r5, r3
 8003248:	4643      	mov	r3, r8
 800324a:	18e3      	adds	r3, r4, r3
 800324c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003250:	464b      	mov	r3, r9
 8003252:	eb45 0303 	adc.w	r3, r5, r3
 8003256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003276:	4629      	mov	r1, r5
 8003278:	008b      	lsls	r3, r1, #2
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003280:	4621      	mov	r1, r4
 8003282:	008a      	lsls	r2, r1, #2
 8003284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003288:	f7fd fcae 	bl	8000be8 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4b60      	ldr	r3, [pc, #384]	@ (8003414 <UART_SetConfig+0x4e4>)
 8003292:	fba3 2302 	umull	r2, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	011c      	lsls	r4, r3, #4
 800329a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032ac:	4642      	mov	r2, r8
 80032ae:	464b      	mov	r3, r9
 80032b0:	1891      	adds	r1, r2, r2
 80032b2:	61b9      	str	r1, [r7, #24]
 80032b4:	415b      	adcs	r3, r3
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032bc:	4641      	mov	r1, r8
 80032be:	1851      	adds	r1, r2, r1
 80032c0:	6139      	str	r1, [r7, #16]
 80032c2:	4649      	mov	r1, r9
 80032c4:	414b      	adcs	r3, r1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d4:	4659      	mov	r1, fp
 80032d6:	00cb      	lsls	r3, r1, #3
 80032d8:	4651      	mov	r1, sl
 80032da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032de:	4651      	mov	r1, sl
 80032e0:	00ca      	lsls	r2, r1, #3
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	4642      	mov	r2, r8
 80032ea:	189b      	adds	r3, r3, r2
 80032ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032f0:	464b      	mov	r3, r9
 80032f2:	460a      	mov	r2, r1
 80032f4:	eb42 0303 	adc.w	r3, r2, r3
 80032f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003306:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003314:	4649      	mov	r1, r9
 8003316:	008b      	lsls	r3, r1, #2
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331e:	4641      	mov	r1, r8
 8003320:	008a      	lsls	r2, r1, #2
 8003322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003326:	f7fd fc5f 	bl	8000be8 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4611      	mov	r1, r2
 8003330:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <UART_SetConfig+0x4e4>)
 8003332:	fba3 2301 	umull	r2, r3, r3, r1
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2264      	movs	r2, #100	@ 0x64
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	1acb      	subs	r3, r1, r3
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	3332      	adds	r3, #50	@ 0x32
 8003344:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <UART_SetConfig+0x4e4>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003350:	441c      	add	r4, r3
 8003352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003356:	2200      	movs	r2, #0
 8003358:	673b      	str	r3, [r7, #112]	@ 0x70
 800335a:	677a      	str	r2, [r7, #116]	@ 0x74
 800335c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	1891      	adds	r1, r2, r2
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	415b      	adcs	r3, r3
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003370:	4641      	mov	r1, r8
 8003372:	1851      	adds	r1, r2, r1
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	4649      	mov	r1, r9
 8003378:	414b      	adcs	r3, r1
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003388:	4659      	mov	r1, fp
 800338a:	00cb      	lsls	r3, r1, #3
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003392:	4651      	mov	r1, sl
 8003394:	00ca      	lsls	r2, r1, #3
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	4603      	mov	r3, r0
 800339c:	4642      	mov	r2, r8
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a2:	464b      	mov	r3, r9
 80033a4:	460a      	mov	r2, r1
 80033a6:	eb42 0303 	adc.w	r3, r2, r3
 80033aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80033b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033c4:	4649      	mov	r1, r9
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	4641      	mov	r1, r8
 80033ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ce:	4641      	mov	r1, r8
 80033d0:	008a      	lsls	r2, r1, #2
 80033d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033d6:	f7fd fc07 	bl	8000be8 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <UART_SetConfig+0x4e4>)
 80033e0:	fba3 1302 	umull	r1, r3, r3, r2
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	2164      	movs	r1, #100	@ 0x64
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	3332      	adds	r3, #50	@ 0x32
 80033f2:	4a08      	ldr	r2, [pc, #32]	@ (8003414 <UART_SetConfig+0x4e4>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4422      	add	r2, r4
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800340e:	46bd      	mov	sp, r7
 8003410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003414:	51eb851f 	.word	0x51eb851f

08003418 <__NVIC_SetPriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	@ (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	@ (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003470:	2100      	movs	r1, #0
 8003472:	f06f 0004 	mvn.w	r0, #4
 8003476:	f7ff ffcf 	bl	8003418 <__NVIC_SetPriority>
#endif
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003486:	f3ef 8305 	mrs	r3, IPSR
 800348a:	603b      	str	r3, [r7, #0]
  return(result);
 800348c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003492:	f06f 0305 	mvn.w	r3, #5
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e00c      	b.n	80034b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <osKernelInitialize+0x44>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <osKernelInitialize+0x44>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e002      	b.n	80034b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	200002c0 	.word	0x200002c0

080034c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034ce:	f3ef 8305 	mrs	r3, IPSR
 80034d2:	603b      	str	r3, [r7, #0]
  return(result);
 80034d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80034da:	f06f 0305 	mvn.w	r3, #5
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	e010      	b.n	8003504 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <osKernelStart+0x48>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d109      	bne.n	80034fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034ea:	f7ff ffbf 	bl	800346c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034ee:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <osKernelStart+0x48>)
 80034f0:	2202      	movs	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034f4:	f001 fc66 	bl	8004dc4 <vTaskStartScheduler>
      stat = osOK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	e002      	b.n	8003504 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003502:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003504:	687b      	ldr	r3, [r7, #4]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200002c0 	.word	0x200002c0

08003514 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800351a:	f3ef 8305 	mrs	r3, IPSR
 800351e:	603b      	str	r3, [r7, #0]
  return(result);
 8003520:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8003526:	f001 fd71 	bl	800500c <xTaskGetTickCountFromISR>
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	e002      	b.n	8003534 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800352e:	f001 fd5d 	bl	8004fec <xTaskGetTickCount>
 8003532:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8003534:	687b      	ldr	r3, [r7, #4]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800353e:	b580      	push	{r7, lr}
 8003540:	b08e      	sub	sp, #56	@ 0x38
 8003542:	af04      	add	r7, sp, #16
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800354e:	f3ef 8305 	mrs	r3, IPSR
 8003552:	617b      	str	r3, [r7, #20]
  return(result);
 8003554:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003556:	2b00      	cmp	r3, #0
 8003558:	d17e      	bne.n	8003658 <osThreadNew+0x11a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d07b      	beq.n	8003658 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003564:	2318      	movs	r3, #24
 8003566:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003570:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d045      	beq.n	8003604 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <osThreadNew+0x48>
        name = attr->name;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <osThreadNew+0x6e>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b38      	cmp	r3, #56	@ 0x38
 800359e:	d805      	bhi.n	80035ac <osThreadNew+0x6e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <osThreadNew+0x72>
        return (NULL);
 80035ac:	2300      	movs	r3, #0
 80035ae:	e054      	b.n	800365a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <osThreadNew+0xa8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b5b      	cmp	r3, #91	@ 0x5b
 80035ce:	d90a      	bls.n	80035e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <osThreadNew+0xa8>
        mem = 1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e010      	b.n	8003608 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <osThreadNew+0xca>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <osThreadNew+0xca>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <osThreadNew+0xca>
          mem = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e001      	b.n	8003608 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d110      	bne.n	8003630 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003616:	9202      	str	r2, [sp, #8]
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f001 f971 	bl	800490c <xTaskCreateStatic>
 800362a:	4603      	mov	r3, r0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e013      	b.n	8003658 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d110      	bne.n	8003658 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	b29a      	uxth	r2, r3
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f001 f9bf 	bl	80049cc <xTaskCreate>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <osThreadNew+0x11a>
            hTask = NULL;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800366a:	f3ef 8305 	mrs	r3, IPSR
 800366e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osDelay+0x1c>
    stat = osErrorISR;
 8003676:	f06f 0305 	mvn.w	r3, #5
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e007      	b.n	800368e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <osDelay+0x2c>
      vTaskDelay(ticks);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f001 fb65 	bl	8004d58 <vTaskDelay>
    }
  }

  return (stat);
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a0:	f3ef 8305 	mrs	r3, IPSR
 80036a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036a6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80036ac:	f06f 0305 	mvn.w	r3, #5
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e019      	b.n	80036e8 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80036b8:	f001 fc98 	bl	8004fec <xTaskGetTickCount>
 80036bc:	4603      	mov	r3, r0
 80036be:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <osDelayUntil+0x4a>
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db06      	blt.n	80036e2 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	6939      	ldr	r1, [r7, #16]
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fabc 	bl	8004c58 <vTaskDelayUntil>
 80036e0:	e002      	b.n	80036e8 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80036e2:	f06f 0303 	mvn.w	r3, #3
 80036e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80036e8:	697b      	ldr	r3, [r7, #20]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b088      	sub	sp, #32
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fe:	f3ef 8305 	mrs	r3, IPSR
 8003702:	60bb      	str	r3, [r7, #8]
  return(result);
 8003704:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003706:	2b00      	cmp	r3, #0
 8003708:	d174      	bne.n	80037f4 <osMutexNew+0x102>
    if (attr != NULL) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e001      	b.n	800371c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <osMutexNew+0x3a>
      rmtx = 1U;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e001      	b.n	8003730 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d15c      	bne.n	80037f4 <osMutexNew+0x102>
      mem = -1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800373e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <osMutexNew+0x6a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b4f      	cmp	r3, #79	@ 0x4f
 8003754:	d902      	bls.n	800375c <osMutexNew+0x6a>
          mem = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e00c      	b.n	8003776 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <osMutexNew+0x84>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <osMutexNew+0x84>
            mem = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e001      	b.n	8003776 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d112      	bne.n	80037a2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4619      	mov	r1, r3
 8003788:	2004      	movs	r0, #4
 800378a:	f000 fb20 	bl	8003dce <xQueueCreateMutexStatic>
 800378e:	61f8      	str	r0, [r7, #28]
 8003790:	e016      	b.n	80037c0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4619      	mov	r1, r3
 8003798:	2001      	movs	r0, #1
 800379a:	f000 fb18 	bl	8003dce <xQueueCreateMutexStatic>
 800379e:	61f8      	str	r0, [r7, #28]
 80037a0:	e00e      	b.n	80037c0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80037ae:	2004      	movs	r0, #4
 80037b0:	f000 faf5 	bl	8003d9e <xQueueCreateMutex>
 80037b4:	61f8      	str	r0, [r7, #28]
 80037b6:	e003      	b.n	80037c0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80037b8:	2001      	movs	r0, #1
 80037ba:	f000 faf0 	bl	8003d9e <xQueueCreateMutex>
 80037be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <osMutexNew+0xee>
        if (attr != NULL) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <osMutexNew+0xe2>
          name = attr->name;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e001      	b.n	80037d8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	69f8      	ldr	r0, [r7, #28]
 80037dc:	f001 f838 	bl	8004850 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <osMutexNew+0x102>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80037f4:	69fb      	ldr	r3, [r7, #28]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381c:	f3ef 8305 	mrs	r3, IPSR
 8003820:	60bb      	str	r3, [r7, #8]
  return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003828:	f06f 0305 	mvn.w	r3, #5
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e02c      	b.n	800388a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003836:	f06f 0303 	mvn.w	r3, #3
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e025      	b.n	800388a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d011      	beq.n	8003868 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	6938      	ldr	r0, [r7, #16]
 8003848:	f000 fb11 	bl	8003e6e <xQueueTakeMutexRecursive>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d01b      	beq.n	800388a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003858:	f06f 0301 	mvn.w	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e014      	b.n	800388a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003860:	f06f 0302 	mvn.w	r3, #2
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e010      	b.n	800388a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	6938      	ldr	r0, [r7, #16]
 800386c:	f000 fdb8 	bl	80043e0 <xQueueSemaphoreTake>
 8003870:	4603      	mov	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d009      	beq.n	800388a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800387c:	f06f 0301 	mvn.w	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e002      	b.n	800388a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003884:	f06f 0302 	mvn.w	r3, #2
 8003888:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800388a:	697b      	ldr	r3, [r7, #20]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b0:	f3ef 8305 	mrs	r3, IPSR
 80038b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80038bc:	f06f 0305 	mvn.w	r3, #5
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e01f      	b.n	8003904 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80038ca:	f06f 0303 	mvn.w	r3, #3
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e018      	b.n	8003904 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80038d8:	6938      	ldr	r0, [r7, #16]
 80038da:	f000 fa93 	bl	8003e04 <xQueueGiveMutexRecursive>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d00f      	beq.n	8003904 <osMutexRelease+0x70>
        stat = osErrorResource;
 80038e4:	f06f 0302 	mvn.w	r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e00b      	b.n	8003904 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80038ec:	2300      	movs	r3, #0
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f000 faf2 	bl	8003edc <xQueueGenericSend>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <osMutexRelease+0x70>
        stat = osErrorResource;
 80038fe:	f06f 0302 	mvn.w	r3, #2
 8003902:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003904:	697b      	ldr	r3, [r7, #20]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a07      	ldr	r2, [pc, #28]	@ (800393c <vApplicationGetIdleTaskMemory+0x2c>)
 8003920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4a06      	ldr	r2, [pc, #24]	@ (8003940 <vApplicationGetIdleTaskMemory+0x30>)
 8003926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	@ 0x80
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	200002c4 	.word	0x200002c4
 8003940:	20000320 	.word	0x20000320

08003944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <vApplicationGetTimerTaskMemory+0x2c>)
 8003954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <vApplicationGetTimerTaskMemory+0x30>)
 800395a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	20000520 	.word	0x20000520
 8003974:	2000057c 	.word	0x2000057c

08003978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f103 0208 	add.w	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 0208 	add.w	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0208 	add.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a30:	d103      	bne.n	8003a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e00c      	b.n	8003a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <vListInsert+0x2e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d2f6      	bcs.n	8003a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d103      	bne.n	8003ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b0c:	f002 fc34 	bl	8006378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	68f9      	ldr	r1, [r7, #12]
 8003b1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	441a      	add	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	22ff      	movs	r2, #255	@ 0xff
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	@ 0xff
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d114      	bne.n	8003b8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01a      	beq.n	8003ba0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fbc8 	bl	8005304 <xTaskRemoveFromEventList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <xQueueGenericReset+0xd0>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	e009      	b.n	8003ba0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3310      	adds	r3, #16
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fef1 	bl	8003978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3324      	adds	r3, #36	@ 0x24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff feec 	bl	8003978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ba0:	f002 fc1c 	bl	80063dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ba4:	2301      	movs	r3, #1
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	@ 0x38
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <xQueueGenericCreateStatic+0x56>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <xQueueGenericCreateStatic+0x5a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <xQueueGenericCreateStatic+0x5c>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <xQueueGenericCreateStatic+0x84>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <xQueueGenericCreateStatic+0x88>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <xQueueGenericCreateStatic+0x8a>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	61fb      	str	r3, [r7, #28]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c5a:	2350      	movs	r3, #80	@ 0x50
 8003c5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b50      	cmp	r3, #80	@ 0x50
 8003c62:	d00b      	beq.n	8003c7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	61bb      	str	r3, [r7, #24]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f840 	bl	8003d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3730      	adds	r7, #48	@ 0x30
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08a      	sub	sp, #40	@ 0x28
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <xQueueGenericCreate+0x2c>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	613b      	str	r3, [r7, #16]
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	e7fd      	b.n	8003cd6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3350      	adds	r3, #80	@ 0x50
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 fc67 	bl	80065bc <pvPortMalloc>
 8003cee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3350      	adds	r3, #80	@ 0x50
 8003cfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d08:	79fa      	ldrb	r2, [r7, #7]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f805 	bl	8003d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d52:	2101      	movs	r1, #1
 8003d54:	69b8      	ldr	r0, [r7, #24]
 8003d56:	f7ff fec3 	bl	8003ae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8a3 	bl	8003edc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003da8:	2301      	movs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6939      	ldr	r1, [r7, #16]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff79 	bl	8003cae <xQueueGenericCreate>
 8003dbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ffd3 	bl	8003d6a <prvInitialiseMutex>

		return xNewQueue;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
	}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	af02      	add	r7, sp, #8
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	6039      	str	r1, [r7, #0]
 8003dd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	6939      	ldr	r1, [r7, #16]
 8003dec:	6978      	ldr	r0, [r7, #20]
 8003dee:	f7ff fee1 	bl	8003bb4 <xQueueGenericCreateStatic>
 8003df2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff ffb8 	bl	8003d6a <prvInitialiseMutex>

		return xNewQueue;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	60fb      	str	r3, [r7, #12]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	689c      	ldr	r4, [r3, #8]
 8003e32:	f001 fc27 	bl	8005684 <xTaskGetCurrentTaskHandle>
 8003e36:	4603      	mov	r3, r0
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	d111      	bne.n	8003e60 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	1e5a      	subs	r2, r3, #1
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2200      	movs	r2, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	6938      	ldr	r0, [r7, #16]
 8003e56:	f000 f841 	bl	8003edc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e001      	b.n	8003e64 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003e64:	697b      	ldr	r3, [r7, #20]
	}
 8003e66:	4618      	mov	r0, r3
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}

08003e6e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003e6e:	b590      	push	{r4, r7, lr}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60fb      	str	r3, [r7, #12]
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	689c      	ldr	r4, [r3, #8]
 8003e9e:	f001 fbf1 	bl	8005684 <xTaskGetCurrentTaskHandle>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	d107      	bne.n	8003eb8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e00c      	b.n	8003ed2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	6938      	ldr	r0, [r7, #16]
 8003ebc:	f000 fa90 	bl	80043e0 <xQueueSemaphoreTake>
 8003ec0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003ed2:	697b      	ldr	r3, [r7, #20]
	}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}

08003edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08e      	sub	sp, #56	@ 0x38
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <xQueueGenericSend+0x34>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <xQueueGenericSend+0x42>
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <xQueueGenericSend+0x46>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <xQueueGenericSend+0x48>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <xQueueGenericSend+0x64>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d103      	bne.n	8003f4e <xQueueGenericSend+0x72>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <xQueueGenericSend+0x76>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <xQueueGenericSend+0x78>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <xQueueGenericSend+0x94>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	623b      	str	r3, [r7, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f70:	f001 fb98 	bl	80056a4 <xTaskGetSchedulerState>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <xQueueGenericSend+0xa4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xQueueGenericSend+0xa8>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xQueueGenericSend+0xaa>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	61fb      	str	r3, [r7, #28]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fa2:	f002 f9e9 	bl	8006378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <xQueueGenericSend+0xdc>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d129      	bne.n	800400c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fbe:	f000 fb37 	bl	8004630 <prvCopyDataToQueue>
 8003fc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d010      	beq.n	8003fee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	3324      	adds	r3, #36	@ 0x24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f997 	bl	8005304 <xTaskRemoveFromEventList>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <xQueueGenericSend+0x200>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	e00a      	b.n	8004004 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ff4:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <xQueueGenericSend+0x200>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004004:	f002 f9ea 	bl	80063dc <vPortExitCritical>
				return pdPASS;
 8004008:	2301      	movs	r3, #1
 800400a:	e063      	b.n	80040d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004012:	f002 f9e3 	bl	80063dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004016:	2300      	movs	r3, #0
 8004018:	e05c      	b.n	80040d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800401a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4618      	mov	r0, r3
 8004026:	f001 f9d1 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800402a:	2301      	movs	r3, #1
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402e:	f002 f9d5 	bl	80063dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004032:	f000 ff2f 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004036:	f002 f99f 	bl	8006378 <vPortEnterCritical>
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004040:	b25b      	sxtb	r3, r3
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004046:	d103      	bne.n	8004050 <xQueueGenericSend+0x174>
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004056:	b25b      	sxtb	r3, r3
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800405c:	d103      	bne.n	8004066 <xQueueGenericSend+0x18a>
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004066:	f002 f9b9 	bl	80063dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800406a:	1d3a      	adds	r2, r7, #4
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f9c0 	bl	80053f8 <xTaskCheckForTimeOut>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d124      	bne.n	80040c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800407e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004080:	f000 fbce 	bl	8004820 <prvIsQueueFull>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	3310      	adds	r3, #16
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f001 f8e4 	bl	8005260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800409a:	f000 fb59 	bl	8004750 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800409e:	f000 ff07 	bl	8004eb0 <xTaskResumeAll>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af7c 	bne.w	8003fa2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <xQueueGenericSend+0x200>)
 80040ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	e772      	b.n	8003fa2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040be:	f000 fb47 	bl	8004750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040c2:	f000 fef5 	bl	8004eb0 <xTaskResumeAll>
 80040c6:	e76c      	b.n	8003fa2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ca:	f000 fb41 	bl	8004750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ce:	f000 feef 	bl	8004eb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3738      	adds	r7, #56	@ 0x38
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b090      	sub	sp, #64	@ 0x40
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <xQueueGenericSendFromISR+0x3e>
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xQueueGenericSendFromISR+0x42>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueGenericSendFromISR+0x44>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d103      	bne.n	800414e <xQueueGenericSendFromISR+0x6e>
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <xQueueGenericSendFromISR+0x72>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueGenericSendFromISR+0x74>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	623b      	str	r3, [r7, #32]
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004170:	f002 f9e2 	bl	8006538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004174:	f3ef 8211 	mrs	r2, BASEPRI
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800418c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <xQueueGenericSendFromISR+0xc2>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d12f      	bne.n	8004202 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041b8:	f000 fa3a 	bl	8004630 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c4:	d112      	bne.n	80041ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	3324      	adds	r3, #36	@ 0x24
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f896 	bl	8005304 <xTaskRemoveFromEventList>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e007      	b.n	80041fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041f0:	3301      	adds	r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	b25a      	sxtb	r2, r3
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041fc:	2301      	movs	r3, #1
 80041fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004200:	e001      	b.n	8004206 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004202:	2300      	movs	r3, #0
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004214:	4618      	mov	r0, r3
 8004216:	3740      	adds	r7, #64	@ 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	@ 0x30
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <xQueueReceive+0x32>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	623b      	str	r3, [r7, #32]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <xQueueReceive+0x40>
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <xQueueReceive+0x44>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <xQueueReceive+0x46>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <xQueueReceive+0x62>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	61fb      	str	r3, [r7, #28]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f001 fa11 	bl	80056a4 <xTaskGetSchedulerState>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <xQueueReceive+0x72>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueReceive+0x76>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueReceive+0x78>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <xQueueReceive+0x94>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61bb      	str	r3, [r7, #24]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042b0:	f002 f862 	bl	8006378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01f      	beq.n	8004300 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c4:	f000 fa1e 	bl	8004704 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00f      	beq.n	80042f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	3310      	adds	r3, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 f811 	bl	8005304 <xTaskRemoveFromEventList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042e8:	4b3c      	ldr	r3, [pc, #240]	@ (80043dc <xQueueReceive+0x1c0>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042f8:	f002 f870 	bl	80063dc <vPortExitCritical>
				return pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e069      	b.n	80043d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004306:	f002 f869 	bl	80063dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800430a:	2300      	movs	r3, #0
 800430c:	e062      	b.n	80043d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800430e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f857 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004322:	f002 f85b 	bl	80063dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004326:	f000 fdb5 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800432a:	f002 f825 	bl	8006378 <vPortEnterCritical>
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004334:	b25b      	sxtb	r3, r3
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800433a:	d103      	bne.n	8004344 <xQueueReceive+0x128>
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800434a:	b25b      	sxtb	r3, r3
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004350:	d103      	bne.n	800435a <xQueueReceive+0x13e>
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800435a:	f002 f83f 	bl	80063dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435e:	1d3a      	adds	r2, r7, #4
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f846 	bl	80053f8 <xTaskCheckForTimeOut>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d123      	bne.n	80043ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004374:	f000 fa3e 	bl	80047f4 <prvIsQueueEmpty>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	3324      	adds	r3, #36	@ 0x24
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ff6a 	bl	8005260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800438c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800438e:	f000 f9df 	bl	8004750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004392:	f000 fd8d 	bl	8004eb0 <xTaskResumeAll>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d189      	bne.n	80042b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <xQueueReceive+0x1c0>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	e780      	b.n	80042b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b0:	f000 f9ce 	bl	8004750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043b4:	f000 fd7c 	bl	8004eb0 <xTaskResumeAll>
 80043b8:	e77a      	b.n	80042b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043bc:	f000 f9c8 	bl	8004750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043c0:	f000 fd76 	bl	8004eb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c6:	f000 fa15 	bl	80047f4 <prvIsQueueEmpty>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f43f af6f 	beq.w	80042b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3730      	adds	r7, #48	@ 0x30
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	@ 0x38
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00b      	beq.n	8004434 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	61fb      	str	r3, [r7, #28]
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004434:	f001 f936 	bl	80056a4 <xTaskGetSchedulerState>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <xQueueSemaphoreTake+0x64>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <xQueueSemaphoreTake+0x68>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <xQueueSemaphoreTake+0x6a>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61bb      	str	r3, [r7, #24]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004466:	f001 ff87 	bl	8006378 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	d024      	beq.n	80044c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004486:	f001 fa87 	bl	8005998 <pvTaskIncrementMutexHeldCount>
 800448a:	4602      	mov	r2, r0
 800448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	3310      	adds	r3, #16
 800449c:	4618      	mov	r0, r3
 800449e:	f000 ff31 	bl	8005304 <xTaskRemoveFromEventList>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044a8:	4b54      	ldr	r3, [pc, #336]	@ (80045fc <xQueueSemaphoreTake+0x21c>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044b8:	f001 ff90 	bl	80063dc <vPortExitCritical>
				return pdPASS;
 80044bc:	2301      	movs	r3, #1
 80044be:	e098      	b.n	80045f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d112      	bne.n	80044ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80044e4:	f001 ff7a 	bl	80063dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e082      	b.n	80045f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ff68 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004500:	f001 ff6c 	bl	80063dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004504:	f000 fcc6 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004508:	f001 ff36 	bl	8006378 <vPortEnterCritical>
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004518:	d103      	bne.n	8004522 <xQueueSemaphoreTake+0x142>
 800451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004528:	b25b      	sxtb	r3, r3
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800452e:	d103      	bne.n	8004538 <xQueueSemaphoreTake+0x158>
 8004530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004538:	f001 ff50 	bl	80063dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800453c:	463a      	mov	r2, r7
 800453e:	f107 030c 	add.w	r3, r7, #12
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 ff57 	bl	80053f8 <xTaskCheckForTimeOut>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d132      	bne.n	80045b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004552:	f000 f94f 	bl	80047f4 <prvIsQueueEmpty>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d026      	beq.n	80045aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004564:	f001 ff08 	bl	8006378 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f8b7 	bl	80056e0 <xTaskPriorityInherit>
 8004572:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004574:	f001 ff32 	bl	80063dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457a:	3324      	adds	r3, #36	@ 0x24
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fe6d 	bl	8005260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004588:	f000 f8e2 	bl	8004750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800458c:	f000 fc90 	bl	8004eb0 <xTaskResumeAll>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f47f af67 	bne.w	8004466 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004598:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <xQueueSemaphoreTake+0x21c>)
 800459a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	e75d      	b.n	8004466 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80045aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045ac:	f000 f8d0 	bl	8004750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b0:	f000 fc7e 	bl	8004eb0 <xTaskResumeAll>
 80045b4:	e757      	b.n	8004466 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80045b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045b8:	f000 f8ca 	bl	8004750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045bc:	f000 fc78 	bl	8004eb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045c2:	f000 f917 	bl	80047f4 <prvIsQueueEmpty>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f43f af4c 	beq.w	8004466 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80045d4:	f001 fed0 	bl	8006378 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045da:	f000 f811 	bl	8004600 <prvGetDisinheritPriorityAfterTimeout>
 80045de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 f952 	bl	8005890 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80045ec:	f001 fef6 	bl	80063dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3738      	adds	r7, #56	@ 0x38
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e001      	b.n	8004622 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004622:	68fb      	ldr	r3, [r7, #12]
	}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d14d      	bne.n	80046f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4618      	mov	r0, r3
 800465c:	f001 f8a8 	bl	80057b0 <xTaskPriorityDisinherit>
 8004660:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	e043      	b.n	80046f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d119      	bne.n	80046a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6858      	ldr	r0, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	461a      	mov	r2, r3
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	f002 ff9d 	bl	80075ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	d32b      	bcc.n	80046f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e026      	b.n	80046f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68d8      	ldr	r0, [r3, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	461a      	mov	r2, r3
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	f002 ff83 	bl	80075ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	425b      	negs	r3, r3
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d207      	bcs.n	80046e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	425b      	negs	r3, r3
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d105      	bne.n	80046f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80046fa:	697b      	ldr	r3, [r7, #20]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	441a      	add	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	d303      	bcc.n	8004738 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68d9      	ldr	r1, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	461a      	mov	r2, r3
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	f002 ff39 	bl	80075ba <memcpy>
	}
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004758:	f001 fe0e 	bl	8006378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004762:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004764:	e011      	b.n	800478a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3324      	adds	r3, #36	@ 0x24
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fdc6 	bl	8005304 <xTaskRemoveFromEventList>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800477e:	f000 fe9f 	bl	80054c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3b01      	subs	r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800478a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	dce9      	bgt.n	8004766 <prvUnlockQueue+0x16>
 8004792:	e000      	b.n	8004796 <prvUnlockQueue+0x46>
					break;
 8004794:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800479e:	f001 fe1d 	bl	80063dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047a2:	f001 fde9 	bl	8006378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ae:	e011      	b.n	80047d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3310      	adds	r3, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fda1 	bl	8005304 <xTaskRemoveFromEventList>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047c8:	f000 fe7a 	bl	80054c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047cc:	7bbb      	ldrb	r3, [r7, #14]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dce9      	bgt.n	80047b0 <prvUnlockQueue+0x60>
 80047dc:	e000      	b.n	80047e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	22ff      	movs	r2, #255	@ 0xff
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047e8:	f001 fdf8 	bl	80063dc <vPortExitCritical>
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047fc:	f001 fdbc 	bl	8006378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e001      	b.n	8004812 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004812:	f001 fde3 	bl	80063dc <vPortExitCritical>

	return xReturn;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004828:	f001 fda6 	bl	8006378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	429a      	cmp	r2, r3
 8004836:	d102      	bne.n	800483e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e001      	b.n	8004842 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004842:	f001 fdcb 	bl	80063dc <vPortExitCritical>

	return xReturn;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e014      	b.n	800488a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004860:	4a0f      	ldr	r2, [pc, #60]	@ (80048a0 <vQueueAddToRegistry+0x50>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800486c:	490c      	ldr	r1, [pc, #48]	@ (80048a0 <vQueueAddToRegistry+0x50>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <vQueueAddToRegistry+0x50>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004882:	e006      	b.n	8004892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b07      	cmp	r3, #7
 800488e:	d9e7      	bls.n	8004860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000097c 	.word	0x2000097c

080048a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048b4:	f001 fd60 	bl	8006378 <vPortEnterCritical>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048c4:	d103      	bne.n	80048ce <vQueueWaitForMessageRestricted+0x2a>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048da:	d103      	bne.n	80048e4 <vQueueWaitForMessageRestricted+0x40>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048e4:	f001 fd7a 	bl	80063dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3324      	adds	r3, #36	@ 0x24
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fcd7 	bl	80052ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048fe:	6978      	ldr	r0, [r7, #20]
 8004900:	f7ff ff26 	bl	8004750 <prvUnlockQueue>
	}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	@ 0x38
 8004910:	af04      	add	r7, sp, #16
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <xTaskCreateStatic+0x4a>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	61fb      	str	r3, [r7, #28]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004956:	235c      	movs	r3, #92	@ 0x5c
 8004958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b5c      	cmp	r3, #92	@ 0x5c
 800495e:	d00b      	beq.n	8004978 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	61bb      	str	r3, [r7, #24]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004978:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01e      	beq.n	80049be <xTaskCreateStatic+0xb2>
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004998:	2300      	movs	r3, #0
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f850 	bl	8004a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049b8:	f000 f8de 	bl	8004b78 <prvAddNewTaskToReadyList>
 80049bc:	e001      	b.n	80049c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049c2:	697b      	ldr	r3, [r7, #20]
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	@ 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	@ 0x30
 80049d0:	af04      	add	r7, sp, #16
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fdeb 	bl	80065bc <pvPortMalloc>
 80049e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049ee:	205c      	movs	r0, #92	@ 0x5c
 80049f0:	f001 fde4 	bl	80065bc <pvPortMalloc>
 80049f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a02:	e005      	b.n	8004a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f001 fea7 	bl	8006758 <vPortFree>
 8004a0a:	e001      	b.n	8004a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f80e 	bl	8004a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a3a:	69f8      	ldr	r0, [r7, #28]
 8004a3c:	f000 f89c 	bl	8004b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a40:	2301      	movs	r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e002      	b.n	8004a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	21a5      	movs	r1, #165	@ 0xa5
 8004a70:	f002 fd23 	bl	80074ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	617b      	str	r3, [r7, #20]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01f      	beq.n	8004af6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e012      	b.n	8004ae2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	7819      	ldrb	r1, [r3, #0]
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	3334      	adds	r3, #52	@ 0x34
 8004acc:	460a      	mov	r2, r1
 8004ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d9e9      	bls.n	8004abc <prvInitialiseNewTask+0x66>
 8004ae8:	e000      	b.n	8004aec <prvInitialiseNewTask+0x96>
			{
				break;
 8004aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004af4:	e003      	b.n	8004afe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b00:	2b37      	cmp	r3, #55	@ 0x37
 8004b02:	d901      	bls.n	8004b08 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b04:	2337      	movs	r3, #55	@ 0x37
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b12:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe ff4a 	bl	80039b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	3318      	adds	r3, #24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe ff45 	bl	80039b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	2200      	movs	r2, #0
 8004b48:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	69b8      	ldr	r0, [r7, #24]
 8004b58:	f001 fae0 	bl	800611c <pxPortInitialiseStack>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6e:	bf00      	nop
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b80:	f001 fbfa 	bl	8006378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b84:	4b2d      	ldr	r3, [pc, #180]	@ (8004c3c <prvAddNewTaskToReadyList+0xc4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <prvAddNewTaskToReadyList+0xc4>)
 8004b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c40 <prvAddNewTaskToReadyList+0xc8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b96:	4a2a      	ldr	r2, [pc, #168]	@ (8004c40 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <prvAddNewTaskToReadyList+0xc4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d110      	bne.n	8004bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ba4:	f000 fcb0 	bl	8005508 <prvInitialiseTaskLists>
 8004ba8:	e00d      	b.n	8004bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004baa:	4b26      	ldr	r3, [pc, #152]	@ (8004c44 <prvAddNewTaskToReadyList+0xcc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bb2:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <prvAddNewTaskToReadyList+0xc8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d802      	bhi.n	8004bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c40 <prvAddNewTaskToReadyList+0xc8>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bc6:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <prvAddNewTaskToReadyList+0xd0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <prvAddNewTaskToReadyList+0xd0>)
 8004bce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c48 <prvAddNewTaskToReadyList+0xd0>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <prvAddNewTaskToReadyList+0xd4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d903      	bls.n	8004bec <prvAddNewTaskToReadyList+0x74>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <prvAddNewTaskToReadyList+0xd4>)
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a15      	ldr	r2, [pc, #84]	@ (8004c50 <prvAddNewTaskToReadyList+0xd8>)
 8004bfa:	441a      	add	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f7fe fee5 	bl	80039d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c08:	f001 fbe8 	bl	80063dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <prvAddNewTaskToReadyList+0xcc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00e      	beq.n	8004c32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <prvAddNewTaskToReadyList+0xc8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d207      	bcs.n	8004c32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvAddNewTaskToReadyList+0xdc>)
 8004c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000e90 	.word	0x20000e90
 8004c40:	200009bc 	.word	0x200009bc
 8004c44:	20000e9c 	.word	0x20000e9c
 8004c48:	20000eac 	.word	0x20000eac
 8004c4c:	20000e98 	.word	0x20000e98
 8004c50:	200009c0 	.word	0x200009c0
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	617b      	str	r3, [r7, #20]
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <vTaskDelayUntil+0x4a>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	613b      	str	r3, [r7, #16]
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <vTaskDelayUntil+0xf4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <vTaskDelayUntil+0x6a>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60fb      	str	r3, [r7, #12]
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	e7fd      	b.n	8004cbe <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004cc2:	f000 f8e7 	bl	8004e94 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004cc6:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <vTaskDelayUntil+0xf8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a3a      	ldr	r2, [r7, #32]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d20b      	bcs.n	8004cf8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d211      	bcs.n	8004d0e <vTaskDelayUntil+0xb6>
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d90d      	bls.n	8004d0e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf6:	e00a      	b.n	8004d0e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d303      	bcc.n	8004d0a <vTaskDelayUntil+0xb2>
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d901      	bls.n	8004d0e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d006      	beq.n	8004d28 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fe4c 	bl	80059c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004d28:	f000 f8c2 	bl	8004eb0 <xTaskResumeAll>
 8004d2c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004d34:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <vTaskDelayUntil+0xfc>)
 8004d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d44:	bf00      	nop
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000eb8 	.word	0x20000eb8
 8004d50:	20000e94 	.word	0x20000e94
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d6a:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <vTaskDelay+0x64>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <vTaskDelay+0x32>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60bb      	str	r3, [r7, #8]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d8a:	f000 f883 	bl	8004e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d8e:	2100      	movs	r1, #0
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fe15 	bl	80059c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d96:	f000 f88b 	bl	8004eb0 <xTaskResumeAll>
 8004d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004da2:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <vTaskDelay+0x68>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000eb8 	.word	0x20000eb8
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	@ 0x28
 8004dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	1d39      	adds	r1, r7, #4
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fd98 	bl	8003910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	9202      	str	r2, [sp, #8]
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	460a      	mov	r2, r1
 8004df2:	4922      	ldr	r1, [pc, #136]	@ (8004e7c <vTaskStartScheduler+0xb8>)
 8004df4:	4822      	ldr	r0, [pc, #136]	@ (8004e80 <vTaskStartScheduler+0xbc>)
 8004df6:	f7ff fd89 	bl	800490c <xTaskCreateStatic>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <vTaskStartScheduler+0xc0>)
 8004dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e00:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <vTaskStartScheduler+0xc0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e001      	b.n	8004e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d102      	bne.n	8004e1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e18:	f000 fe26 	bl	8005a68 <xTimerCreateTimerTask>
 8004e1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d116      	bne.n	8004e52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	613b      	str	r3, [r7, #16]
}
 8004e36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <vTaskStartScheduler+0xc4>)
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e40:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <vTaskStartScheduler+0xc8>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e46:	4b12      	ldr	r3, [pc, #72]	@ (8004e90 <vTaskStartScheduler+0xcc>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e4c:	f001 f9f0 	bl	8006230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e50:	e00f      	b.n	8004e72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e58:	d10b      	bne.n	8004e72 <vTaskStartScheduler+0xae>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60fb      	str	r3, [r7, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <vTaskStartScheduler+0xaa>
}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08009820 	.word	0x08009820
 8004e80:	080054d9 	.word	0x080054d9
 8004e84:	20000eb4 	.word	0x20000eb4
 8004e88:	20000eb0 	.word	0x20000eb0
 8004e8c:	20000e9c 	.word	0x20000e9c
 8004e90:	20000e94 	.word	0x20000e94

08004e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e98:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <vTaskSuspendAll+0x18>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a03      	ldr	r2, [pc, #12]	@ (8004eac <vTaskSuspendAll+0x18>)
 8004ea0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000eb8 	.word	0x20000eb8

08004eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ebe:	4b42      	ldr	r3, [pc, #264]	@ (8004fc8 <xTaskResumeAll+0x118>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <xTaskResumeAll+0x2e>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	603b      	str	r3, [r7, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ede:	f001 fa4b 	bl	8006378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ee2:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <xTaskResumeAll+0x118>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	4a37      	ldr	r2, [pc, #220]	@ (8004fc8 <xTaskResumeAll+0x118>)
 8004eea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eec:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <xTaskResumeAll+0x118>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d162      	bne.n	8004fba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef4:	4b35      	ldr	r3, [pc, #212]	@ (8004fcc <xTaskResumeAll+0x11c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05e      	beq.n	8004fba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efc:	e02f      	b.n	8004f5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efe:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <xTaskResumeAll+0x120>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3318      	adds	r3, #24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fdbe 	bl	8003a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fdb9 	bl	8003a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <xTaskResumeAll+0x124>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d903      	bls.n	8004f2e <xTaskResumeAll+0x7e>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd4 <xTaskResumeAll+0x124>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <xTaskResumeAll+0x128>)
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fe fd44 	bl	80039d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4e:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <xTaskResumeAll+0x12c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f58:	4b21      	ldr	r3, [pc, #132]	@ (8004fe0 <xTaskResumeAll+0x130>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <xTaskResumeAll+0x120>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1cb      	bne.n	8004efe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f6c:	f000 fb6a 	bl	8005644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f70:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe4 <xTaskResumeAll+0x134>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f7c:	f000 f858 	bl	8005030 <xTaskIncrementTick>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f86:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <xTaskResumeAll+0x130>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f1      	bne.n	8004f7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f98:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <xTaskResumeAll+0x134>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f9e:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <xTaskResumeAll+0x130>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <xTaskResumeAll+0x138>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fa0f 	bl	80063dc <vPortExitCritical>

	return xAlreadyYielded;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000eb8 	.word	0x20000eb8
 8004fcc:	20000e90 	.word	0x20000e90
 8004fd0:	20000e50 	.word	0x20000e50
 8004fd4:	20000e98 	.word	0x20000e98
 8004fd8:	200009c0 	.word	0x200009c0
 8004fdc:	200009bc 	.word	0x200009bc
 8004fe0:	20000ea4 	.word	0x20000ea4
 8004fe4:	20000ea0 	.word	0x20000ea0
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ff2:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <xTaskGetTickCount+0x1c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ff8:	687b      	ldr	r3, [r7, #4]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000e94 	.word	0x20000e94

0800500c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005012:	f001 fa91 	bl	8006538 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800501a:	4b04      	ldr	r3, [pc, #16]	@ (800502c <xTaskGetTickCountFromISR+0x20>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005020:	683b      	ldr	r3, [r7, #0]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000e94 	.word	0x20000e94

08005030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503a:	4b4f      	ldr	r3, [pc, #316]	@ (8005178 <xTaskIncrementTick+0x148>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 8090 	bne.w	8005164 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005044:	4b4d      	ldr	r3, [pc, #308]	@ (800517c <xTaskIncrementTick+0x14c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800504c:	4a4b      	ldr	r2, [pc, #300]	@ (800517c <xTaskIncrementTick+0x14c>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d121      	bne.n	800509c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005058:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <xTaskIncrementTick+0x150>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	603b      	str	r3, [r7, #0]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xTaskIncrementTick+0x46>
 800507a:	4b41      	ldr	r3, [pc, #260]	@ (8005180 <xTaskIncrementTick+0x150>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	4b40      	ldr	r3, [pc, #256]	@ (8005184 <xTaskIncrementTick+0x154>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3e      	ldr	r2, [pc, #248]	@ (8005180 <xTaskIncrementTick+0x150>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	4a3e      	ldr	r2, [pc, #248]	@ (8005184 <xTaskIncrementTick+0x154>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b3e      	ldr	r3, [pc, #248]	@ (8005188 <xTaskIncrementTick+0x158>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	4a3c      	ldr	r2, [pc, #240]	@ (8005188 <xTaskIncrementTick+0x158>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	f000 fad4 	bl	8005644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800509c:	4b3b      	ldr	r3, [pc, #236]	@ (800518c <xTaskIncrementTick+0x15c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d349      	bcc.n	800513a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050a6:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <xTaskIncrementTick+0x150>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b0:	4b36      	ldr	r3, [pc, #216]	@ (800518c <xTaskIncrementTick+0x15c>)
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050b6:	601a      	str	r2, [r3, #0]
					break;
 80050b8:	e03f      	b.n	800513a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ba:	4b31      	ldr	r3, [pc, #196]	@ (8005180 <xTaskIncrementTick+0x150>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050d2:	4a2e      	ldr	r2, [pc, #184]	@ (800518c <xTaskIncrementTick+0x15c>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050d8:	e02f      	b.n	800513a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3304      	adds	r3, #4
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fcd4 	bl	8003a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	3318      	adds	r3, #24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fccb 	bl	8003a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fa:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <xTaskIncrementTick+0x160>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <xTaskIncrementTick+0xda>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a22      	ldr	r2, [pc, #136]	@ (8005190 <xTaskIncrementTick+0x160>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <xTaskIncrementTick+0x164>)
 8005118:	441a      	add	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fe fc56 	bl	80039d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512a:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <xTaskIncrementTick+0x168>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d3b8      	bcc.n	80050a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005138:	e7b5      	b.n	80050a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800513a:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <xTaskIncrementTick+0x168>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005140:	4914      	ldr	r1, [pc, #80]	@ (8005194 <xTaskIncrementTick+0x164>)
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d901      	bls.n	8005156 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005156:	4b11      	ldr	r3, [pc, #68]	@ (800519c <xTaskIncrementTick+0x16c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e004      	b.n	800516e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <xTaskIncrementTick+0x170>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a0d      	ldr	r2, [pc, #52]	@ (80051a0 <xTaskIncrementTick+0x170>)
 800516c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800516e:	697b      	ldr	r3, [r7, #20]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000eb8 	.word	0x20000eb8
 800517c:	20000e94 	.word	0x20000e94
 8005180:	20000e48 	.word	0x20000e48
 8005184:	20000e4c 	.word	0x20000e4c
 8005188:	20000ea8 	.word	0x20000ea8
 800518c:	20000eb0 	.word	0x20000eb0
 8005190:	20000e98 	.word	0x20000e98
 8005194:	200009c0 	.word	0x200009c0
 8005198:	200009bc 	.word	0x200009bc
 800519c:	20000ea4 	.word	0x20000ea4
 80051a0:	20000ea0 	.word	0x20000ea0

080051a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051aa:	4b28      	ldr	r3, [pc, #160]	@ (800524c <vTaskSwitchContext+0xa8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051b2:	4b27      	ldr	r3, [pc, #156]	@ (8005250 <vTaskSwitchContext+0xac>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051b8:	e042      	b.n	8005240 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80051ba:	4b25      	ldr	r3, [pc, #148]	@ (8005250 <vTaskSwitchContext+0xac>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c0:	4b24      	ldr	r3, [pc, #144]	@ (8005254 <vTaskSwitchContext+0xb0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e011      	b.n	80051ec <vTaskSwitchContext+0x48>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	607b      	str	r3, [r7, #4]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <vTaskSwitchContext+0x3e>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	491a      	ldr	r1, [pc, #104]	@ (8005258 <vTaskSwitchContext+0xb4>)
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0e3      	beq.n	80051c8 <vTaskSwitchContext+0x24>
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a13      	ldr	r2, [pc, #76]	@ (8005258 <vTaskSwitchContext+0xb4>)
 800520c:	4413      	add	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	3308      	adds	r3, #8
 8005222:	429a      	cmp	r2, r3
 8005224:	d104      	bne.n	8005230 <vTaskSwitchContext+0x8c>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4a09      	ldr	r2, [pc, #36]	@ (800525c <vTaskSwitchContext+0xb8>)
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4a06      	ldr	r2, [pc, #24]	@ (8005254 <vTaskSwitchContext+0xb0>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000eb8 	.word	0x20000eb8
 8005250:	20000ea4 	.word	0x20000ea4
 8005254:	20000e98 	.word	0x20000e98
 8005258:	200009c0 	.word	0x200009c0
 800525c:	200009bc 	.word	0x200009bc

08005260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005288:	4b07      	ldr	r3, [pc, #28]	@ (80052a8 <vTaskPlaceOnEventList+0x48>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3318      	adds	r3, #24
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fe fbc2 	bl	8003a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005296:	2101      	movs	r1, #1
 8005298:	6838      	ldr	r0, [r7, #0]
 800529a:	f000 fb91 	bl	80059c0 <prvAddCurrentTaskToDelayedList>
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200009bc 	.word	0x200009bc

080052ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10b      	bne.n	80052d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	e7fd      	b.n	80052d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <vTaskPlaceOnEventListRestricted+0x54>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3318      	adds	r3, #24
 80052dc:	4619      	mov	r1, r3
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7fe fb77 	bl	80039d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	68b8      	ldr	r0, [r7, #8]
 80052f4:	f000 fb64 	bl	80059c0 <prvAddCurrentTaskToDelayedList>
	}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200009bc 	.word	0x200009bc

08005304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60fb      	str	r3, [r7, #12]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3318      	adds	r3, #24
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fba8 	bl	8003a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800533c:	4b1d      	ldr	r3, [pc, #116]	@ (80053b4 <xTaskRemoveFromEventList+0xb0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11d      	bne.n	8005380 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fb9f 	bl	8003a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <xTaskRemoveFromEventList+0xb4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d903      	bls.n	8005362 <xTaskRemoveFromEventList+0x5e>
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	4a16      	ldr	r2, [pc, #88]	@ (80053b8 <xTaskRemoveFromEventList+0xb4>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <xTaskRemoveFromEventList+0xb8>)
 8005370:	441a      	add	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7fe fb2a 	bl	80039d2 <vListInsertEnd>
 800537e:	e005      	b.n	800538c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	3318      	adds	r3, #24
 8005384:	4619      	mov	r1, r3
 8005386:	480e      	ldr	r0, [pc, #56]	@ (80053c0 <xTaskRemoveFromEventList+0xbc>)
 8005388:	f7fe fb23 	bl	80039d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005390:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <xTaskRemoveFromEventList+0xc0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	429a      	cmp	r2, r3
 8005398:	d905      	bls.n	80053a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800539e:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <xTaskRemoveFromEventList+0xc4>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e001      	b.n	80053aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000eb8 	.word	0x20000eb8
 80053b8:	20000e98 	.word	0x20000e98
 80053bc:	200009c0 	.word	0x200009c0
 80053c0:	20000e50 	.word	0x20000e50
 80053c4:	200009bc 	.word	0x200009bc
 80053c8:	20000ea4 	.word	0x20000ea4

080053cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053d4:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <vTaskInternalSetTimeOutState+0x24>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <vTaskInternalSetTimeOutState+0x28>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000ea8 	.word	0x20000ea8
 80053f4:	20000e94 	.word	0x20000e94

080053f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	613b      	str	r3, [r7, #16]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60fb      	str	r3, [r7, #12]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800543e:	f000 ff9b 	bl	8006378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005442:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <xTaskCheckForTimeOut+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800545a:	d102      	bne.n	8005462 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e023      	b.n	80054aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <xTaskCheckForTimeOut+0xc4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d007      	beq.n	800547e <xTaskCheckForTimeOut+0x86>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e015      	b.n	80054aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	d20b      	bcs.n	80054a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff99 	bl	80053cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e004      	b.n	80054aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054aa:	f000 ff97 	bl	80063dc <vPortExitCritical>

	return xReturn;
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000e94 	.word	0x20000e94
 80054bc:	20000ea8 	.word	0x20000ea8

080054c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054c4:	4b03      	ldr	r3, [pc, #12]	@ (80054d4 <vTaskMissedYield+0x14>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20000ea4 	.word	0x20000ea4

080054d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054e0:	f000 f852 	bl	8005588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <prvIdleTask+0x28>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d9f9      	bls.n	80054e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <prvIdleTask+0x2c>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054fc:	e7f0      	b.n	80054e0 <prvIdleTask+0x8>
 80054fe:	bf00      	nop
 8005500:	200009c0 	.word	0x200009c0
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	e00c      	b.n	800552e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4a12      	ldr	r2, [pc, #72]	@ (8005568 <prvInitialiseTaskLists+0x60>)
 8005520:	4413      	add	r3, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fa28 	bl	8003978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3301      	adds	r3, #1
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b37      	cmp	r3, #55	@ 0x37
 8005532:	d9ef      	bls.n	8005514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005534:	480d      	ldr	r0, [pc, #52]	@ (800556c <prvInitialiseTaskLists+0x64>)
 8005536:	f7fe fa1f 	bl	8003978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800553a:	480d      	ldr	r0, [pc, #52]	@ (8005570 <prvInitialiseTaskLists+0x68>)
 800553c:	f7fe fa1c 	bl	8003978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005540:	480c      	ldr	r0, [pc, #48]	@ (8005574 <prvInitialiseTaskLists+0x6c>)
 8005542:	f7fe fa19 	bl	8003978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005546:	480c      	ldr	r0, [pc, #48]	@ (8005578 <prvInitialiseTaskLists+0x70>)
 8005548:	f7fe fa16 	bl	8003978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800554c:	480b      	ldr	r0, [pc, #44]	@ (800557c <prvInitialiseTaskLists+0x74>)
 800554e:	f7fe fa13 	bl	8003978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005552:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <prvInitialiseTaskLists+0x78>)
 8005554:	4a05      	ldr	r2, [pc, #20]	@ (800556c <prvInitialiseTaskLists+0x64>)
 8005556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005558:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <prvInitialiseTaskLists+0x7c>)
 800555a:	4a05      	ldr	r2, [pc, #20]	@ (8005570 <prvInitialiseTaskLists+0x68>)
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200009c0 	.word	0x200009c0
 800556c:	20000e20 	.word	0x20000e20
 8005570:	20000e34 	.word	0x20000e34
 8005574:	20000e50 	.word	0x20000e50
 8005578:	20000e64 	.word	0x20000e64
 800557c:	20000e7c 	.word	0x20000e7c
 8005580:	20000e48 	.word	0x20000e48
 8005584:	20000e4c 	.word	0x20000e4c

08005588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558e:	e019      	b.n	80055c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005590:	f000 fef2 	bl	8006378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005594:	4b10      	ldr	r3, [pc, #64]	@ (80055d8 <prvCheckTasksWaitingTermination+0x50>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fa73 	bl	8003a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055a6:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	@ (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4a0a      	ldr	r2, [pc, #40]	@ (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ba:	f000 ff0f 	bl	80063dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f810 	bl	80055e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c4:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e1      	bne.n	8005590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000e64 	.word	0x20000e64
 80055dc:	20000e90 	.word	0x20000e90
 80055e0:	20000e78 	.word	0x20000e78

080055e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f8ac 	bl	8006758 <vPortFree>
				vPortFree( pxTCB );
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f8a9 	bl	8006758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005606:	e019      	b.n	800563c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800560e:	2b01      	cmp	r3, #1
 8005610:	d103      	bne.n	800561a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 f8a0 	bl	8006758 <vPortFree>
	}
 8005618:	e010      	b.n	800563c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005620:	2b02      	cmp	r3, #2
 8005622:	d00b      	beq.n	800563c <prvDeleteTCB+0x58>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <prvDeleteTCB+0x54>
	}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800564a:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <prvResetNextTaskUnblockTime+0x38>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005654:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <prvResetNextTaskUnblockTime+0x3c>)
 8005656:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800565a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800565c:	e008      	b.n	8005670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <prvResetNextTaskUnblockTime+0x38>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a04      	ldr	r2, [pc, #16]	@ (8005680 <prvResetNextTaskUnblockTime+0x3c>)
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	20000e48 	.word	0x20000e48
 8005680:	20000eb0 	.word	0x20000eb0

08005684 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005690:	687b      	ldr	r3, [r7, #4]
	}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	200009bc 	.word	0x200009bc

080056a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <xTaskGetSchedulerState+0x34>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056b2:	2301      	movs	r3, #1
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	e008      	b.n	80056ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b8:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <xTaskGetSchedulerState+0x38>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056c0:	2302      	movs	r3, #2
 80056c2:	607b      	str	r3, [r7, #4]
 80056c4:	e001      	b.n	80056ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056ca:	687b      	ldr	r3, [r7, #4]
	}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000e9c 	.word	0x20000e9c
 80056dc:	20000eb8 	.word	0x20000eb8

080056e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d051      	beq.n	800579a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fa:	4b2a      	ldr	r3, [pc, #168]	@ (80057a4 <xTaskPriorityInherit+0xc4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d241      	bcs.n	8005788 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	db06      	blt.n	800571a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <xTaskPriorityInherit+0xc4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6959      	ldr	r1, [r3, #20]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a1f      	ldr	r2, [pc, #124]	@ (80057a8 <xTaskPriorityInherit+0xc8>)
 800572c:	4413      	add	r3, r2
 800572e:	4299      	cmp	r1, r3
 8005730:	d122      	bne.n	8005778 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3304      	adds	r3, #4
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe f9a8 	bl	8003a8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800573c:	4b19      	ldr	r3, [pc, #100]	@ (80057a4 <xTaskPriorityInherit+0xc4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	4b18      	ldr	r3, [pc, #96]	@ (80057ac <xTaskPriorityInherit+0xcc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d903      	bls.n	800575a <xTaskPriorityInherit+0x7a>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <xTaskPriorityInherit+0xcc>)
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4a10      	ldr	r2, [pc, #64]	@ (80057a8 <xTaskPriorityInherit+0xc8>)
 8005768:	441a      	add	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3304      	adds	r3, #4
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f7fe f92e 	bl	80039d2 <vListInsertEnd>
 8005776:	e004      	b.n	8005782 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <xTaskPriorityInherit+0xc4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e008      	b.n	800579a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <xTaskPriorityInherit+0xc4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	429a      	cmp	r2, r3
 8005794:	d201      	bcs.n	800579a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800579a:	68fb      	ldr	r3, [r7, #12]
	}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	200009bc 	.word	0x200009bc
 80057a8:	200009c0 	.word	0x200009c0
 80057ac:	20000e98 	.word	0x20000e98

080057b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d058      	beq.n	8005878 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005884 <xTaskPriorityDisinherit+0xd4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d00b      	beq.n	80057e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60bb      	str	r3, [r7, #8]
}
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	e7fd      	b.n	8005804 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580c:	1e5a      	subs	r2, r3, #1
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581a:	429a      	cmp	r2, r3
 800581c:	d02c      	beq.n	8005878 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005822:	2b00      	cmp	r3, #0
 8005824:	d128      	bne.n	8005878 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe f92e 	bl	8003a8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005848:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <xTaskPriorityDisinherit+0xd8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d903      	bls.n	8005858 <xTaskPriorityDisinherit+0xa8>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <xTaskPriorityDisinherit+0xd8>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4a09      	ldr	r2, [pc, #36]	@ (800588c <xTaskPriorityDisinherit+0xdc>)
 8005866:	441a      	add	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe f8af 	bl	80039d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005878:	697b      	ldr	r3, [r7, #20]
	}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200009bc 	.word	0x200009bc
 8005888:	20000e98 	.word	0x20000e98
 800588c:	200009c0 	.word	0x200009c0

08005890 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800589e:	2301      	movs	r3, #1
 80058a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d06c      	beq.n	8005982 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60fb      	str	r3, [r7, #12]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d902      	bls.n	80058d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e002      	b.n	80058de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d04c      	beq.n	8005982 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d147      	bne.n	8005982 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058f2:	4b26      	ldr	r3, [pc, #152]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d10b      	bne.n	8005914 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	db04      	blt.n	8005932 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	6959      	ldr	r1, [r3, #20]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005942:	4413      	add	r3, r2
 8005944:	4299      	cmp	r1, r3
 8005946:	d11c      	bne.n	8005982 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe f89d 	bl	8003a8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d903      	bls.n	8005966 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a07      	ldr	r2, [pc, #28]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005974:	441a      	add	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7fe f828 	bl	80039d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005982:	bf00      	nop
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200009bc 	.word	0x200009bc
 8005990:	200009c0 	.word	0x200009c0
 8005994:	20000e98 	.word	0x20000e98

08005998 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800599c:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <pvTaskIncrementMutexHeldCount+0x24>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <pvTaskIncrementMutexHeldCount+0x24>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059aa:	3201      	adds	r2, #1
 80059ac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80059ae:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <pvTaskIncrementMutexHeldCount+0x24>)
 80059b0:	681b      	ldr	r3, [r3, #0]
	}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	200009bc 	.word	0x200009bc

080059c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ca:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0x90>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d0:	4b20      	ldr	r3, [pc, #128]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe f858 	bl	8003a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e2:	d10a      	bne.n	80059fa <prvAddCurrentTaskToDelayedList+0x3a>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4819      	ldr	r0, [pc, #100]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x98>)
 80059f4:	f7fd ffed 	bl	80039d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059f8:	e026      	b.n	8005a48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a02:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d209      	bcs.n	8005a26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a12:	4b12      	ldr	r3, [pc, #72]	@ (8005a5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b0f      	ldr	r3, [pc, #60]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fd fffb 	bl	8003a1a <vListInsert>
}
 8005a24:	e010      	b.n	8005a48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a26:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7fd fff1 	bl	8003a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a38:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d202      	bcs.n	8005a48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a42:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6013      	str	r3, [r2, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000e94 	.word	0x20000e94
 8005a54:	200009bc 	.word	0x200009bc
 8005a58:	20000e7c 	.word	0x20000e7c
 8005a5c:	20000e4c 	.word	0x20000e4c
 8005a60:	20000e48 	.word	0x20000e48
 8005a64:	20000eb0 	.word	0x20000eb0

08005a68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a72:	f000 fb13 	bl	800609c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a76:	4b1d      	ldr	r3, [pc, #116]	@ (8005aec <xTimerCreateTimerTask+0x84>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d021      	beq.n	8005ac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	f107 0108 	add.w	r1, r7, #8
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fd ff57 	bl	8003944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	9202      	str	r2, [sp, #8]
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	4911      	ldr	r1, [pc, #68]	@ (8005af0 <xTimerCreateTimerTask+0x88>)
 8005aaa:	4812      	ldr	r0, [pc, #72]	@ (8005af4 <xTimerCreateTimerTask+0x8c>)
 8005aac:	f7fe ff2e 	bl	800490c <xTaskCreateStatic>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4a11      	ldr	r2, [pc, #68]	@ (8005af8 <xTimerCreateTimerTask+0x90>)
 8005ab4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ab6:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <xTimerCreateTimerTask+0x90>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	613b      	str	r3, [r7, #16]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000eec 	.word	0x20000eec
 8005af0:	08009828 	.word	0x08009828
 8005af4:	08005c35 	.word	0x08005c35
 8005af8:	20000ef0 	.word	0x20000ef0

08005afc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <xTimerGenericCommand+0x30>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	623b      	str	r3, [r7, #32]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b2c:	4b19      	ldr	r3, [pc, #100]	@ (8005b94 <xTimerGenericCommand+0x98>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d02a      	beq.n	8005b8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	dc18      	bgt.n	8005b78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b46:	f7ff fdad 	bl	80056a4 <xTaskGetSchedulerState>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d109      	bne.n	8005b64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b50:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <xTimerGenericCommand+0x98>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	f107 0110 	add.w	r1, r7, #16
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5c:	f7fe f9be 	bl	8003edc <xQueueGenericSend>
 8005b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b62:	e012      	b.n	8005b8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b64:	4b0b      	ldr	r3, [pc, #44]	@ (8005b94 <xTimerGenericCommand+0x98>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	f107 0110 	add.w	r1, r7, #16
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f7fe f9b4 	bl	8003edc <xQueueGenericSend>
 8005b74:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b76:	e008      	b.n	8005b8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b78:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <xTimerGenericCommand+0x98>)
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	f107 0110 	add.w	r1, r7, #16
 8005b80:	2300      	movs	r3, #0
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	f7fe faac 	bl	80040e0 <xQueueGenericSendFromISR>
 8005b88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	@ 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000eec 	.word	0x20000eec

08005b98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba2:	4b23      	ldr	r3, [pc, #140]	@ (8005c30 <prvProcessExpiredTimer+0x98>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fd ff6b 	bl	8003a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d023      	beq.n	8005c0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	18d1      	adds	r1, r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	6978      	ldr	r0, [r7, #20]
 8005bd2:	f000 f8d5 	bl	8005d80 <prvInsertTimerInActiveList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d020      	beq.n	8005c1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2300      	movs	r3, #0
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	2100      	movs	r1, #0
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff ff88 	bl	8005afc <xTimerGenericCommand>
 8005bec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d114      	bne.n	8005c1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60fb      	str	r3, [r7, #12]
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	4798      	blx	r3
}
 8005c26:	bf00      	nop
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000ee4 	.word	0x20000ee4

08005c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c3c:	f107 0308 	add.w	r3, r7, #8
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f859 	bl	8005cf8 <prvGetNextExpireTime>
 8005c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f805 	bl	8005c5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c52:	f000 f8d7 	bl	8005e04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c56:	bf00      	nop
 8005c58:	e7f0      	b.n	8005c3c <prvTimerTask+0x8>
	...

08005c5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c66:	f7ff f915 	bl	8004e94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f866 	bl	8005d40 <prvSampleTimeNow>
 8005c74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d130      	bne.n	8005cde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <prvProcessTimerOrBlockTask+0x3c>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d806      	bhi.n	8005c98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c8a:	f7ff f911 	bl	8004eb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff81 	bl	8005b98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c96:	e024      	b.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c9e:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <prvProcessTimerOrBlockTask+0x90>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <prvProcessTimerOrBlockTask+0x50>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <prvProcessTimerOrBlockTask+0x52>
 8005cac:	2300      	movs	r3, #0
 8005cae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <prvProcessTimerOrBlockTask+0x94>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fe fdf1 	bl	80048a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cc2:	f7ff f8f5 	bl	8004eb0 <xTaskResumeAll>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ccc:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <prvProcessTimerOrBlockTask+0x98>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
}
 8005cdc:	e001      	b.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cde:	f7ff f8e7 	bl	8004eb0 <xTaskResumeAll>
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000ee8 	.word	0x20000ee8
 8005cf0:	20000eec 	.word	0x20000eec
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d00:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <prvGetNextExpireTime+0x44>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <prvGetNextExpireTime+0x16>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	e000      	b.n	8005d10 <prvGetNextExpireTime+0x18>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <prvGetNextExpireTime+0x44>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e001      	b.n	8005d2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000ee4 	.word	0x20000ee4

08005d40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d48:	f7ff f950 	bl	8004fec <xTaskGetTickCount>
 8005d4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <prvSampleTimeNow+0x3c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d205      	bcs.n	8005d64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d58:	f000 f93a 	bl	8005fd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d6a:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <prvSampleTimeNow+0x3c>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000ef4 	.word	0x20000ef4

08005d80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d812      	bhi.n	8005dcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e01b      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dba:	4b10      	ldr	r3, [pc, #64]	@ (8005dfc <prvInsertTimerInActiveList+0x7c>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fd fe28 	bl	8003a1a <vListInsert>
 8005dca:	e012      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d206      	bcs.n	8005de2 <prvInsertTimerInActiveList+0x62>
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e007      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <prvInsertTimerInActiveList+0x80>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fd fe14 	bl	8003a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005df2:	697b      	ldr	r3, [r7, #20]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000ee8 	.word	0x20000ee8
 8005e00:	20000ee4 	.word	0x20000ee4

08005e04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	@ 0x38
 8005e08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e0a:	e0ce      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da19      	bge.n	8005e46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	3304      	adds	r3, #4
 8005e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3c:	6850      	ldr	r0, [r2, #4]
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	4611      	mov	r1, r2
 8005e44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f2c0 80ae 	blt.w	8005faa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd fe14 	bl	8003a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e64:	463b      	mov	r3, r7
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ff6a 	bl	8005d40 <prvSampleTimeNow>
 8005e6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b09      	cmp	r3, #9
 8005e72:	f200 8097 	bhi.w	8005fa4 <prvProcessReceivedCommands+0x1a0>
 8005e76:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <prvProcessReceivedCommands+0x78>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ea5 	.word	0x08005ea5
 8005e88:	08005f1b 	.word	0x08005f1b
 8005e8c:	08005f2f 	.word	0x08005f2f
 8005e90:	08005f7b 	.word	0x08005f7b
 8005e94:	08005ea5 	.word	0x08005ea5
 8005e98:	08005ea5 	.word	0x08005ea5
 8005e9c:	08005f1b 	.word	0x08005f1b
 8005ea0:	08005f2f 	.word	0x08005f2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	18d1      	adds	r1, r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec4:	f7ff ff5c 	bl	8005d80 <prvInsertTimerInActiveList>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d06c      	beq.n	8005fa8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d061      	beq.n	8005fa8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	441a      	add	r2, r3
 8005eec:	2300      	movs	r3, #0
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef6:	f7ff fe01 	bl	8005afc <xTimerGenericCommand>
 8005efa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d152      	bne.n	8005fa8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	61bb      	str	r3, [r7, #24]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f2c:	e03d      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	617b      	str	r3, [r7, #20]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	18d1      	adds	r1, r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f74:	f7ff ff04 	bl	8005d80 <prvInsertTimerInActiveList>
					break;
 8005f78:	e017      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8a:	f000 fbe5 	bl	8006758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f8e:	e00c      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fa2:	e002      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005fa4:	bf00      	nop
 8005fa6:	e000      	b.n	8005faa <prvProcessReceivedCommands+0x1a6>
					break;
 8005fa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005faa:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <prvProcessReceivedCommands+0x1c8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	1d39      	adds	r1, r7, #4
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe f932 	bl	800421c <xQueueReceive>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f af26 	bne.w	8005e0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3730      	adds	r7, #48	@ 0x30
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000eec 	.word	0x20000eec

08005fd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fd6:	e049      	b.n	800606c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd fd4b 	bl	8003a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02f      	beq.n	800606c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90e      	bls.n	800603c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b1a      	ldr	r3, [pc, #104]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fd fcf0 	bl	8003a1a <vListInsert>
 800603a:	e017      	b.n	800606c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800603c:	2300      	movs	r3, #0
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	2100      	movs	r1, #0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fd58 	bl	8005afc <xTimerGenericCommand>
 800604c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	603b      	str	r3, [r7, #0]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800606c:	4b09      	ldr	r3, [pc, #36]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1b0      	bne.n	8005fd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006076:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800607c:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <prvSwitchTimerLists+0xc8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a04      	ldr	r2, [pc, #16]	@ (8006094 <prvSwitchTimerLists+0xc4>)
 8006082:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006084:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <prvSwitchTimerLists+0xc8>)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6013      	str	r3, [r2, #0]
}
 800608a:	bf00      	nop
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000ee4 	.word	0x20000ee4
 8006098:	20000ee8 	.word	0x20000ee8

0800609c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060a2:	f000 f969 	bl	8006378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060a6:	4b15      	ldr	r3, [pc, #84]	@ (80060fc <prvCheckForValidListAndQueue+0x60>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d120      	bne.n	80060f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060ae:	4814      	ldr	r0, [pc, #80]	@ (8006100 <prvCheckForValidListAndQueue+0x64>)
 80060b0:	f7fd fc62 	bl	8003978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060b4:	4813      	ldr	r0, [pc, #76]	@ (8006104 <prvCheckForValidListAndQueue+0x68>)
 80060b6:	f7fd fc5f 	bl	8003978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060ba:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <prvCheckForValidListAndQueue+0x6c>)
 80060bc:	4a10      	ldr	r2, [pc, #64]	@ (8006100 <prvCheckForValidListAndQueue+0x64>)
 80060be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060c0:	4b12      	ldr	r3, [pc, #72]	@ (800610c <prvCheckForValidListAndQueue+0x70>)
 80060c2:	4a10      	ldr	r2, [pc, #64]	@ (8006104 <prvCheckForValidListAndQueue+0x68>)
 80060c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060c6:	2300      	movs	r3, #0
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <prvCheckForValidListAndQueue+0x74>)
 80060cc:	4a11      	ldr	r2, [pc, #68]	@ (8006114 <prvCheckForValidListAndQueue+0x78>)
 80060ce:	2110      	movs	r1, #16
 80060d0:	200a      	movs	r0, #10
 80060d2:	f7fd fd6f 	bl	8003bb4 <xQueueGenericCreateStatic>
 80060d6:	4603      	mov	r3, r0
 80060d8:	4a08      	ldr	r2, [pc, #32]	@ (80060fc <prvCheckForValidListAndQueue+0x60>)
 80060da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060dc:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <prvCheckForValidListAndQueue+0x60>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <prvCheckForValidListAndQueue+0x60>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	490b      	ldr	r1, [pc, #44]	@ (8006118 <prvCheckForValidListAndQueue+0x7c>)
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fbb0 	bl	8004850 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060f0:	f000 f974 	bl	80063dc <vPortExitCritical>
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000eec 	.word	0x20000eec
 8006100:	20000ebc 	.word	0x20000ebc
 8006104:	20000ed0 	.word	0x20000ed0
 8006108:	20000ee4 	.word	0x20000ee4
 800610c:	20000ee8 	.word	0x20000ee8
 8006110:	20000f98 	.word	0x20000f98
 8006114:	20000ef8 	.word	0x20000ef8
 8006118:	08009830 	.word	0x08009830

0800611c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3b04      	subs	r3, #4
 800612c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b04      	subs	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800614c:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <pxPortInitialiseStack+0x64>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b14      	subs	r3, #20
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3b04      	subs	r3, #4
 8006162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f06f 0202 	mvn.w	r2, #2
 800616a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b20      	subs	r3, #32
 8006170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	08006185 	.word	0x08006185

08006184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800618e:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <prvTaskExitError+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006196:	d00b      	beq.n	80061b0 <prvTaskExitError+0x2c>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	60fb      	str	r3, [r7, #12]
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <prvTaskExitError+0x28>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60bb      	str	r3, [r7, #8]
}
 80061c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c4:	bf00      	nop
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0fc      	beq.n	80061c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	2000000c 	.word	0x2000000c

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	4770      	bx	lr
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst2>:
 8006200:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006208:	4808      	ldr	r0, [pc, #32]	@ (800622c <prvPortStartFirstTask+0x24>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8814 	msr	CONTROL, r0
 800621a:	b662      	cpsie	i
 800621c:	b661      	cpsie	f
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	df00      	svc	0
 8006228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800622a:	bf00      	nop
 800622c:	e000ed08 	.word	0xe000ed08

08006230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006236:	4b47      	ldr	r3, [pc, #284]	@ (8006354 <xPortStartScheduler+0x124>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a47      	ldr	r2, [pc, #284]	@ (8006358 <xPortStartScheduler+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10b      	bne.n	8006258 <xPortStartScheduler+0x28>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006258:	4b3e      	ldr	r3, [pc, #248]	@ (8006354 <xPortStartScheduler+0x124>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <xPortStartScheduler+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d10b      	bne.n	800627a <xPortStartScheduler+0x4a>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60fb      	str	r3, [r7, #12]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800627a:	4b39      	ldr	r3, [pc, #228]	@ (8006360 <xPortStartScheduler+0x130>)
 800627c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	22ff      	movs	r2, #255	@ 0xff
 800628a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800629c:	b2da      	uxtb	r2, r3
 800629e:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <xPortStartScheduler+0x134>)
 80062a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062a2:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <xPortStartScheduler+0x138>)
 80062a4:	2207      	movs	r2, #7
 80062a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062a8:	e009      	b.n	80062be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80062aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006368 <xPortStartScheduler+0x138>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <xPortStartScheduler+0x138>)
 80062b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d0ef      	beq.n	80062aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062ca:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <xPortStartScheduler+0x138>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f1c3 0307 	rsb	r3, r3, #7
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d00b      	beq.n	80062ee <xPortStartScheduler+0xbe>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60bb      	str	r3, [r7, #8]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006368 <xPortStartScheduler+0x138>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006368 <xPortStartScheduler+0x138>)
 80062f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <xPortStartScheduler+0x138>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006300:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <xPortStartScheduler+0x138>)
 8006302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	b2da      	uxtb	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800630c:	4b17      	ldr	r3, [pc, #92]	@ (800636c <xPortStartScheduler+0x13c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a16      	ldr	r2, [pc, #88]	@ (800636c <xPortStartScheduler+0x13c>)
 8006312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006318:	4b14      	ldr	r3, [pc, #80]	@ (800636c <xPortStartScheduler+0x13c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a13      	ldr	r2, [pc, #76]	@ (800636c <xPortStartScheduler+0x13c>)
 800631e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006324:	f000 f8da 	bl	80064dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006328:	4b11      	ldr	r3, [pc, #68]	@ (8006370 <xPortStartScheduler+0x140>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800632e:	f000 f8f9 	bl	8006524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006332:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <xPortStartScheduler+0x144>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a0f      	ldr	r2, [pc, #60]	@ (8006374 <xPortStartScheduler+0x144>)
 8006338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800633c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800633e:	f7ff ff63 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006342:	f7fe ff2f 	bl	80051a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006346:	f7ff ff1d 	bl	8006184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	e000ed00 	.word	0xe000ed00
 8006358:	410fc271 	.word	0x410fc271
 800635c:	410fc270 	.word	0x410fc270
 8006360:	e000e400 	.word	0xe000e400
 8006364:	20000fe8 	.word	0x20000fe8
 8006368:	20000fec 	.word	0x20000fec
 800636c:	e000ed20 	.word	0xe000ed20
 8006370:	2000000c 	.word	0x2000000c
 8006374:	e000ef34 	.word	0xe000ef34

08006378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	607b      	str	r3, [r7, #4]
}
 8006390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <vPortEnterCritical+0x5c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a0e      	ldr	r2, [pc, #56]	@ (80063d4 <vPortEnterCritical+0x5c>)
 800639a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800639c:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <vPortEnterCritical+0x5c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d110      	bne.n	80063c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <vPortEnterCritical+0x60>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortEnterCritical+0x4a>
	}
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000000c 	.word	0x2000000c
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063e2:	4b12      	ldr	r3, [pc, #72]	@ (800642c <vPortExitCritical+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <vPortExitCritical+0x26>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006402:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <vPortExitCritical+0x50>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3b01      	subs	r3, #1
 8006408:	4a08      	ldr	r2, [pc, #32]	@ (800642c <vPortExitCritical+0x50>)
 800640a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800640c:	4b07      	ldr	r3, [pc, #28]	@ (800642c <vPortExitCritical+0x50>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <vPortExitCritical+0x44>
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	2000000c 	.word	0x2000000c

08006430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006430:	f3ef 8009 	mrs	r0, PSP
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <pxCurrentTCBConst>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f01e 0f10 	tst.w	lr, #16
 8006440:	bf08      	it	eq
 8006442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	6010      	str	r0, [r2, #0]
 800644c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006454:	f380 8811 	msr	BASEPRI, r0
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f7fe fea0 	bl	80051a4 <vTaskSwitchContext>
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	f380 8811 	msr	BASEPRI, r0
 800646c:	bc09      	pop	{r0, r3}
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	6808      	ldr	r0, [r1, #0]
 8006472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006476:	f01e 0f10 	tst.w	lr, #16
 800647a:	bf08      	it	eq
 800647c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006480:	f380 8809 	msr	PSP, r0
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w

08006490 <pxCurrentTCBConst>:
 8006490:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop

08006498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064b2:	f7fe fdbd 	bl	8005030 <xTaskIncrementTick>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <xPortSysTickHandler+0x40>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <vPortSetupTimerInterrupt+0x34>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <vPortSetupTimerInterrupt+0x38>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006518 <vPortSetupTimerInterrupt+0x3c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <vPortSetupTimerInterrupt+0x40>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	4a09      	ldr	r2, [pc, #36]	@ (8006520 <vPortSetupTimerInterrupt+0x44>)
 80064fa:	3b01      	subs	r3, #1
 80064fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064fe:	4b04      	ldr	r3, [pc, #16]	@ (8006510 <vPortSetupTimerInterrupt+0x34>)
 8006500:	2207      	movs	r2, #7
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000e010 	.word	0xe000e010
 8006514:	e000e018 	.word	0xe000e018
 8006518:	20000000 	.word	0x20000000
 800651c:	10624dd3 	.word	0x10624dd3
 8006520:	e000e014 	.word	0xe000e014

08006524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006534 <vPortEnableVFP+0x10>
 8006528:	6801      	ldr	r1, [r0, #0]
 800652a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800652e:	6001      	str	r1, [r0, #0]
 8006530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006532:	bf00      	nop
 8006534:	e000ed88 	.word	0xe000ed88

08006538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800653e:	f3ef 8305 	mrs	r3, IPSR
 8006542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b0f      	cmp	r3, #15
 8006548:	d915      	bls.n	8006576 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800654a:	4a18      	ldr	r2, [pc, #96]	@ (80065ac <vPortValidateInterruptPriority+0x74>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006554:	4b16      	ldr	r3, [pc, #88]	@ (80065b0 <vPortValidateInterruptPriority+0x78>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	7afa      	ldrb	r2, [r7, #11]
 800655a:	429a      	cmp	r2, r3
 800655c:	d20b      	bcs.n	8006576 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006576:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <vPortValidateInterruptPriority+0x7c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800657e:	4b0e      	ldr	r3, [pc, #56]	@ (80065b8 <vPortValidateInterruptPriority+0x80>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d90b      	bls.n	800659e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	603b      	str	r3, [r7, #0]
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <vPortValidateInterruptPriority+0x62>
	}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000e3f0 	.word	0xe000e3f0
 80065b0:	20000fe8 	.word	0x20000fe8
 80065b4:	e000ed0c 	.word	0xe000ed0c
 80065b8:	20000fec 	.word	0x20000fec

080065bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08a      	sub	sp, #40	@ 0x28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065c8:	f7fe fc64 	bl	8004e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006740 <pvPortMalloc+0x184>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065d4:	f000 f924 	bl	8006820 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006744 <pvPortMalloc+0x188>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8095 	bne.w	8006710 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01e      	beq.n	800662a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065ec:	2208      	movs	r2, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4413      	add	r3, r2
 80065f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d015      	beq.n	800662a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f023 0307 	bic.w	r3, r3, #7
 8006604:	3308      	adds	r3, #8
 8006606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <pvPortMalloc+0x6e>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	617b      	str	r3, [r7, #20]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d06f      	beq.n	8006710 <pvPortMalloc+0x154>
 8006630:	4b45      	ldr	r3, [pc, #276]	@ (8006748 <pvPortMalloc+0x18c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d86a      	bhi.n	8006710 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800663a:	4b44      	ldr	r3, [pc, #272]	@ (800674c <pvPortMalloc+0x190>)
 800663c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800663e:	4b43      	ldr	r3, [pc, #268]	@ (800674c <pvPortMalloc+0x190>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006644:	e004      	b.n	8006650 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d903      	bls.n	8006662 <pvPortMalloc+0xa6>
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f1      	bne.n	8006646 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006662:	4b37      	ldr	r3, [pc, #220]	@ (8006740 <pvPortMalloc+0x184>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006668:	429a      	cmp	r2, r3
 800666a:	d051      	beq.n	8006710 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2208      	movs	r2, #8
 8006672:	4413      	add	r3, r2
 8006674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	1ad2      	subs	r2, r2, r3
 8006686:	2308      	movs	r3, #8
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	429a      	cmp	r2, r3
 800668c:	d920      	bls.n	80066d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800668e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <pvPortMalloc+0xfc>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066ca:	69b8      	ldr	r0, [r7, #24]
 80066cc:	f000 f90a 	bl	80068e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <pvPortMalloc+0x18c>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <pvPortMalloc+0x18c>)
 80066dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066de:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <pvPortMalloc+0x18c>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <pvPortMalloc+0x194>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d203      	bcs.n	80066f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066ea:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <pvPortMalloc+0x18c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a18      	ldr	r2, [pc, #96]	@ (8006750 <pvPortMalloc+0x194>)
 80066f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <pvPortMalloc+0x188>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006706:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <pvPortMalloc+0x198>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <pvPortMalloc+0x198>)
 800670e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006710:	f7fe fbce 	bl	8004eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <pvPortMalloc+0x17a>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <pvPortMalloc+0x176>
	return pvReturn;
 8006736:	69fb      	ldr	r3, [r7, #28]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3728      	adds	r7, #40	@ 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20004bf8 	.word	0x20004bf8
 8006744:	20004c0c 	.word	0x20004c0c
 8006748:	20004bfc 	.word	0x20004bfc
 800674c:	20004bf0 	.word	0x20004bf0
 8006750:	20004c00 	.word	0x20004c00
 8006754:	20004c04 	.word	0x20004c04

08006758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04f      	beq.n	800680a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800676a:	2308      	movs	r3, #8
 800676c:	425b      	negs	r3, r3
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <vPortFree+0xbc>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <vPortFree+0x46>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	60fb      	str	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <vPortFree+0x66>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60bb      	str	r3, [r7, #8]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4b14      	ldr	r3, [pc, #80]	@ (8006814 <vPortFree+0xbc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01e      	beq.n	800680a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11a      	bne.n	800680a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006814 <vPortFree+0xbc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067e4:	f7fe fb56 	bl	8004e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006818 <vPortFree+0xc0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4413      	add	r3, r2
 80067f2:	4a09      	ldr	r2, [pc, #36]	@ (8006818 <vPortFree+0xc0>)
 80067f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f000 f874 	bl	80068e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <vPortFree+0xc4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4a06      	ldr	r2, [pc, #24]	@ (800681c <vPortFree+0xc4>)
 8006804:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006806:	f7fe fb53 	bl	8004eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20004c0c 	.word	0x20004c0c
 8006818:	20004bfc 	.word	0x20004bfc
 800681c:	20004c08 	.word	0x20004c08

08006820 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006826:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800682a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800682c:	4b27      	ldr	r3, [pc, #156]	@ (80068cc <prvHeapInit+0xac>)
 800682e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3307      	adds	r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	4a1f      	ldr	r2, [pc, #124]	@ (80068cc <prvHeapInit+0xac>)
 8006850:	4413      	add	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006858:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <prvHeapInit+0xb0>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800685e:	4b1c      	ldr	r3, [pc, #112]	@ (80068d0 <prvHeapInit+0xb0>)
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800686c:	2208      	movs	r2, #8
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a15      	ldr	r2, [pc, #84]	@ (80068d4 <prvHeapInit+0xb4>)
 8006880:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006882:	4b14      	ldr	r3, [pc, #80]	@ (80068d4 <prvHeapInit+0xb4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800688a:	4b12      	ldr	r3, [pc, #72]	@ (80068d4 <prvHeapInit+0xb4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068a0:	4b0c      	ldr	r3, [pc, #48]	@ (80068d4 <prvHeapInit+0xb4>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4a0a      	ldr	r2, [pc, #40]	@ (80068d8 <prvHeapInit+0xb8>)
 80068ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <prvHeapInit+0xbc>)
 80068b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068b8:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <prvHeapInit+0xc0>)
 80068ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068be:	601a      	str	r2, [r3, #0]
}
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000ff0 	.word	0x20000ff0
 80068d0:	20004bf0 	.word	0x20004bf0
 80068d4:	20004bf8 	.word	0x20004bf8
 80068d8:	20004c00 	.word	0x20004c00
 80068dc:	20004bfc 	.word	0x20004bfc
 80068e0:	20004c0c 	.word	0x20004c0c

080068e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068ec:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <prvInsertBlockIntoFreeList+0xac>)
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e002      	b.n	80068f8 <prvInsertBlockIntoFreeList+0x14>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d8f7      	bhi.n	80068f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	4413      	add	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d108      	bne.n	8006926 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d118      	bne.n	800696c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <prvInsertBlockIntoFreeList+0xb0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d00d      	beq.n	8006962 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	441a      	add	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e008      	b.n	8006974 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006962:	4b0c      	ldr	r3, [pc, #48]	@ (8006994 <prvInsertBlockIntoFreeList+0xb0>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e003      	b.n	8006974 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d002      	beq.n	8006982 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20004bf0 	.word	0x20004bf0
 8006994:	20004bf8 	.word	0x20004bf8

08006998 <__cvt>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	ec57 6b10 	vmov	r6, r7, d0
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	460c      	mov	r4, r1
 80069a4:	4619      	mov	r1, r3
 80069a6:	463b      	mov	r3, r7
 80069a8:	bfbb      	ittet	lt
 80069aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069ae:	461f      	movlt	r7, r3
 80069b0:	2300      	movge	r3, #0
 80069b2:	232d      	movlt	r3, #45	@ 0x2d
 80069b4:	700b      	strb	r3, [r1, #0]
 80069b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069bc:	4691      	mov	r9, r2
 80069be:	f023 0820 	bic.w	r8, r3, #32
 80069c2:	bfbc      	itt	lt
 80069c4:	4632      	movlt	r2, r6
 80069c6:	4616      	movlt	r6, r2
 80069c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069cc:	d005      	beq.n	80069da <__cvt+0x42>
 80069ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069d2:	d100      	bne.n	80069d6 <__cvt+0x3e>
 80069d4:	3401      	adds	r4, #1
 80069d6:	2102      	movs	r1, #2
 80069d8:	e000      	b.n	80069dc <__cvt+0x44>
 80069da:	2103      	movs	r1, #3
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	ab02      	add	r3, sp, #8
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	ec47 6b10 	vmov	d0, r6, r7
 80069e8:	4653      	mov	r3, sl
 80069ea:	4622      	mov	r2, r4
 80069ec:	f000 fe7c 	bl	80076e8 <_dtoa_r>
 80069f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069f4:	4605      	mov	r5, r0
 80069f6:	d119      	bne.n	8006a2c <__cvt+0x94>
 80069f8:	f019 0f01 	tst.w	r9, #1
 80069fc:	d00e      	beq.n	8006a1c <__cvt+0x84>
 80069fe:	eb00 0904 	add.w	r9, r0, r4
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7fa f87d 	bl	8000b08 <__aeabi_dcmpeq>
 8006a0e:	b108      	cbz	r0, 8006a14 <__cvt+0x7c>
 8006a10:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a14:	2230      	movs	r2, #48	@ 0x30
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	454b      	cmp	r3, r9
 8006a1a:	d31e      	bcc.n	8006a5a <__cvt+0xc2>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a20:	1b5b      	subs	r3, r3, r5
 8006a22:	4628      	mov	r0, r5
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	b004      	add	sp, #16
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a30:	eb00 0904 	add.w	r9, r0, r4
 8006a34:	d1e5      	bne.n	8006a02 <__cvt+0x6a>
 8006a36:	7803      	ldrb	r3, [r0, #0]
 8006a38:	2b30      	cmp	r3, #48	@ 0x30
 8006a3a:	d10a      	bne.n	8006a52 <__cvt+0xba>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f860 	bl	8000b08 <__aeabi_dcmpeq>
 8006a48:	b918      	cbnz	r0, 8006a52 <__cvt+0xba>
 8006a4a:	f1c4 0401 	rsb	r4, r4, #1
 8006a4e:	f8ca 4000 	str.w	r4, [sl]
 8006a52:	f8da 3000 	ldr.w	r3, [sl]
 8006a56:	4499      	add	r9, r3
 8006a58:	e7d3      	b.n	8006a02 <__cvt+0x6a>
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	9103      	str	r1, [sp, #12]
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e7d9      	b.n	8006a16 <__cvt+0x7e>

08006a62 <__exponent>:
 8006a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a64:	2900      	cmp	r1, #0
 8006a66:	bfba      	itte	lt
 8006a68:	4249      	neglt	r1, r1
 8006a6a:	232d      	movlt	r3, #45	@ 0x2d
 8006a6c:	232b      	movge	r3, #43	@ 0x2b
 8006a6e:	2909      	cmp	r1, #9
 8006a70:	7002      	strb	r2, [r0, #0]
 8006a72:	7043      	strb	r3, [r0, #1]
 8006a74:	dd29      	ble.n	8006aca <__exponent+0x68>
 8006a76:	f10d 0307 	add.w	r3, sp, #7
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	270a      	movs	r7, #10
 8006a7e:	461a      	mov	r2, r3
 8006a80:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a84:	fb07 1416 	mls	r4, r7, r6, r1
 8006a88:	3430      	adds	r4, #48	@ 0x30
 8006a8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2c63      	cmp	r4, #99	@ 0x63
 8006a92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006a96:	4631      	mov	r1, r6
 8006a98:	dcf1      	bgt.n	8006a7e <__exponent+0x1c>
 8006a9a:	3130      	adds	r1, #48	@ 0x30
 8006a9c:	1e94      	subs	r4, r2, #2
 8006a9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aa2:	1c41      	adds	r1, r0, #1
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	42ab      	cmp	r3, r5
 8006aa8:	d30a      	bcc.n	8006ac0 <__exponent+0x5e>
 8006aaa:	f10d 0309 	add.w	r3, sp, #9
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	42ac      	cmp	r4, r5
 8006ab2:	bf88      	it	hi
 8006ab4:	2300      	movhi	r3, #0
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	4403      	add	r3, r0
 8006aba:	1a18      	subs	r0, r3, r0
 8006abc:	b003      	add	sp, #12
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ac4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ac8:	e7ed      	b.n	8006aa6 <__exponent+0x44>
 8006aca:	2330      	movs	r3, #48	@ 0x30
 8006acc:	3130      	adds	r1, #48	@ 0x30
 8006ace:	7083      	strb	r3, [r0, #2]
 8006ad0:	70c1      	strb	r1, [r0, #3]
 8006ad2:	1d03      	adds	r3, r0, #4
 8006ad4:	e7f1      	b.n	8006aba <__exponent+0x58>
	...

08006ad8 <_printf_float>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b08d      	sub	sp, #52	@ 0x34
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	461f      	mov	r7, r3
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f000 fcef 	bl	80074cc <_localeconv_r>
 8006aee:	6803      	ldr	r3, [r0, #0]
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fbdc 	bl	80002b0 <strlen>
 8006af8:	2300      	movs	r3, #0
 8006afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afc:	f8d8 3000 	ldr.w	r3, [r8]
 8006b00:	9005      	str	r0, [sp, #20]
 8006b02:	3307      	adds	r3, #7
 8006b04:	f023 0307 	bic.w	r3, r3, #7
 8006b08:	f103 0208 	add.w	r2, r3, #8
 8006b0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b10:	f8d4 b000 	ldr.w	fp, [r4]
 8006b14:	f8c8 2000 	str.w	r2, [r8]
 8006b18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006da0 <_printf_float+0x2c8>)
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b34:	f7fa f81a 	bl	8000b6c <__aeabi_dcmpun>
 8006b38:	bb70      	cbnz	r0, 8006b98 <_printf_float+0xc0>
 8006b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3e:	4b98      	ldr	r3, [pc, #608]	@ (8006da0 <_printf_float+0x2c8>)
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b44:	f7f9 fff4 	bl	8000b30 <__aeabi_dcmple>
 8006b48:	bb30      	cbnz	r0, 8006b98 <_printf_float+0xc0>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 ffe3 	bl	8000b1c <__aeabi_dcmplt>
 8006b56:	b110      	cbz	r0, 8006b5e <_printf_float+0x86>
 8006b58:	232d      	movs	r3, #45	@ 0x2d
 8006b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5e:	4a91      	ldr	r2, [pc, #580]	@ (8006da4 <_printf_float+0x2cc>)
 8006b60:	4b91      	ldr	r3, [pc, #580]	@ (8006da8 <_printf_float+0x2d0>)
 8006b62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b66:	bf94      	ite	ls
 8006b68:	4690      	movls	r8, r2
 8006b6a:	4698      	movhi	r8, r3
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	6123      	str	r3, [r4, #16]
 8006b70:	f02b 0304 	bic.w	r3, fp, #4
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	9700      	str	r7, [sp, #0]
 8006b7c:	4633      	mov	r3, r6
 8006b7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b80:	4621      	mov	r1, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f9d2 	bl	8006f2c <_printf_common>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f040 808d 	bne.w	8006ca8 <_printf_float+0x1d0>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b92:	b00d      	add	sp, #52	@ 0x34
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 ffe4 	bl	8000b6c <__aeabi_dcmpun>
 8006ba4:	b140      	cbz	r0, 8006bb8 <_printf_float+0xe0>
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfbc      	itt	lt
 8006bac:	232d      	movlt	r3, #45	@ 0x2d
 8006bae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8006dac <_printf_float+0x2d4>)
 8006bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8006db0 <_printf_float+0x2d8>)
 8006bb6:	e7d4      	b.n	8006b62 <_printf_float+0x8a>
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	d13b      	bne.n	8006c3c <_printf_float+0x164>
 8006bc4:	2306      	movs	r3, #6
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	9303      	str	r3, [sp, #12]
 8006bd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bd8:	ab09      	add	r3, sp, #36	@ 0x24
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	6861      	ldr	r1, [r4, #4]
 8006bde:	ec49 8b10 	vmov	d0, r8, r9
 8006be2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7ff fed6 	bl	8006998 <__cvt>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf0:	2b47      	cmp	r3, #71	@ 0x47
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	d129      	bne.n	8006c4a <_printf_float+0x172>
 8006bf6:	1cc8      	adds	r0, r1, #3
 8006bf8:	db02      	blt.n	8006c00 <_printf_float+0x128>
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	dd41      	ble.n	8006c84 <_printf_float+0x1ac>
 8006c00:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c04:	fa5f fa8a 	uxtb.w	sl, sl
 8006c08:	3901      	subs	r1, #1
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c10:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c12:	f7ff ff26 	bl	8006a62 <__exponent>
 8006c16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c18:	1813      	adds	r3, r2, r0
 8006c1a:	2a01      	cmp	r2, #1
 8006c1c:	4681      	mov	r9, r0
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	dc02      	bgt.n	8006c28 <_printf_float+0x150>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	07d2      	lsls	r2, r2, #31
 8006c26:	d501      	bpl.n	8006c2c <_printf_float+0x154>
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0a2      	beq.n	8006b7a <_printf_float+0xa2>
 8006c34:	232d      	movs	r3, #45	@ 0x2d
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3a:	e79e      	b.n	8006b7a <_printf_float+0xa2>
 8006c3c:	9a06      	ldr	r2, [sp, #24]
 8006c3e:	2a47      	cmp	r2, #71	@ 0x47
 8006c40:	d1c2      	bne.n	8006bc8 <_printf_float+0xf0>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1c0      	bne.n	8006bc8 <_printf_float+0xf0>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7bd      	b.n	8006bc6 <_printf_float+0xee>
 8006c4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c4e:	d9db      	bls.n	8006c08 <_printf_float+0x130>
 8006c50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c54:	d118      	bne.n	8006c88 <_printf_float+0x1b0>
 8006c56:	2900      	cmp	r1, #0
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	dd0b      	ble.n	8006c74 <_printf_float+0x19c>
 8006c5c:	6121      	str	r1, [r4, #16]
 8006c5e:	b913      	cbnz	r3, 8006c66 <_printf_float+0x18e>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	07d0      	lsls	r0, r2, #31
 8006c64:	d502      	bpl.n	8006c6c <_printf_float+0x194>
 8006c66:	3301      	adds	r3, #1
 8006c68:	440b      	add	r3, r1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	e7db      	b.n	8006c2c <_printf_float+0x154>
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x1a4>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d2      	lsls	r2, r2, #31
 8006c7a:	d501      	bpl.n	8006c80 <_printf_float+0x1a8>
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7f4      	b.n	8006c6a <_printf_float+0x192>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e7f2      	b.n	8006c6a <_printf_float+0x192>
 8006c84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	db05      	blt.n	8006c9a <_printf_float+0x1c2>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	6121      	str	r1, [r4, #16]
 8006c92:	07d8      	lsls	r0, r3, #31
 8006c94:	d5ea      	bpl.n	8006c6c <_printf_float+0x194>
 8006c96:	1c4b      	adds	r3, r1, #1
 8006c98:	e7e7      	b.n	8006c6a <_printf_float+0x192>
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	bfd4      	ite	le
 8006c9e:	f1c1 0202 	rsble	r2, r1, #2
 8006ca2:	2201      	movgt	r2, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	e7e0      	b.n	8006c6a <_printf_float+0x192>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	055a      	lsls	r2, r3, #21
 8006cac:	d407      	bmi.n	8006cbe <_printf_float+0x1e6>
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d12b      	bne.n	8006d14 <_printf_float+0x23c>
 8006cbc:	e767      	b.n	8006b8e <_printf_float+0xb6>
 8006cbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cc2:	f240 80dd 	bls.w	8006e80 <_printf_float+0x3a8>
 8006cc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f7f9 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d033      	beq.n	8006d3e <_printf_float+0x266>
 8006cd6:	4a37      	ldr	r2, [pc, #220]	@ (8006db4 <_printf_float+0x2dc>)
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f af54 	beq.w	8006b8e <_printf_float+0xb6>
 8006ce6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cea:	4543      	cmp	r3, r8
 8006cec:	db02      	blt.n	8006cf4 <_printf_float+0x21c>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	07d8      	lsls	r0, r3, #31
 8006cf2:	d50f      	bpl.n	8006d14 <_printf_float+0x23c>
 8006cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af45 	beq.w	8006b8e <_printf_float+0xb6>
 8006d04:	f04f 0900 	mov.w	r9, #0
 8006d08:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006d0c:	f104 0a1a 	add.w	sl, r4, #26
 8006d10:	45c8      	cmp	r8, r9
 8006d12:	dc09      	bgt.n	8006d28 <_printf_float+0x250>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	f100 8103 	bmi.w	8006f22 <_printf_float+0x44a>
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d20:	4298      	cmp	r0, r3
 8006d22:	bfb8      	it	lt
 8006d24:	4618      	movlt	r0, r3
 8006d26:	e734      	b.n	8006b92 <_printf_float+0xba>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af2b 	beq.w	8006b8e <_printf_float+0xb6>
 8006d38:	f109 0901 	add.w	r9, r9, #1
 8006d3c:	e7e8      	b.n	8006d10 <_printf_float+0x238>
 8006d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc39      	bgt.n	8006db8 <_printf_float+0x2e0>
 8006d44:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <_printf_float+0x2dc>)
 8006d46:	2301      	movs	r3, #1
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f43f af1d 	beq.w	8006b8e <_printf_float+0xb6>
 8006d54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d58:	ea59 0303 	orrs.w	r3, r9, r3
 8006d5c:	d102      	bne.n	8006d64 <_printf_float+0x28c>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	07d9      	lsls	r1, r3, #31
 8006d62:	d5d7      	bpl.n	8006d14 <_printf_float+0x23c>
 8006d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af0d 	beq.w	8006b8e <_printf_float+0xb6>
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	f104 0b1a 	add.w	fp, r4, #26
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	425b      	negs	r3, r3
 8006d80:	4553      	cmp	r3, sl
 8006d82:	dc01      	bgt.n	8006d88 <_printf_float+0x2b0>
 8006d84:	464b      	mov	r3, r9
 8006d86:	e793      	b.n	8006cb0 <_printf_float+0x1d8>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	465a      	mov	r2, fp
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f aefb 	beq.w	8006b8e <_printf_float+0xb6>
 8006d98:	f10a 0a01 	add.w	sl, sl, #1
 8006d9c:	e7ee      	b.n	8006d7c <_printf_float+0x2a4>
 8006d9e:	bf00      	nop
 8006da0:	7fefffff 	.word	0x7fefffff
 8006da4:	08009938 	.word	0x08009938
 8006da8:	0800993c 	.word	0x0800993c
 8006dac:	08009940 	.word	0x08009940
 8006db0:	08009944 	.word	0x08009944
 8006db4:	08009948 	.word	0x08009948
 8006db8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dbe:	4553      	cmp	r3, sl
 8006dc0:	bfa8      	it	ge
 8006dc2:	4653      	movge	r3, sl
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	4699      	mov	r9, r3
 8006dc8:	dc36      	bgt.n	8006e38 <_printf_float+0x360>
 8006dca:	f04f 0b00 	mov.w	fp, #0
 8006dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dd2:	f104 021a 	add.w	r2, r4, #26
 8006dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	eba3 0309 	sub.w	r3, r3, r9
 8006dde:	455b      	cmp	r3, fp
 8006de0:	dc31      	bgt.n	8006e46 <_printf_float+0x36e>
 8006de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de4:	459a      	cmp	sl, r3
 8006de6:	dc3a      	bgt.n	8006e5e <_printf_float+0x386>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07da      	lsls	r2, r3, #31
 8006dec:	d437      	bmi.n	8006e5e <_printf_float+0x386>
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	ebaa 0903 	sub.w	r9, sl, r3
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	ebaa 0303 	sub.w	r3, sl, r3
 8006dfa:	4599      	cmp	r9, r3
 8006dfc:	bfa8      	it	ge
 8006dfe:	4699      	movge	r9, r3
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	dc33      	bgt.n	8006e6e <_printf_float+0x396>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e0e:	f104 0b1a 	add.w	fp, r4, #26
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	ebaa 0303 	sub.w	r3, sl, r3
 8006e18:	eba3 0309 	sub.w	r3, r3, r9
 8006e1c:	4543      	cmp	r3, r8
 8006e1e:	f77f af79 	ble.w	8006d14 <_printf_float+0x23c>
 8006e22:	2301      	movs	r3, #1
 8006e24:	465a      	mov	r2, fp
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f aeae 	beq.w	8006b8e <_printf_float+0xb6>
 8006e32:	f108 0801 	add.w	r8, r8, #1
 8006e36:	e7ec      	b.n	8006e12 <_printf_float+0x33a>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b8      	blx	r7
 8006e40:	3001      	adds	r0, #1
 8006e42:	d1c2      	bne.n	8006dca <_printf_float+0x2f2>
 8006e44:	e6a3      	b.n	8006b8e <_printf_float+0xb6>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	9206      	str	r2, [sp, #24]
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f ae9c 	beq.w	8006b8e <_printf_float+0xb6>
 8006e56:	9a06      	ldr	r2, [sp, #24]
 8006e58:	f10b 0b01 	add.w	fp, fp, #1
 8006e5c:	e7bb      	b.n	8006dd6 <_printf_float+0x2fe>
 8006e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d1c0      	bne.n	8006dee <_printf_float+0x316>
 8006e6c:	e68f      	b.n	8006b8e <_printf_float+0xb6>
 8006e6e:	9a06      	ldr	r2, [sp, #24]
 8006e70:	464b      	mov	r3, r9
 8006e72:	4442      	add	r2, r8
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d1c3      	bne.n	8006e06 <_printf_float+0x32e>
 8006e7e:	e686      	b.n	8006b8e <_printf_float+0xb6>
 8006e80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e84:	f1ba 0f01 	cmp.w	sl, #1
 8006e88:	dc01      	bgt.n	8006e8e <_printf_float+0x3b6>
 8006e8a:	07db      	lsls	r3, r3, #31
 8006e8c:	d536      	bpl.n	8006efc <_printf_float+0x424>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4642      	mov	r2, r8
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f ae78 	beq.w	8006b8e <_printf_float+0xb6>
 8006e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae70 	beq.w	8006b8e <_printf_float+0xb6>
 8006eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006eba:	f7f9 fe25 	bl	8000b08 <__aeabi_dcmpeq>
 8006ebe:	b9c0      	cbnz	r0, 8006ef2 <_printf_float+0x41a>
 8006ec0:	4653      	mov	r3, sl
 8006ec2:	f108 0201 	add.w	r2, r8, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d10c      	bne.n	8006eea <_printf_float+0x412>
 8006ed0:	e65d      	b.n	8006b8e <_printf_float+0xb6>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	465a      	mov	r2, fp
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae56 	beq.w	8006b8e <_printf_float+0xb6>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	45d0      	cmp	r8, sl
 8006ee8:	dbf3      	blt.n	8006ed2 <_printf_float+0x3fa>
 8006eea:	464b      	mov	r3, r9
 8006eec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ef0:	e6df      	b.n	8006cb2 <_printf_float+0x1da>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	f104 0b1a 	add.w	fp, r4, #26
 8006efa:	e7f4      	b.n	8006ee6 <_printf_float+0x40e>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4642      	mov	r2, r8
 8006f00:	e7e1      	b.n	8006ec6 <_printf_float+0x3ee>
 8006f02:	2301      	movs	r3, #1
 8006f04:	464a      	mov	r2, r9
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f43f ae3e 	beq.w	8006b8e <_printf_float+0xb6>
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	4543      	cmp	r3, r8
 8006f1e:	dcf0      	bgt.n	8006f02 <_printf_float+0x42a>
 8006f20:	e6fc      	b.n	8006d1c <_printf_float+0x244>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	f104 0919 	add.w	r9, r4, #25
 8006f2a:	e7f4      	b.n	8006f16 <_printf_float+0x43e>

08006f2c <_printf_common>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	4616      	mov	r6, r2
 8006f32:	4698      	mov	r8, r3
 8006f34:	688a      	ldr	r2, [r1, #8]
 8006f36:	690b      	ldr	r3, [r1, #16]
 8006f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bfb8      	it	lt
 8006f40:	4613      	movlt	r3, r2
 8006f42:	6033      	str	r3, [r6, #0]
 8006f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f48:	4607      	mov	r7, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	b10a      	cbz	r2, 8006f52 <_printf_common+0x26>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	0699      	lsls	r1, r3, #26
 8006f56:	bf42      	ittt	mi
 8006f58:	6833      	ldrmi	r3, [r6, #0]
 8006f5a:	3302      	addmi	r3, #2
 8006f5c:	6033      	strmi	r3, [r6, #0]
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	f015 0506 	ands.w	r5, r5, #6
 8006f64:	d106      	bne.n	8006f74 <_printf_common+0x48>
 8006f66:	f104 0a19 	add.w	sl, r4, #25
 8006f6a:	68e3      	ldr	r3, [r4, #12]
 8006f6c:	6832      	ldr	r2, [r6, #0]
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	42ab      	cmp	r3, r5
 8006f72:	dc26      	bgt.n	8006fc2 <_printf_common+0x96>
 8006f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	3b00      	subs	r3, #0
 8006f7c:	bf18      	it	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	0692      	lsls	r2, r2, #26
 8006f82:	d42b      	bmi.n	8006fdc <_printf_common+0xb0>
 8006f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f88:	4641      	mov	r1, r8
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c8      	blx	r9
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d01e      	beq.n	8006fd0 <_printf_common+0xa4>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	f003 0306 	and.w	r3, r3, #6
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	bf02      	ittt	eq
 8006f9e:	68e5      	ldreq	r5, [r4, #12]
 8006fa0:	6833      	ldreq	r3, [r6, #0]
 8006fa2:	1aed      	subeq	r5, r5, r3
 8006fa4:	68a3      	ldr	r3, [r4, #8]
 8006fa6:	bf0c      	ite	eq
 8006fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fac:	2500      	movne	r5, #0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	bfc4      	itt	gt
 8006fb2:	1a9b      	subgt	r3, r3, r2
 8006fb4:	18ed      	addgt	r5, r5, r3
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	341a      	adds	r4, #26
 8006fba:	42b5      	cmp	r5, r6
 8006fbc:	d11a      	bne.n	8006ff4 <_printf_common+0xc8>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e008      	b.n	8006fd4 <_printf_common+0xa8>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	4638      	mov	r0, r7
 8006fca:	47c8      	blx	r9
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d103      	bne.n	8006fd8 <_printf_common+0xac>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	3501      	adds	r5, #1
 8006fda:	e7c6      	b.n	8006f6a <_printf_common+0x3e>
 8006fdc:	18e1      	adds	r1, r4, r3
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	2030      	movs	r0, #48	@ 0x30
 8006fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fe6:	4422      	add	r2, r4
 8006fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	e7c7      	b.n	8006f84 <_printf_common+0x58>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c8      	blx	r9
 8006ffe:	3001      	adds	r0, #1
 8007000:	d0e6      	beq.n	8006fd0 <_printf_common+0xa4>
 8007002:	3601      	adds	r6, #1
 8007004:	e7d9      	b.n	8006fba <_printf_common+0x8e>
	...

08007008 <_printf_i>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	7e0f      	ldrb	r7, [r1, #24]
 800700e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007010:	2f78      	cmp	r7, #120	@ 0x78
 8007012:	4691      	mov	r9, r2
 8007014:	4680      	mov	r8, r0
 8007016:	460c      	mov	r4, r1
 8007018:	469a      	mov	sl, r3
 800701a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800701e:	d807      	bhi.n	8007030 <_printf_i+0x28>
 8007020:	2f62      	cmp	r7, #98	@ 0x62
 8007022:	d80a      	bhi.n	800703a <_printf_i+0x32>
 8007024:	2f00      	cmp	r7, #0
 8007026:	f000 80d2 	beq.w	80071ce <_printf_i+0x1c6>
 800702a:	2f58      	cmp	r7, #88	@ 0x58
 800702c:	f000 80b9 	beq.w	80071a2 <_printf_i+0x19a>
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007038:	e03a      	b.n	80070b0 <_printf_i+0xa8>
 800703a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800703e:	2b15      	cmp	r3, #21
 8007040:	d8f6      	bhi.n	8007030 <_printf_i+0x28>
 8007042:	a101      	add	r1, pc, #4	@ (adr r1, 8007048 <_printf_i+0x40>)
 8007044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070b5 	.word	0x080070b5
 8007050:	08007031 	.word	0x08007031
 8007054:	08007031 	.word	0x08007031
 8007058:	08007031 	.word	0x08007031
 800705c:	08007031 	.word	0x08007031
 8007060:	080070b5 	.word	0x080070b5
 8007064:	08007031 	.word	0x08007031
 8007068:	08007031 	.word	0x08007031
 800706c:	08007031 	.word	0x08007031
 8007070:	08007031 	.word	0x08007031
 8007074:	080071b5 	.word	0x080071b5
 8007078:	080070df 	.word	0x080070df
 800707c:	0800716f 	.word	0x0800716f
 8007080:	08007031 	.word	0x08007031
 8007084:	08007031 	.word	0x08007031
 8007088:	080071d7 	.word	0x080071d7
 800708c:	08007031 	.word	0x08007031
 8007090:	080070df 	.word	0x080070df
 8007094:	08007031 	.word	0x08007031
 8007098:	08007031 	.word	0x08007031
 800709c:	08007177 	.word	0x08007177
 80070a0:	6833      	ldr	r3, [r6, #0]
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6032      	str	r2, [r6, #0]
 80070a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070b0:	2301      	movs	r3, #1
 80070b2:	e09d      	b.n	80071f0 <_printf_i+0x1e8>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	6031      	str	r1, [r6, #0]
 80070bc:	0606      	lsls	r6, r0, #24
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0xbc>
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	e003      	b.n	80070cc <_printf_i+0xc4>
 80070c4:	0645      	lsls	r5, r0, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0xb8>
 80070c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	da03      	bge.n	80070d8 <_printf_i+0xd0>
 80070d0:	232d      	movs	r3, #45	@ 0x2d
 80070d2:	426d      	negs	r5, r5
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d8:	4859      	ldr	r0, [pc, #356]	@ (8007240 <_printf_i+0x238>)
 80070da:	230a      	movs	r3, #10
 80070dc:	e011      	b.n	8007102 <_printf_i+0xfa>
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	0608      	lsls	r0, r1, #24
 80070e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070e8:	d402      	bmi.n	80070f0 <_printf_i+0xe8>
 80070ea:	0649      	lsls	r1, r1, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2ad      	uxthmi	r5, r5
 80070f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070f2:	4853      	ldr	r0, [pc, #332]	@ (8007240 <_printf_i+0x238>)
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	bf14      	ite	ne
 80070f8:	230a      	movne	r3, #10
 80070fa:	2308      	moveq	r3, #8
 80070fc:	2100      	movs	r1, #0
 80070fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007102:	6866      	ldr	r6, [r4, #4]
 8007104:	60a6      	str	r6, [r4, #8]
 8007106:	2e00      	cmp	r6, #0
 8007108:	bfa2      	ittt	ge
 800710a:	6821      	ldrge	r1, [r4, #0]
 800710c:	f021 0104 	bicge.w	r1, r1, #4
 8007110:	6021      	strge	r1, [r4, #0]
 8007112:	b90d      	cbnz	r5, 8007118 <_printf_i+0x110>
 8007114:	2e00      	cmp	r6, #0
 8007116:	d04b      	beq.n	80071b0 <_printf_i+0x1a8>
 8007118:	4616      	mov	r6, r2
 800711a:	fbb5 f1f3 	udiv	r1, r5, r3
 800711e:	fb03 5711 	mls	r7, r3, r1, r5
 8007122:	5dc7      	ldrb	r7, [r0, r7]
 8007124:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007128:	462f      	mov	r7, r5
 800712a:	42bb      	cmp	r3, r7
 800712c:	460d      	mov	r5, r1
 800712e:	d9f4      	bls.n	800711a <_printf_i+0x112>
 8007130:	2b08      	cmp	r3, #8
 8007132:	d10b      	bne.n	800714c <_printf_i+0x144>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07df      	lsls	r7, r3, #31
 8007138:	d508      	bpl.n	800714c <_printf_i+0x144>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6861      	ldr	r1, [r4, #4]
 800713e:	4299      	cmp	r1, r3
 8007140:	bfde      	ittt	le
 8007142:	2330      	movle	r3, #48	@ 0x30
 8007144:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007148:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800714c:	1b92      	subs	r2, r2, r6
 800714e:	6122      	str	r2, [r4, #16]
 8007150:	f8cd a000 	str.w	sl, [sp]
 8007154:	464b      	mov	r3, r9
 8007156:	aa03      	add	r2, sp, #12
 8007158:	4621      	mov	r1, r4
 800715a:	4640      	mov	r0, r8
 800715c:	f7ff fee6 	bl	8006f2c <_printf_common>
 8007160:	3001      	adds	r0, #1
 8007162:	d14a      	bne.n	80071fa <_printf_i+0x1f2>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007168:	b004      	add	sp, #16
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f043 0320 	orr.w	r3, r3, #32
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	4833      	ldr	r0, [pc, #204]	@ (8007244 <_printf_i+0x23c>)
 8007178:	2778      	movs	r7, #120	@ 0x78
 800717a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	6831      	ldr	r1, [r6, #0]
 8007182:	061f      	lsls	r7, r3, #24
 8007184:	f851 5b04 	ldr.w	r5, [r1], #4
 8007188:	d402      	bmi.n	8007190 <_printf_i+0x188>
 800718a:	065f      	lsls	r7, r3, #25
 800718c:	bf48      	it	mi
 800718e:	b2ad      	uxthmi	r5, r5
 8007190:	6031      	str	r1, [r6, #0]
 8007192:	07d9      	lsls	r1, r3, #31
 8007194:	bf44      	itt	mi
 8007196:	f043 0320 	orrmi.w	r3, r3, #32
 800719a:	6023      	strmi	r3, [r4, #0]
 800719c:	b11d      	cbz	r5, 80071a6 <_printf_i+0x19e>
 800719e:	2310      	movs	r3, #16
 80071a0:	e7ac      	b.n	80070fc <_printf_i+0xf4>
 80071a2:	4827      	ldr	r0, [pc, #156]	@ (8007240 <_printf_i+0x238>)
 80071a4:	e7e9      	b.n	800717a <_printf_i+0x172>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f023 0320 	bic.w	r3, r3, #32
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	e7f6      	b.n	800719e <_printf_i+0x196>
 80071b0:	4616      	mov	r6, r2
 80071b2:	e7bd      	b.n	8007130 <_printf_i+0x128>
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	6961      	ldr	r1, [r4, #20]
 80071ba:	1d18      	adds	r0, r3, #4
 80071bc:	6030      	str	r0, [r6, #0]
 80071be:	062e      	lsls	r6, r5, #24
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0x1c0>
 80071c4:	6019      	str	r1, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0x1c6>
 80071c8:	0668      	lsls	r0, r5, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0x1bc>
 80071cc:	8019      	strh	r1, [r3, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	4616      	mov	r6, r2
 80071d4:	e7bc      	b.n	8007150 <_printf_i+0x148>
 80071d6:	6833      	ldr	r3, [r6, #0]
 80071d8:	1d1a      	adds	r2, r3, #4
 80071da:	6032      	str	r2, [r6, #0]
 80071dc:	681e      	ldr	r6, [r3, #0]
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	2100      	movs	r1, #0
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7f9 f814 	bl	8000210 <memchr>
 80071e8:	b108      	cbz	r0, 80071ee <_printf_i+0x1e6>
 80071ea:	1b80      	subs	r0, r0, r6
 80071ec:	6060      	str	r0, [r4, #4]
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	2300      	movs	r3, #0
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f8:	e7aa      	b.n	8007150 <_printf_i+0x148>
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	4632      	mov	r2, r6
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	47d0      	blx	sl
 8007204:	3001      	adds	r0, #1
 8007206:	d0ad      	beq.n	8007164 <_printf_i+0x15c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	079b      	lsls	r3, r3, #30
 800720c:	d413      	bmi.n	8007236 <_printf_i+0x22e>
 800720e:	68e0      	ldr	r0, [r4, #12]
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	4298      	cmp	r0, r3
 8007214:	bfb8      	it	lt
 8007216:	4618      	movlt	r0, r3
 8007218:	e7a6      	b.n	8007168 <_printf_i+0x160>
 800721a:	2301      	movs	r3, #1
 800721c:	4632      	mov	r2, r6
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	47d0      	blx	sl
 8007224:	3001      	adds	r0, #1
 8007226:	d09d      	beq.n	8007164 <_printf_i+0x15c>
 8007228:	3501      	adds	r5, #1
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	9903      	ldr	r1, [sp, #12]
 800722e:	1a5b      	subs	r3, r3, r1
 8007230:	42ab      	cmp	r3, r5
 8007232:	dcf2      	bgt.n	800721a <_printf_i+0x212>
 8007234:	e7eb      	b.n	800720e <_printf_i+0x206>
 8007236:	2500      	movs	r5, #0
 8007238:	f104 0619 	add.w	r6, r4, #25
 800723c:	e7f5      	b.n	800722a <_printf_i+0x222>
 800723e:	bf00      	nop
 8007240:	0800994a 	.word	0x0800994a
 8007244:	0800995b 	.word	0x0800995b

08007248 <std>:
 8007248:	2300      	movs	r3, #0
 800724a:	b510      	push	{r4, lr}
 800724c:	4604      	mov	r4, r0
 800724e:	e9c0 3300 	strd	r3, r3, [r0]
 8007252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007256:	6083      	str	r3, [r0, #8]
 8007258:	8181      	strh	r1, [r0, #12]
 800725a:	6643      	str	r3, [r0, #100]	@ 0x64
 800725c:	81c2      	strh	r2, [r0, #14]
 800725e:	6183      	str	r3, [r0, #24]
 8007260:	4619      	mov	r1, r3
 8007262:	2208      	movs	r2, #8
 8007264:	305c      	adds	r0, #92	@ 0x5c
 8007266:	f000 f928 	bl	80074ba <memset>
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <std+0x58>)
 800726c:	6263      	str	r3, [r4, #36]	@ 0x24
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x5c>)
 8007270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x60>)
 8007274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x64>)
 8007278:	6323      	str	r3, [r4, #48]	@ 0x30
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <std+0x68>)
 800727c:	6224      	str	r4, [r4, #32]
 800727e:	429c      	cmp	r4, r3
 8007280:	d006      	beq.n	8007290 <std+0x48>
 8007282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007286:	4294      	cmp	r4, r2
 8007288:	d002      	beq.n	8007290 <std+0x48>
 800728a:	33d0      	adds	r3, #208	@ 0xd0
 800728c:	429c      	cmp	r4, r3
 800728e:	d105      	bne.n	800729c <std+0x54>
 8007290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007298:	f000 b98c 	b.w	80075b4 <__retarget_lock_init_recursive>
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	08007435 	.word	0x08007435
 80072a4:	08007457 	.word	0x08007457
 80072a8:	0800748f 	.word	0x0800748f
 80072ac:	080074b3 	.word	0x080074b3
 80072b0:	20004c10 	.word	0x20004c10

080072b4 <stdio_exit_handler>:
 80072b4:	4a02      	ldr	r2, [pc, #8]	@ (80072c0 <stdio_exit_handler+0xc>)
 80072b6:	4903      	ldr	r1, [pc, #12]	@ (80072c4 <stdio_exit_handler+0x10>)
 80072b8:	4803      	ldr	r0, [pc, #12]	@ (80072c8 <stdio_exit_handler+0x14>)
 80072ba:	f000 b869 	b.w	8007390 <_fwalk_sglue>
 80072be:	bf00      	nop
 80072c0:	20000010 	.word	0x20000010
 80072c4:	080091b1 	.word	0x080091b1
 80072c8:	20000020 	.word	0x20000020

080072cc <cleanup_stdio>:
 80072cc:	6841      	ldr	r1, [r0, #4]
 80072ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <cleanup_stdio+0x34>)
 80072d0:	4299      	cmp	r1, r3
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	d001      	beq.n	80072dc <cleanup_stdio+0x10>
 80072d8:	f001 ff6a 	bl	80091b0 <_fflush_r>
 80072dc:	68a1      	ldr	r1, [r4, #8]
 80072de:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <cleanup_stdio+0x38>)
 80072e0:	4299      	cmp	r1, r3
 80072e2:	d002      	beq.n	80072ea <cleanup_stdio+0x1e>
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 ff63 	bl	80091b0 <_fflush_r>
 80072ea:	68e1      	ldr	r1, [r4, #12]
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <cleanup_stdio+0x3c>)
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d004      	beq.n	80072fc <cleanup_stdio+0x30>
 80072f2:	4620      	mov	r0, r4
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f8:	f001 bf5a 	b.w	80091b0 <_fflush_r>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	bf00      	nop
 8007300:	20004c10 	.word	0x20004c10
 8007304:	20004c78 	.word	0x20004c78
 8007308:	20004ce0 	.word	0x20004ce0

0800730c <global_stdio_init.part.0>:
 800730c:	b510      	push	{r4, lr}
 800730e:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <global_stdio_init.part.0+0x30>)
 8007310:	4c0b      	ldr	r4, [pc, #44]	@ (8007340 <global_stdio_init.part.0+0x34>)
 8007312:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <global_stdio_init.part.0+0x38>)
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	4620      	mov	r0, r4
 8007318:	2200      	movs	r2, #0
 800731a:	2104      	movs	r1, #4
 800731c:	f7ff ff94 	bl	8007248 <std>
 8007320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007324:	2201      	movs	r2, #1
 8007326:	2109      	movs	r1, #9
 8007328:	f7ff ff8e 	bl	8007248 <std>
 800732c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007330:	2202      	movs	r2, #2
 8007332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007336:	2112      	movs	r1, #18
 8007338:	f7ff bf86 	b.w	8007248 <std>
 800733c:	20004d48 	.word	0x20004d48
 8007340:	20004c10 	.word	0x20004c10
 8007344:	080072b5 	.word	0x080072b5

08007348 <__sfp_lock_acquire>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__sfp_lock_acquire+0x8>)
 800734a:	f000 b934 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20004d51 	.word	0x20004d51

08007354 <__sfp_lock_release>:
 8007354:	4801      	ldr	r0, [pc, #4]	@ (800735c <__sfp_lock_release+0x8>)
 8007356:	f000 b92f 	b.w	80075b8 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20004d51 	.word	0x20004d51

08007360 <__sinit>:
 8007360:	b510      	push	{r4, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	f7ff fff0 	bl	8007348 <__sfp_lock_acquire>
 8007368:	6a23      	ldr	r3, [r4, #32]
 800736a:	b11b      	cbz	r3, 8007374 <__sinit+0x14>
 800736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007370:	f7ff bff0 	b.w	8007354 <__sfp_lock_release>
 8007374:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <__sinit+0x28>)
 8007376:	6223      	str	r3, [r4, #32]
 8007378:	4b04      	ldr	r3, [pc, #16]	@ (800738c <__sinit+0x2c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f5      	bne.n	800736c <__sinit+0xc>
 8007380:	f7ff ffc4 	bl	800730c <global_stdio_init.part.0>
 8007384:	e7f2      	b.n	800736c <__sinit+0xc>
 8007386:	bf00      	nop
 8007388:	080072cd 	.word	0x080072cd
 800738c:	20004d48 	.word	0x20004d48

08007390 <_fwalk_sglue>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4607      	mov	r7, r0
 8007396:	4688      	mov	r8, r1
 8007398:	4614      	mov	r4, r2
 800739a:	2600      	movs	r6, #0
 800739c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a0:	f1b9 0901 	subs.w	r9, r9, #1
 80073a4:	d505      	bpl.n	80073b2 <_fwalk_sglue+0x22>
 80073a6:	6824      	ldr	r4, [r4, #0]
 80073a8:	2c00      	cmp	r4, #0
 80073aa:	d1f7      	bne.n	800739c <_fwalk_sglue+0xc>
 80073ac:	4630      	mov	r0, r6
 80073ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b2:	89ab      	ldrh	r3, [r5, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d907      	bls.n	80073c8 <_fwalk_sglue+0x38>
 80073b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073bc:	3301      	adds	r3, #1
 80073be:	d003      	beq.n	80073c8 <_fwalk_sglue+0x38>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c0      	blx	r8
 80073c6:	4306      	orrs	r6, r0
 80073c8:	3568      	adds	r5, #104	@ 0x68
 80073ca:	e7e9      	b.n	80073a0 <_fwalk_sglue+0x10>

080073cc <sniprintf>:
 80073cc:	b40c      	push	{r2, r3}
 80073ce:	b530      	push	{r4, r5, lr}
 80073d0:	4b17      	ldr	r3, [pc, #92]	@ (8007430 <sniprintf+0x64>)
 80073d2:	1e0c      	subs	r4, r1, #0
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	b09d      	sub	sp, #116	@ 0x74
 80073d8:	da08      	bge.n	80073ec <sniprintf+0x20>
 80073da:	238b      	movs	r3, #139	@ 0x8b
 80073dc:	602b      	str	r3, [r5, #0]
 80073de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e2:	b01d      	add	sp, #116	@ 0x74
 80073e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e8:	b002      	add	sp, #8
 80073ea:	4770      	bx	lr
 80073ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073f4:	bf14      	ite	ne
 80073f6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80073fa:	4623      	moveq	r3, r4
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	9307      	str	r3, [sp, #28]
 8007400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	9006      	str	r0, [sp, #24]
 8007408:	f8ad 3016 	strh.w	r3, [sp, #22]
 800740c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800740e:	ab21      	add	r3, sp, #132	@ 0x84
 8007410:	a902      	add	r1, sp, #8
 8007412:	4628      	mov	r0, r5
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	f001 fc09 	bl	8008c2c <_svfiprintf_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	bfbc      	itt	lt
 800741e:	238b      	movlt	r3, #139	@ 0x8b
 8007420:	602b      	strlt	r3, [r5, #0]
 8007422:	2c00      	cmp	r4, #0
 8007424:	d0dd      	beq.n	80073e2 <sniprintf+0x16>
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e7d9      	b.n	80073e2 <sniprintf+0x16>
 800742e:	bf00      	nop
 8007430:	2000001c 	.word	0x2000001c

08007434 <__sread>:
 8007434:	b510      	push	{r4, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	f000 f86c 	bl	8007518 <_read_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	bfab      	itete	ge
 8007444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007446:	89a3      	ldrhlt	r3, [r4, #12]
 8007448:	181b      	addge	r3, r3, r0
 800744a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800744e:	bfac      	ite	ge
 8007450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007452:	81a3      	strhlt	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__swrite>:
 8007456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	461f      	mov	r7, r3
 800745c:	898b      	ldrh	r3, [r1, #12]
 800745e:	05db      	lsls	r3, r3, #23
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	4616      	mov	r6, r2
 8007466:	d505      	bpl.n	8007474 <__swrite+0x1e>
 8007468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	f000 f840 	bl	80074f4 <_lseek_r>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	4632      	mov	r2, r6
 8007482:	463b      	mov	r3, r7
 8007484:	4628      	mov	r0, r5
 8007486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748a:	f000 b857 	b.w	800753c <_write_r>

0800748e <__sseek>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 f82d 	bl	80074f4 <_lseek_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	bf15      	itete	ne
 80074a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074aa:	81a3      	strheq	r3, [r4, #12]
 80074ac:	bf18      	it	ne
 80074ae:	81a3      	strhne	r3, [r4, #12]
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <__sclose>:
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 b80d 	b.w	80074d4 <_close_r>

080074ba <memset>:
 80074ba:	4402      	add	r2, r0
 80074bc:	4603      	mov	r3, r0
 80074be:	4293      	cmp	r3, r2
 80074c0:	d100      	bne.n	80074c4 <memset+0xa>
 80074c2:	4770      	bx	lr
 80074c4:	f803 1b01 	strb.w	r1, [r3], #1
 80074c8:	e7f9      	b.n	80074be <memset+0x4>
	...

080074cc <_localeconv_r>:
 80074cc:	4800      	ldr	r0, [pc, #0]	@ (80074d0 <_localeconv_r+0x4>)
 80074ce:	4770      	bx	lr
 80074d0:	2000015c 	.word	0x2000015c

080074d4 <_close_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d06      	ldr	r5, [pc, #24]	@ (80074f0 <_close_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7fa f9e2 	bl	80018a8 <_close>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_close_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_close_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20004d4c 	.word	0x20004d4c

080074f4 <_lseek_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	@ (8007514 <_lseek_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa f9f7 	bl	80018f6 <_lseek>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_lseek_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_lseek_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20004d4c 	.word	0x20004d4c

08007518 <_read_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	@ (8007538 <_read_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fa f985 	bl	8001836 <_read>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_read_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_read_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20004d4c 	.word	0x20004d4c

0800753c <_write_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	@ (800755c <_write_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7fa f990 	bl	8001870 <_write>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_write_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_write_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	20004d4c 	.word	0x20004d4c

08007560 <__errno>:
 8007560:	4b01      	ldr	r3, [pc, #4]	@ (8007568 <__errno+0x8>)
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	2000001c 	.word	0x2000001c

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	@ (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	@ (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	@ (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	@ (80075b0 <__libc_init_array+0x44>)
 8007580:	f002 f866 	bl	8009650 <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	08009cb0 	.word	0x08009cb0
 80075a8:	08009cb0 	.word	0x08009cb0
 80075ac:	08009cb0 	.word	0x08009cb0
 80075b0:	08009cb4 	.word	0x08009cb4

080075b4 <__retarget_lock_init_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_acquire_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__retarget_lock_release_recursive>:
 80075b8:	4770      	bx	lr

080075ba <memcpy>:
 80075ba:	440a      	add	r2, r1
 80075bc:	4291      	cmp	r1, r2
 80075be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075c2:	d100      	bne.n	80075c6 <memcpy+0xc>
 80075c4:	4770      	bx	lr
 80075c6:	b510      	push	{r4, lr}
 80075c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075d0:	4291      	cmp	r1, r2
 80075d2:	d1f9      	bne.n	80075c8 <memcpy+0xe>
 80075d4:	bd10      	pop	{r4, pc}

080075d6 <quorem>:
 80075d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	6903      	ldr	r3, [r0, #16]
 80075dc:	690c      	ldr	r4, [r1, #16]
 80075de:	42a3      	cmp	r3, r4
 80075e0:	4607      	mov	r7, r0
 80075e2:	db7e      	blt.n	80076e2 <quorem+0x10c>
 80075e4:	3c01      	subs	r4, #1
 80075e6:	f101 0814 	add.w	r8, r1, #20
 80075ea:	00a3      	lsls	r3, r4, #2
 80075ec:	f100 0514 	add.w	r5, r0, #20
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007600:	3301      	adds	r3, #1
 8007602:	429a      	cmp	r2, r3
 8007604:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007608:	fbb2 f6f3 	udiv	r6, r2, r3
 800760c:	d32e      	bcc.n	800766c <quorem+0x96>
 800760e:	f04f 0a00 	mov.w	sl, #0
 8007612:	46c4      	mov	ip, r8
 8007614:	46ae      	mov	lr, r5
 8007616:	46d3      	mov	fp, sl
 8007618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800761c:	b298      	uxth	r0, r3
 800761e:	fb06 a000 	mla	r0, r6, r0, sl
 8007622:	0c02      	lsrs	r2, r0, #16
 8007624:	0c1b      	lsrs	r3, r3, #16
 8007626:	fb06 2303 	mla	r3, r6, r3, r2
 800762a:	f8de 2000 	ldr.w	r2, [lr]
 800762e:	b280      	uxth	r0, r0
 8007630:	b292      	uxth	r2, r2
 8007632:	1a12      	subs	r2, r2, r0
 8007634:	445a      	add	r2, fp
 8007636:	f8de 0000 	ldr.w	r0, [lr]
 800763a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800763e:	b29b      	uxth	r3, r3
 8007640:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007644:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007648:	b292      	uxth	r2, r2
 800764a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800764e:	45e1      	cmp	r9, ip
 8007650:	f84e 2b04 	str.w	r2, [lr], #4
 8007654:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007658:	d2de      	bcs.n	8007618 <quorem+0x42>
 800765a:	9b00      	ldr	r3, [sp, #0]
 800765c:	58eb      	ldr	r3, [r5, r3]
 800765e:	b92b      	cbnz	r3, 800766c <quorem+0x96>
 8007660:	9b01      	ldr	r3, [sp, #4]
 8007662:	3b04      	subs	r3, #4
 8007664:	429d      	cmp	r5, r3
 8007666:	461a      	mov	r2, r3
 8007668:	d32f      	bcc.n	80076ca <quorem+0xf4>
 800766a:	613c      	str	r4, [r7, #16]
 800766c:	4638      	mov	r0, r7
 800766e:	f001 f979 	bl	8008964 <__mcmp>
 8007672:	2800      	cmp	r0, #0
 8007674:	db25      	blt.n	80076c2 <quorem+0xec>
 8007676:	4629      	mov	r1, r5
 8007678:	2000      	movs	r0, #0
 800767a:	f858 2b04 	ldr.w	r2, [r8], #4
 800767e:	f8d1 c000 	ldr.w	ip, [r1]
 8007682:	fa1f fe82 	uxth.w	lr, r2
 8007686:	fa1f f38c 	uxth.w	r3, ip
 800768a:	eba3 030e 	sub.w	r3, r3, lr
 800768e:	4403      	add	r3, r0
 8007690:	0c12      	lsrs	r2, r2, #16
 8007692:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007696:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a0:	45c1      	cmp	r9, r8
 80076a2:	f841 3b04 	str.w	r3, [r1], #4
 80076a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076aa:	d2e6      	bcs.n	800767a <quorem+0xa4>
 80076ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076b4:	b922      	cbnz	r2, 80076c0 <quorem+0xea>
 80076b6:	3b04      	subs	r3, #4
 80076b8:	429d      	cmp	r5, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	d30b      	bcc.n	80076d6 <quorem+0x100>
 80076be:	613c      	str	r4, [r7, #16]
 80076c0:	3601      	adds	r6, #1
 80076c2:	4630      	mov	r0, r6
 80076c4:	b003      	add	sp, #12
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	d1cb      	bne.n	800766a <quorem+0x94>
 80076d2:	3c01      	subs	r4, #1
 80076d4:	e7c6      	b.n	8007664 <quorem+0x8e>
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	3b04      	subs	r3, #4
 80076da:	2a00      	cmp	r2, #0
 80076dc:	d1ef      	bne.n	80076be <quorem+0xe8>
 80076de:	3c01      	subs	r4, #1
 80076e0:	e7ea      	b.n	80076b8 <quorem+0xe2>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e7ee      	b.n	80076c4 <quorem+0xee>
	...

080076e8 <_dtoa_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	69c7      	ldr	r7, [r0, #28]
 80076ee:	b099      	sub	sp, #100	@ 0x64
 80076f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076f4:	ec55 4b10 	vmov	r4, r5, d0
 80076f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80076fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80076fc:	4683      	mov	fp, r0
 80076fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007700:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007702:	b97f      	cbnz	r7, 8007724 <_dtoa_r+0x3c>
 8007704:	2010      	movs	r0, #16
 8007706:	f000 fdfd 	bl	8008304 <malloc>
 800770a:	4602      	mov	r2, r0
 800770c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007710:	b920      	cbnz	r0, 800771c <_dtoa_r+0x34>
 8007712:	4ba7      	ldr	r3, [pc, #668]	@ (80079b0 <_dtoa_r+0x2c8>)
 8007714:	21ef      	movs	r1, #239	@ 0xef
 8007716:	48a7      	ldr	r0, [pc, #668]	@ (80079b4 <_dtoa_r+0x2cc>)
 8007718:	f001 fe30 	bl	800937c <__assert_func>
 800771c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007720:	6007      	str	r7, [r0, #0]
 8007722:	60c7      	str	r7, [r0, #12]
 8007724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007728:	6819      	ldr	r1, [r3, #0]
 800772a:	b159      	cbz	r1, 8007744 <_dtoa_r+0x5c>
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	604a      	str	r2, [r1, #4]
 8007730:	2301      	movs	r3, #1
 8007732:	4093      	lsls	r3, r2
 8007734:	608b      	str	r3, [r1, #8]
 8007736:	4658      	mov	r0, fp
 8007738:	f000 feda 	bl	80084f0 <_Bfree>
 800773c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	1e2b      	subs	r3, r5, #0
 8007746:	bfb9      	ittee	lt
 8007748:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800774c:	9303      	strlt	r3, [sp, #12]
 800774e:	2300      	movge	r3, #0
 8007750:	6033      	strge	r3, [r6, #0]
 8007752:	9f03      	ldr	r7, [sp, #12]
 8007754:	4b98      	ldr	r3, [pc, #608]	@ (80079b8 <_dtoa_r+0x2d0>)
 8007756:	bfbc      	itt	lt
 8007758:	2201      	movlt	r2, #1
 800775a:	6032      	strlt	r2, [r6, #0]
 800775c:	43bb      	bics	r3, r7
 800775e:	d112      	bne.n	8007786 <_dtoa_r+0x9e>
 8007760:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007762:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800776c:	4323      	orrs	r3, r4
 800776e:	f000 854d 	beq.w	800820c <_dtoa_r+0xb24>
 8007772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007774:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80079cc <_dtoa_r+0x2e4>
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 854f 	beq.w	800821c <_dtoa_r+0xb34>
 800777e:	f10a 0303 	add.w	r3, sl, #3
 8007782:	f000 bd49 	b.w	8008218 <_dtoa_r+0xb30>
 8007786:	ed9d 7b02 	vldr	d7, [sp, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	ec51 0b17 	vmov	r0, r1, d7
 8007790:	2300      	movs	r3, #0
 8007792:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007796:	f7f9 f9b7 	bl	8000b08 <__aeabi_dcmpeq>
 800779a:	4680      	mov	r8, r0
 800779c:	b158      	cbz	r0, 80077b6 <_dtoa_r+0xce>
 800779e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077a0:	2301      	movs	r3, #1
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077a6:	b113      	cbz	r3, 80077ae <_dtoa_r+0xc6>
 80077a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077aa:	4b84      	ldr	r3, [pc, #528]	@ (80079bc <_dtoa_r+0x2d4>)
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079d0 <_dtoa_r+0x2e8>
 80077b2:	f000 bd33 	b.w	800821c <_dtoa_r+0xb34>
 80077b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077ba:	aa16      	add	r2, sp, #88	@ 0x58
 80077bc:	a917      	add	r1, sp, #92	@ 0x5c
 80077be:	4658      	mov	r0, fp
 80077c0:	f001 f980 	bl	8008ac4 <__d2b>
 80077c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077c8:	4681      	mov	r9, r0
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	d077      	beq.n	80078be <_dtoa_r+0x1d6>
 80077ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077e8:	4619      	mov	r1, r3
 80077ea:	2200      	movs	r2, #0
 80077ec:	4b74      	ldr	r3, [pc, #464]	@ (80079c0 <_dtoa_r+0x2d8>)
 80077ee:	f7f8 fd6b 	bl	80002c8 <__aeabi_dsub>
 80077f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007998 <_dtoa_r+0x2b0>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 ff1e 	bl	8000638 <__aeabi_dmul>
 80077fc:	a368      	add	r3, pc, #416	@ (adr r3, 80079a0 <_dtoa_r+0x2b8>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f7f8 fd63 	bl	80002cc <__adddf3>
 8007806:	4604      	mov	r4, r0
 8007808:	4630      	mov	r0, r6
 800780a:	460d      	mov	r5, r1
 800780c:	f7f8 feaa 	bl	8000564 <__aeabi_i2d>
 8007810:	a365      	add	r3, pc, #404	@ (adr r3, 80079a8 <_dtoa_r+0x2c0>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f8 ff0f 	bl	8000638 <__aeabi_dmul>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fd53 	bl	80002cc <__adddf3>
 8007826:	4604      	mov	r4, r0
 8007828:	460d      	mov	r5, r1
 800782a:	f7f9 f9b5 	bl	8000b98 <__aeabi_d2iz>
 800782e:	2200      	movs	r2, #0
 8007830:	4607      	mov	r7, r0
 8007832:	2300      	movs	r3, #0
 8007834:	4620      	mov	r0, r4
 8007836:	4629      	mov	r1, r5
 8007838:	f7f9 f970 	bl	8000b1c <__aeabi_dcmplt>
 800783c:	b140      	cbz	r0, 8007850 <_dtoa_r+0x168>
 800783e:	4638      	mov	r0, r7
 8007840:	f7f8 fe90 	bl	8000564 <__aeabi_i2d>
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f9 f95e 	bl	8000b08 <__aeabi_dcmpeq>
 800784c:	b900      	cbnz	r0, 8007850 <_dtoa_r+0x168>
 800784e:	3f01      	subs	r7, #1
 8007850:	2f16      	cmp	r7, #22
 8007852:	d851      	bhi.n	80078f8 <_dtoa_r+0x210>
 8007854:	4b5b      	ldr	r3, [pc, #364]	@ (80079c4 <_dtoa_r+0x2dc>)
 8007856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007862:	f7f9 f95b 	bl	8000b1c <__aeabi_dcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d048      	beq.n	80078fc <_dtoa_r+0x214>
 800786a:	3f01      	subs	r7, #1
 800786c:	2300      	movs	r3, #0
 800786e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007870:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007872:	1b9b      	subs	r3, r3, r6
 8007874:	1e5a      	subs	r2, r3, #1
 8007876:	bf44      	itt	mi
 8007878:	f1c3 0801 	rsbmi	r8, r3, #1
 800787c:	2300      	movmi	r3, #0
 800787e:	9208      	str	r2, [sp, #32]
 8007880:	bf54      	ite	pl
 8007882:	f04f 0800 	movpl.w	r8, #0
 8007886:	9308      	strmi	r3, [sp, #32]
 8007888:	2f00      	cmp	r7, #0
 800788a:	db39      	blt.n	8007900 <_dtoa_r+0x218>
 800788c:	9b08      	ldr	r3, [sp, #32]
 800788e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007890:	443b      	add	r3, r7
 8007892:	9308      	str	r3, [sp, #32]
 8007894:	2300      	movs	r3, #0
 8007896:	930a      	str	r3, [sp, #40]	@ 0x28
 8007898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789a:	2b09      	cmp	r3, #9
 800789c:	d864      	bhi.n	8007968 <_dtoa_r+0x280>
 800789e:	2b05      	cmp	r3, #5
 80078a0:	bfc4      	itt	gt
 80078a2:	3b04      	subgt	r3, #4
 80078a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a8:	f1a3 0302 	sub.w	r3, r3, #2
 80078ac:	bfcc      	ite	gt
 80078ae:	2400      	movgt	r4, #0
 80078b0:	2401      	movle	r4, #1
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d863      	bhi.n	800797e <_dtoa_r+0x296>
 80078b6:	e8df f003 	tbb	[pc, r3]
 80078ba:	372a      	.short	0x372a
 80078bc:	5535      	.short	0x5535
 80078be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078c2:	441e      	add	r6, r3
 80078c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	bfc1      	itttt	gt
 80078cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078d0:	409f      	lslgt	r7, r3
 80078d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078da:	bfd6      	itet	le
 80078dc:	f1c3 0320 	rsble	r3, r3, #32
 80078e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80078e4:	fa04 f003 	lslle.w	r0, r4, r3
 80078e8:	f7f8 fe2c 	bl	8000544 <__aeabi_ui2d>
 80078ec:	2201      	movs	r2, #1
 80078ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078f2:	3e01      	subs	r6, #1
 80078f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80078f6:	e777      	b.n	80077e8 <_dtoa_r+0x100>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7b8      	b.n	800786e <_dtoa_r+0x186>
 80078fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80078fe:	e7b7      	b.n	8007870 <_dtoa_r+0x188>
 8007900:	427b      	negs	r3, r7
 8007902:	930a      	str	r3, [sp, #40]	@ 0x28
 8007904:	2300      	movs	r3, #0
 8007906:	eba8 0807 	sub.w	r8, r8, r7
 800790a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800790c:	e7c4      	b.n	8007898 <_dtoa_r+0x1b0>
 800790e:	2300      	movs	r3, #0
 8007910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007914:	2b00      	cmp	r3, #0
 8007916:	dc35      	bgt.n	8007984 <_dtoa_r+0x29c>
 8007918:	2301      	movs	r3, #1
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	9307      	str	r3, [sp, #28]
 800791e:	461a      	mov	r2, r3
 8007920:	920e      	str	r2, [sp, #56]	@ 0x38
 8007922:	e00b      	b.n	800793c <_dtoa_r+0x254>
 8007924:	2301      	movs	r3, #1
 8007926:	e7f3      	b.n	8007910 <_dtoa_r+0x228>
 8007928:	2300      	movs	r3, #0
 800792a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800792c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	bfb8      	it	lt
 800793a:	2301      	movlt	r3, #1
 800793c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007940:	2100      	movs	r1, #0
 8007942:	2204      	movs	r2, #4
 8007944:	f102 0514 	add.w	r5, r2, #20
 8007948:	429d      	cmp	r5, r3
 800794a:	d91f      	bls.n	800798c <_dtoa_r+0x2a4>
 800794c:	6041      	str	r1, [r0, #4]
 800794e:	4658      	mov	r0, fp
 8007950:	f000 fd8e 	bl	8008470 <_Balloc>
 8007954:	4682      	mov	sl, r0
 8007956:	2800      	cmp	r0, #0
 8007958:	d13c      	bne.n	80079d4 <_dtoa_r+0x2ec>
 800795a:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <_dtoa_r+0x2e0>)
 800795c:	4602      	mov	r2, r0
 800795e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007962:	e6d8      	b.n	8007716 <_dtoa_r+0x2e>
 8007964:	2301      	movs	r3, #1
 8007966:	e7e0      	b.n	800792a <_dtoa_r+0x242>
 8007968:	2401      	movs	r4, #1
 800796a:	2300      	movs	r3, #0
 800796c:	9309      	str	r3, [sp, #36]	@ 0x24
 800796e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	2200      	movs	r2, #0
 800797a:	2312      	movs	r3, #18
 800797c:	e7d0      	b.n	8007920 <_dtoa_r+0x238>
 800797e:	2301      	movs	r3, #1
 8007980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007982:	e7f5      	b.n	8007970 <_dtoa_r+0x288>
 8007984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	9307      	str	r3, [sp, #28]
 800798a:	e7d7      	b.n	800793c <_dtoa_r+0x254>
 800798c:	3101      	adds	r1, #1
 800798e:	0052      	lsls	r2, r2, #1
 8007990:	e7d8      	b.n	8007944 <_dtoa_r+0x25c>
 8007992:	bf00      	nop
 8007994:	f3af 8000 	nop.w
 8007998:	636f4361 	.word	0x636f4361
 800799c:	3fd287a7 	.word	0x3fd287a7
 80079a0:	8b60c8b3 	.word	0x8b60c8b3
 80079a4:	3fc68a28 	.word	0x3fc68a28
 80079a8:	509f79fb 	.word	0x509f79fb
 80079ac:	3fd34413 	.word	0x3fd34413
 80079b0:	08009979 	.word	0x08009979
 80079b4:	08009990 	.word	0x08009990
 80079b8:	7ff00000 	.word	0x7ff00000
 80079bc:	08009949 	.word	0x08009949
 80079c0:	3ff80000 	.word	0x3ff80000
 80079c4:	08009a88 	.word	0x08009a88
 80079c8:	080099e8 	.word	0x080099e8
 80079cc:	08009975 	.word	0x08009975
 80079d0:	08009948 	.word	0x08009948
 80079d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079d8:	6018      	str	r0, [r3, #0]
 80079da:	9b07      	ldr	r3, [sp, #28]
 80079dc:	2b0e      	cmp	r3, #14
 80079de:	f200 80a4 	bhi.w	8007b2a <_dtoa_r+0x442>
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	f000 80a1 	beq.w	8007b2a <_dtoa_r+0x442>
 80079e8:	2f00      	cmp	r7, #0
 80079ea:	dd33      	ble.n	8007a54 <_dtoa_r+0x36c>
 80079ec:	4bad      	ldr	r3, [pc, #692]	@ (8007ca4 <_dtoa_r+0x5bc>)
 80079ee:	f007 020f 	and.w	r2, r7, #15
 80079f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079f6:	ed93 7b00 	vldr	d7, [r3]
 80079fa:	05f8      	lsls	r0, r7, #23
 80079fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a04:	d516      	bpl.n	8007a34 <_dtoa_r+0x34c>
 8007a06:	4ba8      	ldr	r3, [pc, #672]	@ (8007ca8 <_dtoa_r+0x5c0>)
 8007a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a10:	f7f8 ff3c 	bl	800088c <__aeabi_ddiv>
 8007a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a18:	f004 040f 	and.w	r4, r4, #15
 8007a1c:	2603      	movs	r6, #3
 8007a1e:	4da2      	ldr	r5, [pc, #648]	@ (8007ca8 <_dtoa_r+0x5c0>)
 8007a20:	b954      	cbnz	r4, 8007a38 <_dtoa_r+0x350>
 8007a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a2a:	f7f8 ff2f 	bl	800088c <__aeabi_ddiv>
 8007a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a32:	e028      	b.n	8007a86 <_dtoa_r+0x39e>
 8007a34:	2602      	movs	r6, #2
 8007a36:	e7f2      	b.n	8007a1e <_dtoa_r+0x336>
 8007a38:	07e1      	lsls	r1, r4, #31
 8007a3a:	d508      	bpl.n	8007a4e <_dtoa_r+0x366>
 8007a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a44:	f7f8 fdf8 	bl	8000638 <__aeabi_dmul>
 8007a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	1064      	asrs	r4, r4, #1
 8007a50:	3508      	adds	r5, #8
 8007a52:	e7e5      	b.n	8007a20 <_dtoa_r+0x338>
 8007a54:	f000 80d2 	beq.w	8007bfc <_dtoa_r+0x514>
 8007a58:	427c      	negs	r4, r7
 8007a5a:	4b92      	ldr	r3, [pc, #584]	@ (8007ca4 <_dtoa_r+0x5bc>)
 8007a5c:	4d92      	ldr	r5, [pc, #584]	@ (8007ca8 <_dtoa_r+0x5c0>)
 8007a5e:	f004 020f 	and.w	r2, r4, #15
 8007a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a6e:	f7f8 fde3 	bl	8000638 <__aeabi_dmul>
 8007a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a76:	1124      	asrs	r4, r4, #4
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2602      	movs	r6, #2
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	f040 80b2 	bne.w	8007be6 <_dtoa_r+0x4fe>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1d3      	bne.n	8007a2e <_dtoa_r+0x346>
 8007a86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80b7 	beq.w	8007c00 <_dtoa_r+0x518>
 8007a92:	4b86      	ldr	r3, [pc, #536]	@ (8007cac <_dtoa_r+0x5c4>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	4620      	mov	r0, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7f9 f83f 	bl	8000b1c <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f000 80ae 	beq.w	8007c00 <_dtoa_r+0x518>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 80aa 	beq.w	8007c00 <_dtoa_r+0x518>
 8007aac:	9b00      	ldr	r3, [sp, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd37      	ble.n	8007b22 <_dtoa_r+0x43a>
 8007ab2:	1e7b      	subs	r3, r7, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8007cb0 <_dtoa_r+0x5c8>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7f8 fdbb 	bl	8000638 <__aeabi_dmul>
 8007ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac6:	9c00      	ldr	r4, [sp, #0]
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7f8 fd4a 	bl	8000564 <__aeabi_i2d>
 8007ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad4:	f7f8 fdb0 	bl	8000638 <__aeabi_dmul>
 8007ad8:	4b76      	ldr	r3, [pc, #472]	@ (8007cb4 <_dtoa_r+0x5cc>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	f7f8 fbf6 	bl	80002cc <__adddf3>
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ae6:	2c00      	cmp	r4, #0
 8007ae8:	f040 808d 	bne.w	8007c06 <_dtoa_r+0x51e>
 8007aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af0:	4b71      	ldr	r3, [pc, #452]	@ (8007cb8 <_dtoa_r+0x5d0>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	f7f8 fbe8 	bl	80002c8 <__aeabi_dsub>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b00:	462a      	mov	r2, r5
 8007b02:	4633      	mov	r3, r6
 8007b04:	f7f9 f828 	bl	8000b58 <__aeabi_dcmpgt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f040 828b 	bne.w	8008024 <_dtoa_r+0x93c>
 8007b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b12:	462a      	mov	r2, r5
 8007b14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b18:	f7f9 f800 	bl	8000b1c <__aeabi_dcmplt>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f040 8128 	bne.w	8007d72 <_dtoa_r+0x68a>
 8007b22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f2c0 815a 	blt.w	8007de6 <_dtoa_r+0x6fe>
 8007b32:	2f0e      	cmp	r7, #14
 8007b34:	f300 8157 	bgt.w	8007de6 <_dtoa_r+0x6fe>
 8007b38:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca4 <_dtoa_r+0x5bc>)
 8007b3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b3e:	ed93 7b00 	vldr	d7, [r3]
 8007b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	ed8d 7b00 	vstr	d7, [sp]
 8007b4a:	da03      	bge.n	8007b54 <_dtoa_r+0x46c>
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f340 8101 	ble.w	8007d56 <_dtoa_r+0x66e>
 8007b54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b58:	4656      	mov	r6, sl
 8007b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fe93 	bl	800088c <__aeabi_ddiv>
 8007b66:	f7f9 f817 	bl	8000b98 <__aeabi_d2iz>
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	f7f8 fcfa 	bl	8000564 <__aeabi_i2d>
 8007b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b74:	f7f8 fd60 	bl	8000638 <__aeabi_dmul>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b84:	f7f8 fba0 	bl	80002c8 <__aeabi_dsub>
 8007b88:	f806 4b01 	strb.w	r4, [r6], #1
 8007b8c:	9d07      	ldr	r5, [sp, #28]
 8007b8e:	eba6 040a 	sub.w	r4, r6, sl
 8007b92:	42a5      	cmp	r5, r4
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	f040 8117 	bne.w	8007dca <_dtoa_r+0x6e2>
 8007b9c:	f7f8 fb96 	bl	80002cc <__adddf3>
 8007ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	f7f8 ffd6 	bl	8000b58 <__aeabi_dcmpgt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 80f9 	bne.w	8007da4 <_dtoa_r+0x6bc>
 8007bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 8007bbe:	b118      	cbz	r0, 8007bc8 <_dtoa_r+0x4e0>
 8007bc0:	f018 0f01 	tst.w	r8, #1
 8007bc4:	f040 80ee 	bne.w	8007da4 <_dtoa_r+0x6bc>
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4658      	mov	r0, fp
 8007bcc:	f000 fc90 	bl	80084f0 <_Bfree>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	7033      	strb	r3, [r6, #0]
 8007bd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bd6:	3701      	adds	r7, #1
 8007bd8:	601f      	str	r7, [r3, #0]
 8007bda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 831d 	beq.w	800821c <_dtoa_r+0xb34>
 8007be2:	601e      	str	r6, [r3, #0]
 8007be4:	e31a      	b.n	800821c <_dtoa_r+0xb34>
 8007be6:	07e2      	lsls	r2, r4, #31
 8007be8:	d505      	bpl.n	8007bf6 <_dtoa_r+0x50e>
 8007bea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bee:	f7f8 fd23 	bl	8000638 <__aeabi_dmul>
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	1064      	asrs	r4, r4, #1
 8007bf8:	3508      	adds	r5, #8
 8007bfa:	e73f      	b.n	8007a7c <_dtoa_r+0x394>
 8007bfc:	2602      	movs	r6, #2
 8007bfe:	e742      	b.n	8007a86 <_dtoa_r+0x39e>
 8007c00:	9c07      	ldr	r4, [sp, #28]
 8007c02:	9704      	str	r7, [sp, #16]
 8007c04:	e761      	b.n	8007aca <_dtoa_r+0x3e2>
 8007c06:	4b27      	ldr	r3, [pc, #156]	@ (8007ca4 <_dtoa_r+0x5bc>)
 8007c08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c12:	4454      	add	r4, sl
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d053      	beq.n	8007cc0 <_dtoa_r+0x5d8>
 8007c18:	4928      	ldr	r1, [pc, #160]	@ (8007cbc <_dtoa_r+0x5d4>)
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f7f8 fe36 	bl	800088c <__aeabi_ddiv>
 8007c20:	4633      	mov	r3, r6
 8007c22:	462a      	mov	r2, r5
 8007c24:	f7f8 fb50 	bl	80002c8 <__aeabi_dsub>
 8007c28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c2c:	4656      	mov	r6, sl
 8007c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c32:	f7f8 ffb1 	bl	8000b98 <__aeabi_d2iz>
 8007c36:	4605      	mov	r5, r0
 8007c38:	f7f8 fc94 	bl	8000564 <__aeabi_i2d>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c44:	f7f8 fb40 	bl	80002c8 <__aeabi_dsub>
 8007c48:	3530      	adds	r5, #48	@ 0x30
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c52:	f806 5b01 	strb.w	r5, [r6], #1
 8007c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c5a:	f7f8 ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d171      	bne.n	8007d46 <_dtoa_r+0x65e>
 8007c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c66:	4911      	ldr	r1, [pc, #68]	@ (8007cac <_dtoa_r+0x5c4>)
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f7f8 fb2d 	bl	80002c8 <__aeabi_dsub>
 8007c6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c72:	f7f8 ff53 	bl	8000b1c <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f040 8095 	bne.w	8007da6 <_dtoa_r+0x6be>
 8007c7c:	42a6      	cmp	r6, r4
 8007c7e:	f43f af50 	beq.w	8007b22 <_dtoa_r+0x43a>
 8007c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c86:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb0 <_dtoa_r+0x5c8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7f8 fcd5 	bl	8000638 <__aeabi_dmul>
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <_dtoa_r+0x5c8>)
 8007c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c94:	2200      	movs	r2, #0
 8007c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9a:	f7f8 fccd 	bl	8000638 <__aeabi_dmul>
 8007c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca2:	e7c4      	b.n	8007c2e <_dtoa_r+0x546>
 8007ca4:	08009a88 	.word	0x08009a88
 8007ca8:	08009a60 	.word	0x08009a60
 8007cac:	3ff00000 	.word	0x3ff00000
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	401c0000 	.word	0x401c0000
 8007cb8:	40140000 	.word	0x40140000
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7f8 fcb8 	bl	8000638 <__aeabi_dmul>
 8007cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ccc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007cce:	4656      	mov	r6, sl
 8007cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd4:	f7f8 ff60 	bl	8000b98 <__aeabi_d2iz>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f7f8 fc43 	bl	8000564 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce6:	f7f8 faef 	bl	80002c8 <__aeabi_dsub>
 8007cea:	3530      	adds	r5, #48	@ 0x30
 8007cec:	f806 5b01 	strb.w	r5, [r6], #1
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	d124      	bne.n	8007d4a <_dtoa_r+0x662>
 8007d00:	4bac      	ldr	r3, [pc, #688]	@ (8007fb4 <_dtoa_r+0x8cc>)
 8007d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d06:	f7f8 fae1 	bl	80002cc <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d12:	f7f8 ff21 	bl	8000b58 <__aeabi_dcmpgt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d145      	bne.n	8007da6 <_dtoa_r+0x6be>
 8007d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d1e:	49a5      	ldr	r1, [pc, #660]	@ (8007fb4 <_dtoa_r+0x8cc>)
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7f8 fad1 	bl	80002c8 <__aeabi_dsub>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2e:	f7f8 fef5 	bl	8000b1c <__aeabi_dcmplt>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f43f aef5 	beq.w	8007b22 <_dtoa_r+0x43a>
 8007d38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d3a:	1e73      	subs	r3, r6, #1
 8007d3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d42:	2b30      	cmp	r3, #48	@ 0x30
 8007d44:	d0f8      	beq.n	8007d38 <_dtoa_r+0x650>
 8007d46:	9f04      	ldr	r7, [sp, #16]
 8007d48:	e73e      	b.n	8007bc8 <_dtoa_r+0x4e0>
 8007d4a:	4b9b      	ldr	r3, [pc, #620]	@ (8007fb8 <_dtoa_r+0x8d0>)
 8007d4c:	f7f8 fc74 	bl	8000638 <__aeabi_dmul>
 8007d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d54:	e7bc      	b.n	8007cd0 <_dtoa_r+0x5e8>
 8007d56:	d10c      	bne.n	8007d72 <_dtoa_r+0x68a>
 8007d58:	4b98      	ldr	r3, [pc, #608]	@ (8007fbc <_dtoa_r+0x8d4>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d60:	f7f8 fc6a 	bl	8000638 <__aeabi_dmul>
 8007d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d68:	f7f8 feec 	bl	8000b44 <__aeabi_dcmpge>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f000 8157 	beq.w	8008020 <_dtoa_r+0x938>
 8007d72:	2400      	movs	r4, #0
 8007d74:	4625      	mov	r5, r4
 8007d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	4656      	mov	r6, sl
 8007d7e:	2700      	movs	r7, #0
 8007d80:	4621      	mov	r1, r4
 8007d82:	4658      	mov	r0, fp
 8007d84:	f000 fbb4 	bl	80084f0 <_Bfree>
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	d0dc      	beq.n	8007d46 <_dtoa_r+0x65e>
 8007d8c:	b12f      	cbz	r7, 8007d9a <_dtoa_r+0x6b2>
 8007d8e:	42af      	cmp	r7, r5
 8007d90:	d003      	beq.n	8007d9a <_dtoa_r+0x6b2>
 8007d92:	4639      	mov	r1, r7
 8007d94:	4658      	mov	r0, fp
 8007d96:	f000 fbab 	bl	80084f0 <_Bfree>
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fba7 	bl	80084f0 <_Bfree>
 8007da2:	e7d0      	b.n	8007d46 <_dtoa_r+0x65e>
 8007da4:	9704      	str	r7, [sp, #16]
 8007da6:	4633      	mov	r3, r6
 8007da8:	461e      	mov	r6, r3
 8007daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dae:	2a39      	cmp	r2, #57	@ 0x39
 8007db0:	d107      	bne.n	8007dc2 <_dtoa_r+0x6da>
 8007db2:	459a      	cmp	sl, r3
 8007db4:	d1f8      	bne.n	8007da8 <_dtoa_r+0x6c0>
 8007db6:	9a04      	ldr	r2, [sp, #16]
 8007db8:	3201      	adds	r2, #1
 8007dba:	9204      	str	r2, [sp, #16]
 8007dbc:	2230      	movs	r2, #48	@ 0x30
 8007dbe:	f88a 2000 	strb.w	r2, [sl]
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e7bd      	b.n	8007d46 <_dtoa_r+0x65e>
 8007dca:	4b7b      	ldr	r3, [pc, #492]	@ (8007fb8 <_dtoa_r+0x8d0>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f7f8 fc33 	bl	8000638 <__aeabi_dmul>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	460d      	mov	r5, r1
 8007dda:	f7f8 fe95 	bl	8000b08 <__aeabi_dcmpeq>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f43f aebb 	beq.w	8007b5a <_dtoa_r+0x472>
 8007de4:	e6f0      	b.n	8007bc8 <_dtoa_r+0x4e0>
 8007de6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	f000 80db 	beq.w	8007fa4 <_dtoa_r+0x8bc>
 8007dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df0:	2a01      	cmp	r2, #1
 8007df2:	f300 80bf 	bgt.w	8007f74 <_dtoa_r+0x88c>
 8007df6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	f000 80b7 	beq.w	8007f6c <_dtoa_r+0x884>
 8007dfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e04:	4646      	mov	r6, r8
 8007e06:	9a08      	ldr	r2, [sp, #32]
 8007e08:	2101      	movs	r1, #1
 8007e0a:	441a      	add	r2, r3
 8007e0c:	4658      	mov	r0, fp
 8007e0e:	4498      	add	r8, r3
 8007e10:	9208      	str	r2, [sp, #32]
 8007e12:	f000 fc21 	bl	8008658 <__i2b>
 8007e16:	4605      	mov	r5, r0
 8007e18:	b15e      	cbz	r6, 8007e32 <_dtoa_r+0x74a>
 8007e1a:	9b08      	ldr	r3, [sp, #32]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dd08      	ble.n	8007e32 <_dtoa_r+0x74a>
 8007e20:	42b3      	cmp	r3, r6
 8007e22:	9a08      	ldr	r2, [sp, #32]
 8007e24:	bfa8      	it	ge
 8007e26:	4633      	movge	r3, r6
 8007e28:	eba8 0803 	sub.w	r8, r8, r3
 8007e2c:	1af6      	subs	r6, r6, r3
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e34:	b1f3      	cbz	r3, 8007e74 <_dtoa_r+0x78c>
 8007e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80b7 	beq.w	8007fac <_dtoa_r+0x8c4>
 8007e3e:	b18c      	cbz	r4, 8007e64 <_dtoa_r+0x77c>
 8007e40:	4629      	mov	r1, r5
 8007e42:	4622      	mov	r2, r4
 8007e44:	4658      	mov	r0, fp
 8007e46:	f000 fcc7 	bl	80087d8 <__pow5mult>
 8007e4a:	464a      	mov	r2, r9
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4658      	mov	r0, fp
 8007e52:	f000 fc17 	bl	8008684 <__multiply>
 8007e56:	4649      	mov	r1, r9
 8007e58:	9004      	str	r0, [sp, #16]
 8007e5a:	4658      	mov	r0, fp
 8007e5c:	f000 fb48 	bl	80084f0 <_Bfree>
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	4699      	mov	r9, r3
 8007e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e66:	1b1a      	subs	r2, r3, r4
 8007e68:	d004      	beq.n	8007e74 <_dtoa_r+0x78c>
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fcb3 	bl	80087d8 <__pow5mult>
 8007e72:	4681      	mov	r9, r0
 8007e74:	2101      	movs	r1, #1
 8007e76:	4658      	mov	r0, fp
 8007e78:	f000 fbee 	bl	8008658 <__i2b>
 8007e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e7e:	4604      	mov	r4, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 81cf 	beq.w	8008224 <_dtoa_r+0xb3c>
 8007e86:	461a      	mov	r2, r3
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4658      	mov	r0, fp
 8007e8c:	f000 fca4 	bl	80087d8 <__pow5mult>
 8007e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	4604      	mov	r4, r0
 8007e96:	f300 8095 	bgt.w	8007fc4 <_dtoa_r+0x8dc>
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 8087 	bne.w	8007fb0 <_dtoa_r+0x8c8>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f040 8089 	bne.w	8007fc0 <_dtoa_r+0x8d8>
 8007eae:	9b03      	ldr	r3, [sp, #12]
 8007eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eb4:	0d1b      	lsrs	r3, r3, #20
 8007eb6:	051b      	lsls	r3, r3, #20
 8007eb8:	b12b      	cbz	r3, 8007ec6 <_dtoa_r+0x7de>
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	9308      	str	r3, [sp, #32]
 8007ec0:	f108 0801 	add.w	r8, r8, #1
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 81b0 	beq.w	8008230 <_dtoa_r+0xb48>
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ed6:	6918      	ldr	r0, [r3, #16]
 8007ed8:	f000 fb72 	bl	80085c0 <__hi0bits>
 8007edc:	f1c0 0020 	rsb	r0, r0, #32
 8007ee0:	9b08      	ldr	r3, [sp, #32]
 8007ee2:	4418      	add	r0, r3
 8007ee4:	f010 001f 	ands.w	r0, r0, #31
 8007ee8:	d077      	beq.n	8007fda <_dtoa_r+0x8f2>
 8007eea:	f1c0 0320 	rsb	r3, r0, #32
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	dd6b      	ble.n	8007fca <_dtoa_r+0x8e2>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	f1c0 001c 	rsb	r0, r0, #28
 8007ef8:	4403      	add	r3, r0
 8007efa:	4480      	add	r8, r0
 8007efc:	4406      	add	r6, r0
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	dd05      	ble.n	8007f12 <_dtoa_r+0x82a>
 8007f06:	4649      	mov	r1, r9
 8007f08:	4642      	mov	r2, r8
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	f000 fcbe 	bl	800888c <__lshift>
 8007f10:	4681      	mov	r9, r0
 8007f12:	9b08      	ldr	r3, [sp, #32]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	dd05      	ble.n	8007f24 <_dtoa_r+0x83c>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4658      	mov	r0, fp
 8007f1e:	f000 fcb5 	bl	800888c <__lshift>
 8007f22:	4604      	mov	r4, r0
 8007f24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d059      	beq.n	8007fde <_dtoa_r+0x8f6>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4648      	mov	r0, r9
 8007f2e:	f000 fd19 	bl	8008964 <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	da53      	bge.n	8007fde <_dtoa_r+0x8f6>
 8007f36:	1e7b      	subs	r3, r7, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	220a      	movs	r2, #10
 8007f40:	4658      	mov	r0, fp
 8007f42:	f000 faf7 	bl	8008534 <__multadd>
 8007f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f48:	4681      	mov	r9, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8172 	beq.w	8008234 <_dtoa_r+0xb4c>
 8007f50:	2300      	movs	r3, #0
 8007f52:	4629      	mov	r1, r5
 8007f54:	220a      	movs	r2, #10
 8007f56:	4658      	mov	r0, fp
 8007f58:	f000 faec 	bl	8008534 <__multadd>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	4605      	mov	r5, r0
 8007f62:	dc67      	bgt.n	8008034 <_dtoa_r+0x94c>
 8007f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	dc41      	bgt.n	8007fee <_dtoa_r+0x906>
 8007f6a:	e063      	b.n	8008034 <_dtoa_r+0x94c>
 8007f6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f72:	e746      	b.n	8007e02 <_dtoa_r+0x71a>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	1e5c      	subs	r4, r3, #1
 8007f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	bfbf      	itttt	lt
 8007f7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007f82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f84:	1ae3      	sublt	r3, r4, r3
 8007f86:	bfb4      	ite	lt
 8007f88:	18d2      	addlt	r2, r2, r3
 8007f8a:	1b1c      	subge	r4, r3, r4
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	bfbc      	itt	lt
 8007f90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007f92:	2400      	movlt	r4, #0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfb5      	itete	lt
 8007f98:	eba8 0603 	sublt.w	r6, r8, r3
 8007f9c:	9b07      	ldrge	r3, [sp, #28]
 8007f9e:	2300      	movlt	r3, #0
 8007fa0:	4646      	movge	r6, r8
 8007fa2:	e730      	b.n	8007e06 <_dtoa_r+0x71e>
 8007fa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fa8:	4646      	mov	r6, r8
 8007faa:	e735      	b.n	8007e18 <_dtoa_r+0x730>
 8007fac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fae:	e75c      	b.n	8007e6a <_dtoa_r+0x782>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e788      	b.n	8007ec6 <_dtoa_r+0x7de>
 8007fb4:	3fe00000 	.word	0x3fe00000
 8007fb8:	40240000 	.word	0x40240000
 8007fbc:	40140000 	.word	0x40140000
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	e780      	b.n	8007ec6 <_dtoa_r+0x7de>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc8:	e782      	b.n	8007ed0 <_dtoa_r+0x7e8>
 8007fca:	d099      	beq.n	8007f00 <_dtoa_r+0x818>
 8007fcc:	9a08      	ldr	r2, [sp, #32]
 8007fce:	331c      	adds	r3, #28
 8007fd0:	441a      	add	r2, r3
 8007fd2:	4498      	add	r8, r3
 8007fd4:	441e      	add	r6, r3
 8007fd6:	9208      	str	r2, [sp, #32]
 8007fd8:	e792      	b.n	8007f00 <_dtoa_r+0x818>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	e7f6      	b.n	8007fcc <_dtoa_r+0x8e4>
 8007fde:	9b07      	ldr	r3, [sp, #28]
 8007fe0:	9704      	str	r7, [sp, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dc20      	bgt.n	8008028 <_dtoa_r+0x940>
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	dd1e      	ble.n	800802c <_dtoa_r+0x944>
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f47f aec0 	bne.w	8007d76 <_dtoa_r+0x68e>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	f000 fa9a 	bl	8008534 <__multadd>
 8008000:	4601      	mov	r1, r0
 8008002:	4604      	mov	r4, r0
 8008004:	4648      	mov	r0, r9
 8008006:	f000 fcad 	bl	8008964 <__mcmp>
 800800a:	2800      	cmp	r0, #0
 800800c:	f77f aeb3 	ble.w	8007d76 <_dtoa_r+0x68e>
 8008010:	4656      	mov	r6, sl
 8008012:	2331      	movs	r3, #49	@ 0x31
 8008014:	f806 3b01 	strb.w	r3, [r6], #1
 8008018:	9b04      	ldr	r3, [sp, #16]
 800801a:	3301      	adds	r3, #1
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	e6ae      	b.n	8007d7e <_dtoa_r+0x696>
 8008020:	9c07      	ldr	r4, [sp, #28]
 8008022:	9704      	str	r7, [sp, #16]
 8008024:	4625      	mov	r5, r4
 8008026:	e7f3      	b.n	8008010 <_dtoa_r+0x928>
 8008028:	9b07      	ldr	r3, [sp, #28]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 8104 	beq.w	800823c <_dtoa_r+0xb54>
 8008034:	2e00      	cmp	r6, #0
 8008036:	dd05      	ble.n	8008044 <_dtoa_r+0x95c>
 8008038:	4629      	mov	r1, r5
 800803a:	4632      	mov	r2, r6
 800803c:	4658      	mov	r0, fp
 800803e:	f000 fc25 	bl	800888c <__lshift>
 8008042:	4605      	mov	r5, r0
 8008044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d05a      	beq.n	8008100 <_dtoa_r+0xa18>
 800804a:	6869      	ldr	r1, [r5, #4]
 800804c:	4658      	mov	r0, fp
 800804e:	f000 fa0f 	bl	8008470 <_Balloc>
 8008052:	4606      	mov	r6, r0
 8008054:	b928      	cbnz	r0, 8008062 <_dtoa_r+0x97a>
 8008056:	4b84      	ldr	r3, [pc, #528]	@ (8008268 <_dtoa_r+0xb80>)
 8008058:	4602      	mov	r2, r0
 800805a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800805e:	f7ff bb5a 	b.w	8007716 <_dtoa_r+0x2e>
 8008062:	692a      	ldr	r2, [r5, #16]
 8008064:	3202      	adds	r2, #2
 8008066:	0092      	lsls	r2, r2, #2
 8008068:	f105 010c 	add.w	r1, r5, #12
 800806c:	300c      	adds	r0, #12
 800806e:	f7ff faa4 	bl	80075ba <memcpy>
 8008072:	2201      	movs	r2, #1
 8008074:	4631      	mov	r1, r6
 8008076:	4658      	mov	r0, fp
 8008078:	f000 fc08 	bl	800888c <__lshift>
 800807c:	f10a 0301 	add.w	r3, sl, #1
 8008080:	9307      	str	r3, [sp, #28]
 8008082:	9b00      	ldr	r3, [sp, #0]
 8008084:	4453      	add	r3, sl
 8008086:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	462f      	mov	r7, r5
 8008090:	930a      	str	r3, [sp, #40]	@ 0x28
 8008092:	4605      	mov	r5, r0
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	4621      	mov	r1, r4
 8008098:	3b01      	subs	r3, #1
 800809a:	4648      	mov	r0, r9
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	f7ff fa9a 	bl	80075d6 <quorem>
 80080a2:	4639      	mov	r1, r7
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080aa:	4648      	mov	r0, r9
 80080ac:	f000 fc5a 	bl	8008964 <__mcmp>
 80080b0:	462a      	mov	r2, r5
 80080b2:	9008      	str	r0, [sp, #32]
 80080b4:	4621      	mov	r1, r4
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fc70 	bl	800899c <__mdiff>
 80080bc:	68c2      	ldr	r2, [r0, #12]
 80080be:	4606      	mov	r6, r0
 80080c0:	bb02      	cbnz	r2, 8008104 <_dtoa_r+0xa1c>
 80080c2:	4601      	mov	r1, r0
 80080c4:	4648      	mov	r0, r9
 80080c6:	f000 fc4d 	bl	8008964 <__mcmp>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4631      	mov	r1, r6
 80080ce:	4658      	mov	r0, fp
 80080d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080d2:	f000 fa0d 	bl	80084f0 <_Bfree>
 80080d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080da:	9e07      	ldr	r6, [sp, #28]
 80080dc:	ea43 0102 	orr.w	r1, r3, r2
 80080e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e2:	4319      	orrs	r1, r3
 80080e4:	d110      	bne.n	8008108 <_dtoa_r+0xa20>
 80080e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080ea:	d029      	beq.n	8008140 <_dtoa_r+0xa58>
 80080ec:	9b08      	ldr	r3, [sp, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dd02      	ble.n	80080f8 <_dtoa_r+0xa10>
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080f8:	9b00      	ldr	r3, [sp, #0]
 80080fa:	f883 8000 	strb.w	r8, [r3]
 80080fe:	e63f      	b.n	8007d80 <_dtoa_r+0x698>
 8008100:	4628      	mov	r0, r5
 8008102:	e7bb      	b.n	800807c <_dtoa_r+0x994>
 8008104:	2201      	movs	r2, #1
 8008106:	e7e1      	b.n	80080cc <_dtoa_r+0x9e4>
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	2b00      	cmp	r3, #0
 800810c:	db04      	blt.n	8008118 <_dtoa_r+0xa30>
 800810e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008110:	430b      	orrs	r3, r1
 8008112:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008114:	430b      	orrs	r3, r1
 8008116:	d120      	bne.n	800815a <_dtoa_r+0xa72>
 8008118:	2a00      	cmp	r2, #0
 800811a:	dded      	ble.n	80080f8 <_dtoa_r+0xa10>
 800811c:	4649      	mov	r1, r9
 800811e:	2201      	movs	r2, #1
 8008120:	4658      	mov	r0, fp
 8008122:	f000 fbb3 	bl	800888c <__lshift>
 8008126:	4621      	mov	r1, r4
 8008128:	4681      	mov	r9, r0
 800812a:	f000 fc1b 	bl	8008964 <__mcmp>
 800812e:	2800      	cmp	r0, #0
 8008130:	dc03      	bgt.n	800813a <_dtoa_r+0xa52>
 8008132:	d1e1      	bne.n	80080f8 <_dtoa_r+0xa10>
 8008134:	f018 0f01 	tst.w	r8, #1
 8008138:	d0de      	beq.n	80080f8 <_dtoa_r+0xa10>
 800813a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800813e:	d1d8      	bne.n	80080f2 <_dtoa_r+0xa0a>
 8008140:	9a00      	ldr	r2, [sp, #0]
 8008142:	2339      	movs	r3, #57	@ 0x39
 8008144:	7013      	strb	r3, [r2, #0]
 8008146:	4633      	mov	r3, r6
 8008148:	461e      	mov	r6, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008150:	2a39      	cmp	r2, #57	@ 0x39
 8008152:	d052      	beq.n	80081fa <_dtoa_r+0xb12>
 8008154:	3201      	adds	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e612      	b.n	8007d80 <_dtoa_r+0x698>
 800815a:	2a00      	cmp	r2, #0
 800815c:	dd07      	ble.n	800816e <_dtoa_r+0xa86>
 800815e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008162:	d0ed      	beq.n	8008140 <_dtoa_r+0xa58>
 8008164:	9a00      	ldr	r2, [sp, #0]
 8008166:	f108 0301 	add.w	r3, r8, #1
 800816a:	7013      	strb	r3, [r2, #0]
 800816c:	e608      	b.n	8007d80 <_dtoa_r+0x698>
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	9a07      	ldr	r2, [sp, #28]
 8008172:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008178:	4293      	cmp	r3, r2
 800817a:	d028      	beq.n	80081ce <_dtoa_r+0xae6>
 800817c:	4649      	mov	r1, r9
 800817e:	2300      	movs	r3, #0
 8008180:	220a      	movs	r2, #10
 8008182:	4658      	mov	r0, fp
 8008184:	f000 f9d6 	bl	8008534 <__multadd>
 8008188:	42af      	cmp	r7, r5
 800818a:	4681      	mov	r9, r0
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	f04f 020a 	mov.w	r2, #10
 8008194:	4639      	mov	r1, r7
 8008196:	4658      	mov	r0, fp
 8008198:	d107      	bne.n	80081aa <_dtoa_r+0xac2>
 800819a:	f000 f9cb 	bl	8008534 <__multadd>
 800819e:	4607      	mov	r7, r0
 80081a0:	4605      	mov	r5, r0
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	3301      	adds	r3, #1
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	e774      	b.n	8008094 <_dtoa_r+0x9ac>
 80081aa:	f000 f9c3 	bl	8008534 <__multadd>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4607      	mov	r7, r0
 80081b2:	2300      	movs	r3, #0
 80081b4:	220a      	movs	r2, #10
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 f9bc 	bl	8008534 <__multadd>
 80081bc:	4605      	mov	r5, r0
 80081be:	e7f0      	b.n	80081a2 <_dtoa_r+0xaba>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bfcc      	ite	gt
 80081c6:	461e      	movgt	r6, r3
 80081c8:	2601      	movle	r6, #1
 80081ca:	4456      	add	r6, sl
 80081cc:	2700      	movs	r7, #0
 80081ce:	4649      	mov	r1, r9
 80081d0:	2201      	movs	r2, #1
 80081d2:	4658      	mov	r0, fp
 80081d4:	f000 fb5a 	bl	800888c <__lshift>
 80081d8:	4621      	mov	r1, r4
 80081da:	4681      	mov	r9, r0
 80081dc:	f000 fbc2 	bl	8008964 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	dcb0      	bgt.n	8008146 <_dtoa_r+0xa5e>
 80081e4:	d102      	bne.n	80081ec <_dtoa_r+0xb04>
 80081e6:	f018 0f01 	tst.w	r8, #1
 80081ea:	d1ac      	bne.n	8008146 <_dtoa_r+0xa5e>
 80081ec:	4633      	mov	r3, r6
 80081ee:	461e      	mov	r6, r3
 80081f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f4:	2a30      	cmp	r2, #48	@ 0x30
 80081f6:	d0fa      	beq.n	80081ee <_dtoa_r+0xb06>
 80081f8:	e5c2      	b.n	8007d80 <_dtoa_r+0x698>
 80081fa:	459a      	cmp	sl, r3
 80081fc:	d1a4      	bne.n	8008148 <_dtoa_r+0xa60>
 80081fe:	9b04      	ldr	r3, [sp, #16]
 8008200:	3301      	adds	r3, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	2331      	movs	r3, #49	@ 0x31
 8008206:	f88a 3000 	strb.w	r3, [sl]
 800820a:	e5b9      	b.n	8007d80 <_dtoa_r+0x698>
 800820c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800820e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800826c <_dtoa_r+0xb84>
 8008212:	b11b      	cbz	r3, 800821c <_dtoa_r+0xb34>
 8008214:	f10a 0308 	add.w	r3, sl, #8
 8008218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	4650      	mov	r0, sl
 800821e:	b019      	add	sp, #100	@ 0x64
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008226:	2b01      	cmp	r3, #1
 8008228:	f77f ae37 	ble.w	8007e9a <_dtoa_r+0x7b2>
 800822c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800822e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008230:	2001      	movs	r0, #1
 8008232:	e655      	b.n	8007ee0 <_dtoa_r+0x7f8>
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f77f aed6 	ble.w	8007fe8 <_dtoa_r+0x900>
 800823c:	4656      	mov	r6, sl
 800823e:	4621      	mov	r1, r4
 8008240:	4648      	mov	r0, r9
 8008242:	f7ff f9c8 	bl	80075d6 <quorem>
 8008246:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800824a:	f806 8b01 	strb.w	r8, [r6], #1
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	eba6 020a 	sub.w	r2, r6, sl
 8008254:	4293      	cmp	r3, r2
 8008256:	ddb3      	ble.n	80081c0 <_dtoa_r+0xad8>
 8008258:	4649      	mov	r1, r9
 800825a:	2300      	movs	r3, #0
 800825c:	220a      	movs	r2, #10
 800825e:	4658      	mov	r0, fp
 8008260:	f000 f968 	bl	8008534 <__multadd>
 8008264:	4681      	mov	r9, r0
 8008266:	e7ea      	b.n	800823e <_dtoa_r+0xb56>
 8008268:	080099e8 	.word	0x080099e8
 800826c:	0800996c 	.word	0x0800996c

08008270 <_free_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4605      	mov	r5, r0
 8008274:	2900      	cmp	r1, #0
 8008276:	d041      	beq.n	80082fc <_free_r+0x8c>
 8008278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827c:	1f0c      	subs	r4, r1, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfb8      	it	lt
 8008282:	18e4      	addlt	r4, r4, r3
 8008284:	f000 f8e8 	bl	8008458 <__malloc_lock>
 8008288:	4a1d      	ldr	r2, [pc, #116]	@ (8008300 <_free_r+0x90>)
 800828a:	6813      	ldr	r3, [r2, #0]
 800828c:	b933      	cbnz	r3, 800829c <_free_r+0x2c>
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	6014      	str	r4, [r2, #0]
 8008292:	4628      	mov	r0, r5
 8008294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008298:	f000 b8e4 	b.w	8008464 <__malloc_unlock>
 800829c:	42a3      	cmp	r3, r4
 800829e:	d908      	bls.n	80082b2 <_free_r+0x42>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	1821      	adds	r1, r4, r0
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf01      	itttt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	1809      	addeq	r1, r1, r0
 80082ae:	6021      	streq	r1, [r4, #0]
 80082b0:	e7ed      	b.n	800828e <_free_r+0x1e>
 80082b2:	461a      	mov	r2, r3
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b10b      	cbz	r3, 80082bc <_free_r+0x4c>
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d9fa      	bls.n	80082b2 <_free_r+0x42>
 80082bc:	6811      	ldr	r1, [r2, #0]
 80082be:	1850      	adds	r0, r2, r1
 80082c0:	42a0      	cmp	r0, r4
 80082c2:	d10b      	bne.n	80082dc <_free_r+0x6c>
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	4401      	add	r1, r0
 80082c8:	1850      	adds	r0, r2, r1
 80082ca:	4283      	cmp	r3, r0
 80082cc:	6011      	str	r1, [r2, #0]
 80082ce:	d1e0      	bne.n	8008292 <_free_r+0x22>
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	6053      	str	r3, [r2, #4]
 80082d6:	4408      	add	r0, r1
 80082d8:	6010      	str	r0, [r2, #0]
 80082da:	e7da      	b.n	8008292 <_free_r+0x22>
 80082dc:	d902      	bls.n	80082e4 <_free_r+0x74>
 80082de:	230c      	movs	r3, #12
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	e7d6      	b.n	8008292 <_free_r+0x22>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	1821      	adds	r1, r4, r0
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf04      	itt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	6063      	str	r3, [r4, #4]
 80082f2:	bf04      	itt	eq
 80082f4:	1809      	addeq	r1, r1, r0
 80082f6:	6021      	streq	r1, [r4, #0]
 80082f8:	6054      	str	r4, [r2, #4]
 80082fa:	e7ca      	b.n	8008292 <_free_r+0x22>
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	20004d58 	.word	0x20004d58

08008304 <malloc>:
 8008304:	4b02      	ldr	r3, [pc, #8]	@ (8008310 <malloc+0xc>)
 8008306:	4601      	mov	r1, r0
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f000 b825 	b.w	8008358 <_malloc_r>
 800830e:	bf00      	nop
 8008310:	2000001c 	.word	0x2000001c

08008314 <sbrk_aligned>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4e0f      	ldr	r6, [pc, #60]	@ (8008354 <sbrk_aligned+0x40>)
 8008318:	460c      	mov	r4, r1
 800831a:	6831      	ldr	r1, [r6, #0]
 800831c:	4605      	mov	r5, r0
 800831e:	b911      	cbnz	r1, 8008326 <sbrk_aligned+0x12>
 8008320:	f001 f81c 	bl	800935c <_sbrk_r>
 8008324:	6030      	str	r0, [r6, #0]
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f001 f817 	bl	800935c <_sbrk_r>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d103      	bne.n	800833a <sbrk_aligned+0x26>
 8008332:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008336:	4620      	mov	r0, r4
 8008338:	bd70      	pop	{r4, r5, r6, pc}
 800833a:	1cc4      	adds	r4, r0, #3
 800833c:	f024 0403 	bic.w	r4, r4, #3
 8008340:	42a0      	cmp	r0, r4
 8008342:	d0f8      	beq.n	8008336 <sbrk_aligned+0x22>
 8008344:	1a21      	subs	r1, r4, r0
 8008346:	4628      	mov	r0, r5
 8008348:	f001 f808 	bl	800935c <_sbrk_r>
 800834c:	3001      	adds	r0, #1
 800834e:	d1f2      	bne.n	8008336 <sbrk_aligned+0x22>
 8008350:	e7ef      	b.n	8008332 <sbrk_aligned+0x1e>
 8008352:	bf00      	nop
 8008354:	20004d54 	.word	0x20004d54

08008358 <_malloc_r>:
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800835c:	1ccd      	adds	r5, r1, #3
 800835e:	f025 0503 	bic.w	r5, r5, #3
 8008362:	3508      	adds	r5, #8
 8008364:	2d0c      	cmp	r5, #12
 8008366:	bf38      	it	cc
 8008368:	250c      	movcc	r5, #12
 800836a:	2d00      	cmp	r5, #0
 800836c:	4606      	mov	r6, r0
 800836e:	db01      	blt.n	8008374 <_malloc_r+0x1c>
 8008370:	42a9      	cmp	r1, r5
 8008372:	d904      	bls.n	800837e <_malloc_r+0x26>
 8008374:	230c      	movs	r3, #12
 8008376:	6033      	str	r3, [r6, #0]
 8008378:	2000      	movs	r0, #0
 800837a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008454 <_malloc_r+0xfc>
 8008382:	f000 f869 	bl	8008458 <__malloc_lock>
 8008386:	f8d8 3000 	ldr.w	r3, [r8]
 800838a:	461c      	mov	r4, r3
 800838c:	bb44      	cbnz	r4, 80083e0 <_malloc_r+0x88>
 800838e:	4629      	mov	r1, r5
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff ffbf 	bl	8008314 <sbrk_aligned>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	4604      	mov	r4, r0
 800839a:	d158      	bne.n	800844e <_malloc_r+0xf6>
 800839c:	f8d8 4000 	ldr.w	r4, [r8]
 80083a0:	4627      	mov	r7, r4
 80083a2:	2f00      	cmp	r7, #0
 80083a4:	d143      	bne.n	800842e <_malloc_r+0xd6>
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	d04b      	beq.n	8008442 <_malloc_r+0xea>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	4639      	mov	r1, r7
 80083ae:	4630      	mov	r0, r6
 80083b0:	eb04 0903 	add.w	r9, r4, r3
 80083b4:	f000 ffd2 	bl	800935c <_sbrk_r>
 80083b8:	4581      	cmp	r9, r0
 80083ba:	d142      	bne.n	8008442 <_malloc_r+0xea>
 80083bc:	6821      	ldr	r1, [r4, #0]
 80083be:	1a6d      	subs	r5, r5, r1
 80083c0:	4629      	mov	r1, r5
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff ffa6 	bl	8008314 <sbrk_aligned>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d03a      	beq.n	8008442 <_malloc_r+0xea>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	442b      	add	r3, r5
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	f8d8 3000 	ldr.w	r3, [r8]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	bb62      	cbnz	r2, 8008434 <_malloc_r+0xdc>
 80083da:	f8c8 7000 	str.w	r7, [r8]
 80083de:	e00f      	b.n	8008400 <_malloc_r+0xa8>
 80083e0:	6822      	ldr	r2, [r4, #0]
 80083e2:	1b52      	subs	r2, r2, r5
 80083e4:	d420      	bmi.n	8008428 <_malloc_r+0xd0>
 80083e6:	2a0b      	cmp	r2, #11
 80083e8:	d917      	bls.n	800841a <_malloc_r+0xc2>
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	6025      	str	r5, [r4, #0]
 80083f0:	bf18      	it	ne
 80083f2:	6059      	strne	r1, [r3, #4]
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	bf08      	it	eq
 80083f8:	f8c8 1000 	streq.w	r1, [r8]
 80083fc:	5162      	str	r2, [r4, r5]
 80083fe:	604b      	str	r3, [r1, #4]
 8008400:	4630      	mov	r0, r6
 8008402:	f000 f82f 	bl	8008464 <__malloc_unlock>
 8008406:	f104 000b 	add.w	r0, r4, #11
 800840a:	1d23      	adds	r3, r4, #4
 800840c:	f020 0007 	bic.w	r0, r0, #7
 8008410:	1ac2      	subs	r2, r0, r3
 8008412:	bf1c      	itt	ne
 8008414:	1a1b      	subne	r3, r3, r0
 8008416:	50a3      	strne	r3, [r4, r2]
 8008418:	e7af      	b.n	800837a <_malloc_r+0x22>
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	42a3      	cmp	r3, r4
 800841e:	bf0c      	ite	eq
 8008420:	f8c8 2000 	streq.w	r2, [r8]
 8008424:	605a      	strne	r2, [r3, #4]
 8008426:	e7eb      	b.n	8008400 <_malloc_r+0xa8>
 8008428:	4623      	mov	r3, r4
 800842a:	6864      	ldr	r4, [r4, #4]
 800842c:	e7ae      	b.n	800838c <_malloc_r+0x34>
 800842e:	463c      	mov	r4, r7
 8008430:	687f      	ldr	r7, [r7, #4]
 8008432:	e7b6      	b.n	80083a2 <_malloc_r+0x4a>
 8008434:	461a      	mov	r2, r3
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	42a3      	cmp	r3, r4
 800843a:	d1fb      	bne.n	8008434 <_malloc_r+0xdc>
 800843c:	2300      	movs	r3, #0
 800843e:	6053      	str	r3, [r2, #4]
 8008440:	e7de      	b.n	8008400 <_malloc_r+0xa8>
 8008442:	230c      	movs	r3, #12
 8008444:	6033      	str	r3, [r6, #0]
 8008446:	4630      	mov	r0, r6
 8008448:	f000 f80c 	bl	8008464 <__malloc_unlock>
 800844c:	e794      	b.n	8008378 <_malloc_r+0x20>
 800844e:	6005      	str	r5, [r0, #0]
 8008450:	e7d6      	b.n	8008400 <_malloc_r+0xa8>
 8008452:	bf00      	nop
 8008454:	20004d58 	.word	0x20004d58

08008458 <__malloc_lock>:
 8008458:	4801      	ldr	r0, [pc, #4]	@ (8008460 <__malloc_lock+0x8>)
 800845a:	f7ff b8ac 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20004d50 	.word	0x20004d50

08008464 <__malloc_unlock>:
 8008464:	4801      	ldr	r0, [pc, #4]	@ (800846c <__malloc_unlock+0x8>)
 8008466:	f7ff b8a7 	b.w	80075b8 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20004d50 	.word	0x20004d50

08008470 <_Balloc>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	69c6      	ldr	r6, [r0, #28]
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	b976      	cbnz	r6, 8008498 <_Balloc+0x28>
 800847a:	2010      	movs	r0, #16
 800847c:	f7ff ff42 	bl	8008304 <malloc>
 8008480:	4602      	mov	r2, r0
 8008482:	61e0      	str	r0, [r4, #28]
 8008484:	b920      	cbnz	r0, 8008490 <_Balloc+0x20>
 8008486:	4b18      	ldr	r3, [pc, #96]	@ (80084e8 <_Balloc+0x78>)
 8008488:	4818      	ldr	r0, [pc, #96]	@ (80084ec <_Balloc+0x7c>)
 800848a:	216b      	movs	r1, #107	@ 0x6b
 800848c:	f000 ff76 	bl	800937c <__assert_func>
 8008490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008494:	6006      	str	r6, [r0, #0]
 8008496:	60c6      	str	r6, [r0, #12]
 8008498:	69e6      	ldr	r6, [r4, #28]
 800849a:	68f3      	ldr	r3, [r6, #12]
 800849c:	b183      	cbz	r3, 80084c0 <_Balloc+0x50>
 800849e:	69e3      	ldr	r3, [r4, #28]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084a6:	b9b8      	cbnz	r0, 80084d8 <_Balloc+0x68>
 80084a8:	2101      	movs	r1, #1
 80084aa:	fa01 f605 	lsl.w	r6, r1, r5
 80084ae:	1d72      	adds	r2, r6, #5
 80084b0:	0092      	lsls	r2, r2, #2
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 ff80 	bl	80093b8 <_calloc_r>
 80084b8:	b160      	cbz	r0, 80084d4 <_Balloc+0x64>
 80084ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084be:	e00e      	b.n	80084de <_Balloc+0x6e>
 80084c0:	2221      	movs	r2, #33	@ 0x21
 80084c2:	2104      	movs	r1, #4
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 ff77 	bl	80093b8 <_calloc_r>
 80084ca:	69e3      	ldr	r3, [r4, #28]
 80084cc:	60f0      	str	r0, [r6, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e4      	bne.n	800849e <_Balloc+0x2e>
 80084d4:	2000      	movs	r0, #0
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	6802      	ldr	r2, [r0, #0]
 80084da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084de:	2300      	movs	r3, #0
 80084e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084e4:	e7f7      	b.n	80084d6 <_Balloc+0x66>
 80084e6:	bf00      	nop
 80084e8:	08009979 	.word	0x08009979
 80084ec:	080099f9 	.word	0x080099f9

080084f0 <_Bfree>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	69c6      	ldr	r6, [r0, #28]
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b976      	cbnz	r6, 8008518 <_Bfree+0x28>
 80084fa:	2010      	movs	r0, #16
 80084fc:	f7ff ff02 	bl	8008304 <malloc>
 8008500:	4602      	mov	r2, r0
 8008502:	61e8      	str	r0, [r5, #28]
 8008504:	b920      	cbnz	r0, 8008510 <_Bfree+0x20>
 8008506:	4b09      	ldr	r3, [pc, #36]	@ (800852c <_Bfree+0x3c>)
 8008508:	4809      	ldr	r0, [pc, #36]	@ (8008530 <_Bfree+0x40>)
 800850a:	218f      	movs	r1, #143	@ 0x8f
 800850c:	f000 ff36 	bl	800937c <__assert_func>
 8008510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008514:	6006      	str	r6, [r0, #0]
 8008516:	60c6      	str	r6, [r0, #12]
 8008518:	b13c      	cbz	r4, 800852a <_Bfree+0x3a>
 800851a:	69eb      	ldr	r3, [r5, #28]
 800851c:	6862      	ldr	r2, [r4, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008524:	6021      	str	r1, [r4, #0]
 8008526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	08009979 	.word	0x08009979
 8008530:	080099f9 	.word	0x080099f9

08008534 <__multadd>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	690d      	ldr	r5, [r1, #16]
 800853a:	4607      	mov	r7, r0
 800853c:	460c      	mov	r4, r1
 800853e:	461e      	mov	r6, r3
 8008540:	f101 0c14 	add.w	ip, r1, #20
 8008544:	2000      	movs	r0, #0
 8008546:	f8dc 3000 	ldr.w	r3, [ip]
 800854a:	b299      	uxth	r1, r3
 800854c:	fb02 6101 	mla	r1, r2, r1, r6
 8008550:	0c1e      	lsrs	r6, r3, #16
 8008552:	0c0b      	lsrs	r3, r1, #16
 8008554:	fb02 3306 	mla	r3, r2, r6, r3
 8008558:	b289      	uxth	r1, r1
 800855a:	3001      	adds	r0, #1
 800855c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008560:	4285      	cmp	r5, r0
 8008562:	f84c 1b04 	str.w	r1, [ip], #4
 8008566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800856a:	dcec      	bgt.n	8008546 <__multadd+0x12>
 800856c:	b30e      	cbz	r6, 80085b2 <__multadd+0x7e>
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	42ab      	cmp	r3, r5
 8008572:	dc19      	bgt.n	80085a8 <__multadd+0x74>
 8008574:	6861      	ldr	r1, [r4, #4]
 8008576:	4638      	mov	r0, r7
 8008578:	3101      	adds	r1, #1
 800857a:	f7ff ff79 	bl	8008470 <_Balloc>
 800857e:	4680      	mov	r8, r0
 8008580:	b928      	cbnz	r0, 800858e <__multadd+0x5a>
 8008582:	4602      	mov	r2, r0
 8008584:	4b0c      	ldr	r3, [pc, #48]	@ (80085b8 <__multadd+0x84>)
 8008586:	480d      	ldr	r0, [pc, #52]	@ (80085bc <__multadd+0x88>)
 8008588:	21ba      	movs	r1, #186	@ 0xba
 800858a:	f000 fef7 	bl	800937c <__assert_func>
 800858e:	6922      	ldr	r2, [r4, #16]
 8008590:	3202      	adds	r2, #2
 8008592:	f104 010c 	add.w	r1, r4, #12
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	300c      	adds	r0, #12
 800859a:	f7ff f80e 	bl	80075ba <memcpy>
 800859e:	4621      	mov	r1, r4
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7ff ffa5 	bl	80084f0 <_Bfree>
 80085a6:	4644      	mov	r4, r8
 80085a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085ac:	3501      	adds	r5, #1
 80085ae:	615e      	str	r6, [r3, #20]
 80085b0:	6125      	str	r5, [r4, #16]
 80085b2:	4620      	mov	r0, r4
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	080099e8 	.word	0x080099e8
 80085bc:	080099f9 	.word	0x080099f9

080085c0 <__hi0bits>:
 80085c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085c4:	4603      	mov	r3, r0
 80085c6:	bf36      	itet	cc
 80085c8:	0403      	lslcc	r3, r0, #16
 80085ca:	2000      	movcs	r0, #0
 80085cc:	2010      	movcc	r0, #16
 80085ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085d2:	bf3c      	itt	cc
 80085d4:	021b      	lslcc	r3, r3, #8
 80085d6:	3008      	addcc	r0, #8
 80085d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085dc:	bf3c      	itt	cc
 80085de:	011b      	lslcc	r3, r3, #4
 80085e0:	3004      	addcc	r0, #4
 80085e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e6:	bf3c      	itt	cc
 80085e8:	009b      	lslcc	r3, r3, #2
 80085ea:	3002      	addcc	r0, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	db05      	blt.n	80085fc <__hi0bits+0x3c>
 80085f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085f4:	f100 0001 	add.w	r0, r0, #1
 80085f8:	bf08      	it	eq
 80085fa:	2020      	moveq	r0, #32
 80085fc:	4770      	bx	lr

080085fe <__lo0bits>:
 80085fe:	6803      	ldr	r3, [r0, #0]
 8008600:	4602      	mov	r2, r0
 8008602:	f013 0007 	ands.w	r0, r3, #7
 8008606:	d00b      	beq.n	8008620 <__lo0bits+0x22>
 8008608:	07d9      	lsls	r1, r3, #31
 800860a:	d421      	bmi.n	8008650 <__lo0bits+0x52>
 800860c:	0798      	lsls	r0, r3, #30
 800860e:	bf49      	itett	mi
 8008610:	085b      	lsrmi	r3, r3, #1
 8008612:	089b      	lsrpl	r3, r3, #2
 8008614:	2001      	movmi	r0, #1
 8008616:	6013      	strmi	r3, [r2, #0]
 8008618:	bf5c      	itt	pl
 800861a:	6013      	strpl	r3, [r2, #0]
 800861c:	2002      	movpl	r0, #2
 800861e:	4770      	bx	lr
 8008620:	b299      	uxth	r1, r3
 8008622:	b909      	cbnz	r1, 8008628 <__lo0bits+0x2a>
 8008624:	0c1b      	lsrs	r3, r3, #16
 8008626:	2010      	movs	r0, #16
 8008628:	b2d9      	uxtb	r1, r3
 800862a:	b909      	cbnz	r1, 8008630 <__lo0bits+0x32>
 800862c:	3008      	adds	r0, #8
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	0719      	lsls	r1, r3, #28
 8008632:	bf04      	itt	eq
 8008634:	091b      	lsreq	r3, r3, #4
 8008636:	3004      	addeq	r0, #4
 8008638:	0799      	lsls	r1, r3, #30
 800863a:	bf04      	itt	eq
 800863c:	089b      	lsreq	r3, r3, #2
 800863e:	3002      	addeq	r0, #2
 8008640:	07d9      	lsls	r1, r3, #31
 8008642:	d403      	bmi.n	800864c <__lo0bits+0x4e>
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	f100 0001 	add.w	r0, r0, #1
 800864a:	d003      	beq.n	8008654 <__lo0bits+0x56>
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	4770      	bx	lr
 8008650:	2000      	movs	r0, #0
 8008652:	4770      	bx	lr
 8008654:	2020      	movs	r0, #32
 8008656:	4770      	bx	lr

08008658 <__i2b>:
 8008658:	b510      	push	{r4, lr}
 800865a:	460c      	mov	r4, r1
 800865c:	2101      	movs	r1, #1
 800865e:	f7ff ff07 	bl	8008470 <_Balloc>
 8008662:	4602      	mov	r2, r0
 8008664:	b928      	cbnz	r0, 8008672 <__i2b+0x1a>
 8008666:	4b05      	ldr	r3, [pc, #20]	@ (800867c <__i2b+0x24>)
 8008668:	4805      	ldr	r0, [pc, #20]	@ (8008680 <__i2b+0x28>)
 800866a:	f240 1145 	movw	r1, #325	@ 0x145
 800866e:	f000 fe85 	bl	800937c <__assert_func>
 8008672:	2301      	movs	r3, #1
 8008674:	6144      	str	r4, [r0, #20]
 8008676:	6103      	str	r3, [r0, #16]
 8008678:	bd10      	pop	{r4, pc}
 800867a:	bf00      	nop
 800867c:	080099e8 	.word	0x080099e8
 8008680:	080099f9 	.word	0x080099f9

08008684 <__multiply>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4614      	mov	r4, r2
 800868a:	690a      	ldr	r2, [r1, #16]
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	429a      	cmp	r2, r3
 8008690:	bfa8      	it	ge
 8008692:	4623      	movge	r3, r4
 8008694:	460f      	mov	r7, r1
 8008696:	bfa4      	itt	ge
 8008698:	460c      	movge	r4, r1
 800869a:	461f      	movge	r7, r3
 800869c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	eb0a 0609 	add.w	r6, sl, r9
 80086ac:	42b3      	cmp	r3, r6
 80086ae:	b085      	sub	sp, #20
 80086b0:	bfb8      	it	lt
 80086b2:	3101      	addlt	r1, #1
 80086b4:	f7ff fedc 	bl	8008470 <_Balloc>
 80086b8:	b930      	cbnz	r0, 80086c8 <__multiply+0x44>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b44      	ldr	r3, [pc, #272]	@ (80087d0 <__multiply+0x14c>)
 80086be:	4845      	ldr	r0, [pc, #276]	@ (80087d4 <__multiply+0x150>)
 80086c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086c4:	f000 fe5a 	bl	800937c <__assert_func>
 80086c8:	f100 0514 	add.w	r5, r0, #20
 80086cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086d0:	462b      	mov	r3, r5
 80086d2:	2200      	movs	r2, #0
 80086d4:	4543      	cmp	r3, r8
 80086d6:	d321      	bcc.n	800871c <__multiply+0x98>
 80086d8:	f107 0114 	add.w	r1, r7, #20
 80086dc:	f104 0214 	add.w	r2, r4, #20
 80086e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086e8:	9302      	str	r3, [sp, #8]
 80086ea:	1b13      	subs	r3, r2, r4
 80086ec:	3b15      	subs	r3, #21
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	3304      	adds	r3, #4
 80086f4:	f104 0715 	add.w	r7, r4, #21
 80086f8:	42ba      	cmp	r2, r7
 80086fa:	bf38      	it	cc
 80086fc:	2304      	movcc	r3, #4
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	9103      	str	r1, [sp, #12]
 8008704:	428b      	cmp	r3, r1
 8008706:	d80c      	bhi.n	8008722 <__multiply+0x9e>
 8008708:	2e00      	cmp	r6, #0
 800870a:	dd03      	ble.n	8008714 <__multiply+0x90>
 800870c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008710:	2b00      	cmp	r3, #0
 8008712:	d05b      	beq.n	80087cc <__multiply+0x148>
 8008714:	6106      	str	r6, [r0, #16]
 8008716:	b005      	add	sp, #20
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	f843 2b04 	str.w	r2, [r3], #4
 8008720:	e7d8      	b.n	80086d4 <__multiply+0x50>
 8008722:	f8b1 a000 	ldrh.w	sl, [r1]
 8008726:	f1ba 0f00 	cmp.w	sl, #0
 800872a:	d024      	beq.n	8008776 <__multiply+0xf2>
 800872c:	f104 0e14 	add.w	lr, r4, #20
 8008730:	46a9      	mov	r9, r5
 8008732:	f04f 0c00 	mov.w	ip, #0
 8008736:	f85e 7b04 	ldr.w	r7, [lr], #4
 800873a:	f8d9 3000 	ldr.w	r3, [r9]
 800873e:	fa1f fb87 	uxth.w	fp, r7
 8008742:	b29b      	uxth	r3, r3
 8008744:	fb0a 330b 	mla	r3, sl, fp, r3
 8008748:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800874c:	f8d9 7000 	ldr.w	r7, [r9]
 8008750:	4463      	add	r3, ip
 8008752:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008756:	fb0a c70b 	mla	r7, sl, fp, ip
 800875a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800875e:	b29b      	uxth	r3, r3
 8008760:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008764:	4572      	cmp	r2, lr
 8008766:	f849 3b04 	str.w	r3, [r9], #4
 800876a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800876e:	d8e2      	bhi.n	8008736 <__multiply+0xb2>
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	f845 c003 	str.w	ip, [r5, r3]
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800877c:	3104      	adds	r1, #4
 800877e:	f1b9 0f00 	cmp.w	r9, #0
 8008782:	d021      	beq.n	80087c8 <__multiply+0x144>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	f104 0c14 	add.w	ip, r4, #20
 800878a:	46ae      	mov	lr, r5
 800878c:	f04f 0a00 	mov.w	sl, #0
 8008790:	f8bc b000 	ldrh.w	fp, [ip]
 8008794:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008798:	fb09 770b 	mla	r7, r9, fp, r7
 800879c:	4457      	add	r7, sl
 800879e:	b29b      	uxth	r3, r3
 80087a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087a4:	f84e 3b04 	str.w	r3, [lr], #4
 80087a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087b0:	f8be 3000 	ldrh.w	r3, [lr]
 80087b4:	fb09 330a 	mla	r3, r9, sl, r3
 80087b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087bc:	4562      	cmp	r2, ip
 80087be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087c2:	d8e5      	bhi.n	8008790 <__multiply+0x10c>
 80087c4:	9f01      	ldr	r7, [sp, #4]
 80087c6:	51eb      	str	r3, [r5, r7]
 80087c8:	3504      	adds	r5, #4
 80087ca:	e799      	b.n	8008700 <__multiply+0x7c>
 80087cc:	3e01      	subs	r6, #1
 80087ce:	e79b      	b.n	8008708 <__multiply+0x84>
 80087d0:	080099e8 	.word	0x080099e8
 80087d4:	080099f9 	.word	0x080099f9

080087d8 <__pow5mult>:
 80087d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087dc:	4615      	mov	r5, r2
 80087de:	f012 0203 	ands.w	r2, r2, #3
 80087e2:	4607      	mov	r7, r0
 80087e4:	460e      	mov	r6, r1
 80087e6:	d007      	beq.n	80087f8 <__pow5mult+0x20>
 80087e8:	4c25      	ldr	r4, [pc, #148]	@ (8008880 <__pow5mult+0xa8>)
 80087ea:	3a01      	subs	r2, #1
 80087ec:	2300      	movs	r3, #0
 80087ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087f2:	f7ff fe9f 	bl	8008534 <__multadd>
 80087f6:	4606      	mov	r6, r0
 80087f8:	10ad      	asrs	r5, r5, #2
 80087fa:	d03d      	beq.n	8008878 <__pow5mult+0xa0>
 80087fc:	69fc      	ldr	r4, [r7, #28]
 80087fe:	b97c      	cbnz	r4, 8008820 <__pow5mult+0x48>
 8008800:	2010      	movs	r0, #16
 8008802:	f7ff fd7f 	bl	8008304 <malloc>
 8008806:	4602      	mov	r2, r0
 8008808:	61f8      	str	r0, [r7, #28]
 800880a:	b928      	cbnz	r0, 8008818 <__pow5mult+0x40>
 800880c:	4b1d      	ldr	r3, [pc, #116]	@ (8008884 <__pow5mult+0xac>)
 800880e:	481e      	ldr	r0, [pc, #120]	@ (8008888 <__pow5mult+0xb0>)
 8008810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008814:	f000 fdb2 	bl	800937c <__assert_func>
 8008818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800881c:	6004      	str	r4, [r0, #0]
 800881e:	60c4      	str	r4, [r0, #12]
 8008820:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008828:	b94c      	cbnz	r4, 800883e <__pow5mult+0x66>
 800882a:	f240 2171 	movw	r1, #625	@ 0x271
 800882e:	4638      	mov	r0, r7
 8008830:	f7ff ff12 	bl	8008658 <__i2b>
 8008834:	2300      	movs	r3, #0
 8008836:	f8c8 0008 	str.w	r0, [r8, #8]
 800883a:	4604      	mov	r4, r0
 800883c:	6003      	str	r3, [r0, #0]
 800883e:	f04f 0900 	mov.w	r9, #0
 8008842:	07eb      	lsls	r3, r5, #31
 8008844:	d50a      	bpl.n	800885c <__pow5mult+0x84>
 8008846:	4631      	mov	r1, r6
 8008848:	4622      	mov	r2, r4
 800884a:	4638      	mov	r0, r7
 800884c:	f7ff ff1a 	bl	8008684 <__multiply>
 8008850:	4631      	mov	r1, r6
 8008852:	4680      	mov	r8, r0
 8008854:	4638      	mov	r0, r7
 8008856:	f7ff fe4b 	bl	80084f0 <_Bfree>
 800885a:	4646      	mov	r6, r8
 800885c:	106d      	asrs	r5, r5, #1
 800885e:	d00b      	beq.n	8008878 <__pow5mult+0xa0>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	b938      	cbnz	r0, 8008874 <__pow5mult+0x9c>
 8008864:	4622      	mov	r2, r4
 8008866:	4621      	mov	r1, r4
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff ff0b 	bl	8008684 <__multiply>
 800886e:	6020      	str	r0, [r4, #0]
 8008870:	f8c0 9000 	str.w	r9, [r0]
 8008874:	4604      	mov	r4, r0
 8008876:	e7e4      	b.n	8008842 <__pow5mult+0x6a>
 8008878:	4630      	mov	r0, r6
 800887a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887e:	bf00      	nop
 8008880:	08009a54 	.word	0x08009a54
 8008884:	08009979 	.word	0x08009979
 8008888:	080099f9 	.word	0x080099f9

0800888c <__lshift>:
 800888c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	6849      	ldr	r1, [r1, #4]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	4607      	mov	r7, r0
 800889e:	4691      	mov	r9, r2
 80088a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088a4:	f108 0601 	add.w	r6, r8, #1
 80088a8:	42b3      	cmp	r3, r6
 80088aa:	db0b      	blt.n	80088c4 <__lshift+0x38>
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff fddf 	bl	8008470 <_Balloc>
 80088b2:	4605      	mov	r5, r0
 80088b4:	b948      	cbnz	r0, 80088ca <__lshift+0x3e>
 80088b6:	4602      	mov	r2, r0
 80088b8:	4b28      	ldr	r3, [pc, #160]	@ (800895c <__lshift+0xd0>)
 80088ba:	4829      	ldr	r0, [pc, #164]	@ (8008960 <__lshift+0xd4>)
 80088bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088c0:	f000 fd5c 	bl	800937c <__assert_func>
 80088c4:	3101      	adds	r1, #1
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	e7ee      	b.n	80088a8 <__lshift+0x1c>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f100 0114 	add.w	r1, r0, #20
 80088d0:	f100 0210 	add.w	r2, r0, #16
 80088d4:	4618      	mov	r0, r3
 80088d6:	4553      	cmp	r3, sl
 80088d8:	db33      	blt.n	8008942 <__lshift+0xb6>
 80088da:	6920      	ldr	r0, [r4, #16]
 80088dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e0:	f104 0314 	add.w	r3, r4, #20
 80088e4:	f019 091f 	ands.w	r9, r9, #31
 80088e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088f0:	d02b      	beq.n	800894a <__lshift+0xbe>
 80088f2:	f1c9 0e20 	rsb	lr, r9, #32
 80088f6:	468a      	mov	sl, r1
 80088f8:	2200      	movs	r2, #0
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	fa00 f009 	lsl.w	r0, r0, r9
 8008900:	4310      	orrs	r0, r2
 8008902:	f84a 0b04 	str.w	r0, [sl], #4
 8008906:	f853 2b04 	ldr.w	r2, [r3], #4
 800890a:	459c      	cmp	ip, r3
 800890c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008910:	d8f3      	bhi.n	80088fa <__lshift+0x6e>
 8008912:	ebac 0304 	sub.w	r3, ip, r4
 8008916:	3b15      	subs	r3, #21
 8008918:	f023 0303 	bic.w	r3, r3, #3
 800891c:	3304      	adds	r3, #4
 800891e:	f104 0015 	add.w	r0, r4, #21
 8008922:	4584      	cmp	ip, r0
 8008924:	bf38      	it	cc
 8008926:	2304      	movcc	r3, #4
 8008928:	50ca      	str	r2, [r1, r3]
 800892a:	b10a      	cbz	r2, 8008930 <__lshift+0xa4>
 800892c:	f108 0602 	add.w	r6, r8, #2
 8008930:	3e01      	subs	r6, #1
 8008932:	4638      	mov	r0, r7
 8008934:	612e      	str	r6, [r5, #16]
 8008936:	4621      	mov	r1, r4
 8008938:	f7ff fdda 	bl	80084f0 <_Bfree>
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	f842 0f04 	str.w	r0, [r2, #4]!
 8008946:	3301      	adds	r3, #1
 8008948:	e7c5      	b.n	80088d6 <__lshift+0x4a>
 800894a:	3904      	subs	r1, #4
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	f841 2f04 	str.w	r2, [r1, #4]!
 8008954:	459c      	cmp	ip, r3
 8008956:	d8f9      	bhi.n	800894c <__lshift+0xc0>
 8008958:	e7ea      	b.n	8008930 <__lshift+0xa4>
 800895a:	bf00      	nop
 800895c:	080099e8 	.word	0x080099e8
 8008960:	080099f9 	.word	0x080099f9

08008964 <__mcmp>:
 8008964:	690a      	ldr	r2, [r1, #16]
 8008966:	4603      	mov	r3, r0
 8008968:	6900      	ldr	r0, [r0, #16]
 800896a:	1a80      	subs	r0, r0, r2
 800896c:	b530      	push	{r4, r5, lr}
 800896e:	d10e      	bne.n	800898e <__mcmp+0x2a>
 8008970:	3314      	adds	r3, #20
 8008972:	3114      	adds	r1, #20
 8008974:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008978:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800897c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008980:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008984:	4295      	cmp	r5, r2
 8008986:	d003      	beq.n	8008990 <__mcmp+0x2c>
 8008988:	d205      	bcs.n	8008996 <__mcmp+0x32>
 800898a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800898e:	bd30      	pop	{r4, r5, pc}
 8008990:	42a3      	cmp	r3, r4
 8008992:	d3f3      	bcc.n	800897c <__mcmp+0x18>
 8008994:	e7fb      	b.n	800898e <__mcmp+0x2a>
 8008996:	2001      	movs	r0, #1
 8008998:	e7f9      	b.n	800898e <__mcmp+0x2a>
	...

0800899c <__mdiff>:
 800899c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4689      	mov	r9, r1
 80089a2:	4606      	mov	r6, r0
 80089a4:	4611      	mov	r1, r2
 80089a6:	4648      	mov	r0, r9
 80089a8:	4614      	mov	r4, r2
 80089aa:	f7ff ffdb 	bl	8008964 <__mcmp>
 80089ae:	1e05      	subs	r5, r0, #0
 80089b0:	d112      	bne.n	80089d8 <__mdiff+0x3c>
 80089b2:	4629      	mov	r1, r5
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff fd5b 	bl	8008470 <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__mdiff+0x2e>
 80089be:	4b3f      	ldr	r3, [pc, #252]	@ (8008abc <__mdiff+0x120>)
 80089c0:	f240 2137 	movw	r1, #567	@ 0x237
 80089c4:	483e      	ldr	r0, [pc, #248]	@ (8008ac0 <__mdiff+0x124>)
 80089c6:	f000 fcd9 	bl	800937c <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089d0:	4610      	mov	r0, r2
 80089d2:	b003      	add	sp, #12
 80089d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d8:	bfbc      	itt	lt
 80089da:	464b      	movlt	r3, r9
 80089dc:	46a1      	movlt	r9, r4
 80089de:	4630      	mov	r0, r6
 80089e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089e4:	bfba      	itte	lt
 80089e6:	461c      	movlt	r4, r3
 80089e8:	2501      	movlt	r5, #1
 80089ea:	2500      	movge	r5, #0
 80089ec:	f7ff fd40 	bl	8008470 <_Balloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	b918      	cbnz	r0, 80089fc <__mdiff+0x60>
 80089f4:	4b31      	ldr	r3, [pc, #196]	@ (8008abc <__mdiff+0x120>)
 80089f6:	f240 2145 	movw	r1, #581	@ 0x245
 80089fa:	e7e3      	b.n	80089c4 <__mdiff+0x28>
 80089fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a00:	6926      	ldr	r6, [r4, #16]
 8008a02:	60c5      	str	r5, [r0, #12]
 8008a04:	f109 0310 	add.w	r3, r9, #16
 8008a08:	f109 0514 	add.w	r5, r9, #20
 8008a0c:	f104 0e14 	add.w	lr, r4, #20
 8008a10:	f100 0b14 	add.w	fp, r0, #20
 8008a14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	46d9      	mov	r9, fp
 8008a20:	f04f 0c00 	mov.w	ip, #0
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	fa1f f38a 	uxth.w	r3, sl
 8008a34:	4619      	mov	r1, r3
 8008a36:	b283      	uxth	r3, r0
 8008a38:	1acb      	subs	r3, r1, r3
 8008a3a:	0c00      	lsrs	r0, r0, #16
 8008a3c:	4463      	add	r3, ip
 8008a3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a4c:	4576      	cmp	r6, lr
 8008a4e:	f849 3b04 	str.w	r3, [r9], #4
 8008a52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a56:	d8e5      	bhi.n	8008a24 <__mdiff+0x88>
 8008a58:	1b33      	subs	r3, r6, r4
 8008a5a:	3b15      	subs	r3, #21
 8008a5c:	f023 0303 	bic.w	r3, r3, #3
 8008a60:	3415      	adds	r4, #21
 8008a62:	3304      	adds	r3, #4
 8008a64:	42a6      	cmp	r6, r4
 8008a66:	bf38      	it	cc
 8008a68:	2304      	movcc	r3, #4
 8008a6a:	441d      	add	r5, r3
 8008a6c:	445b      	add	r3, fp
 8008a6e:	461e      	mov	r6, r3
 8008a70:	462c      	mov	r4, r5
 8008a72:	4544      	cmp	r4, r8
 8008a74:	d30e      	bcc.n	8008a94 <__mdiff+0xf8>
 8008a76:	f108 0103 	add.w	r1, r8, #3
 8008a7a:	1b49      	subs	r1, r1, r5
 8008a7c:	f021 0103 	bic.w	r1, r1, #3
 8008a80:	3d03      	subs	r5, #3
 8008a82:	45a8      	cmp	r8, r5
 8008a84:	bf38      	it	cc
 8008a86:	2100      	movcc	r1, #0
 8008a88:	440b      	add	r3, r1
 8008a8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a8e:	b191      	cbz	r1, 8008ab6 <__mdiff+0x11a>
 8008a90:	6117      	str	r7, [r2, #16]
 8008a92:	e79d      	b.n	80089d0 <__mdiff+0x34>
 8008a94:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a98:	46e6      	mov	lr, ip
 8008a9a:	0c08      	lsrs	r0, r1, #16
 8008a9c:	fa1c fc81 	uxtah	ip, ip, r1
 8008aa0:	4471      	add	r1, lr
 8008aa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008aa6:	b289      	uxth	r1, r1
 8008aa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008aac:	f846 1b04 	str.w	r1, [r6], #4
 8008ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ab4:	e7dd      	b.n	8008a72 <__mdiff+0xd6>
 8008ab6:	3f01      	subs	r7, #1
 8008ab8:	e7e7      	b.n	8008a8a <__mdiff+0xee>
 8008aba:	bf00      	nop
 8008abc:	080099e8 	.word	0x080099e8
 8008ac0:	080099f9 	.word	0x080099f9

08008ac4 <__d2b>:
 8008ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	460f      	mov	r7, r1
 8008aca:	2101      	movs	r1, #1
 8008acc:	ec59 8b10 	vmov	r8, r9, d0
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	f7ff fccd 	bl	8008470 <_Balloc>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	b930      	cbnz	r0, 8008ae8 <__d2b+0x24>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b23      	ldr	r3, [pc, #140]	@ (8008b6c <__d2b+0xa8>)
 8008ade:	4824      	ldr	r0, [pc, #144]	@ (8008b70 <__d2b+0xac>)
 8008ae0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ae4:	f000 fc4a 	bl	800937c <__assert_func>
 8008ae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008af0:	b10d      	cbz	r5, 8008af6 <__d2b+0x32>
 8008af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	f1b8 0300 	subs.w	r3, r8, #0
 8008afc:	d023      	beq.n	8008b46 <__d2b+0x82>
 8008afe:	4668      	mov	r0, sp
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	f7ff fd7c 	bl	80085fe <__lo0bits>
 8008b06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b0a:	b1d0      	cbz	r0, 8008b42 <__d2b+0x7e>
 8008b0c:	f1c0 0320 	rsb	r3, r0, #32
 8008b10:	fa02 f303 	lsl.w	r3, r2, r3
 8008b14:	430b      	orrs	r3, r1
 8008b16:	40c2      	lsrs	r2, r0
 8008b18:	6163      	str	r3, [r4, #20]
 8008b1a:	9201      	str	r2, [sp, #4]
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	61a3      	str	r3, [r4, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bf0c      	ite	eq
 8008b24:	2201      	moveq	r2, #1
 8008b26:	2202      	movne	r2, #2
 8008b28:	6122      	str	r2, [r4, #16]
 8008b2a:	b1a5      	cbz	r5, 8008b56 <__d2b+0x92>
 8008b2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b30:	4405      	add	r5, r0
 8008b32:	603d      	str	r5, [r7, #0]
 8008b34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b38:	6030      	str	r0, [r6, #0]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b42:	6161      	str	r1, [r4, #20]
 8008b44:	e7ea      	b.n	8008b1c <__d2b+0x58>
 8008b46:	a801      	add	r0, sp, #4
 8008b48:	f7ff fd59 	bl	80085fe <__lo0bits>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	6163      	str	r3, [r4, #20]
 8008b50:	3020      	adds	r0, #32
 8008b52:	2201      	movs	r2, #1
 8008b54:	e7e8      	b.n	8008b28 <__d2b+0x64>
 8008b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b5e:	6038      	str	r0, [r7, #0]
 8008b60:	6918      	ldr	r0, [r3, #16]
 8008b62:	f7ff fd2d 	bl	80085c0 <__hi0bits>
 8008b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b6a:	e7e5      	b.n	8008b38 <__d2b+0x74>
 8008b6c:	080099e8 	.word	0x080099e8
 8008b70:	080099f9 	.word	0x080099f9

08008b74 <__ssputs_r>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	688e      	ldr	r6, [r1, #8]
 8008b7a:	461f      	mov	r7, r3
 8008b7c:	42be      	cmp	r6, r7
 8008b7e:	680b      	ldr	r3, [r1, #0]
 8008b80:	4682      	mov	sl, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	4690      	mov	r8, r2
 8008b86:	d82d      	bhi.n	8008be4 <__ssputs_r+0x70>
 8008b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b90:	d026      	beq.n	8008be0 <__ssputs_r+0x6c>
 8008b92:	6965      	ldr	r5, [r4, #20]
 8008b94:	6909      	ldr	r1, [r1, #16]
 8008b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b9a:	eba3 0901 	sub.w	r9, r3, r1
 8008b9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ba2:	1c7b      	adds	r3, r7, #1
 8008ba4:	444b      	add	r3, r9
 8008ba6:	106d      	asrs	r5, r5, #1
 8008ba8:	429d      	cmp	r5, r3
 8008baa:	bf38      	it	cc
 8008bac:	461d      	movcc	r5, r3
 8008bae:	0553      	lsls	r3, r2, #21
 8008bb0:	d527      	bpl.n	8008c02 <__ssputs_r+0x8e>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	f7ff fbd0 	bl	8008358 <_malloc_r>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	b360      	cbz	r0, 8008c16 <__ssputs_r+0xa2>
 8008bbc:	6921      	ldr	r1, [r4, #16]
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	f7fe fcfb 	bl	80075ba <memcpy>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	6126      	str	r6, [r4, #16]
 8008bd2:	6165      	str	r5, [r4, #20]
 8008bd4:	444e      	add	r6, r9
 8008bd6:	eba5 0509 	sub.w	r5, r5, r9
 8008bda:	6026      	str	r6, [r4, #0]
 8008bdc:	60a5      	str	r5, [r4, #8]
 8008bde:	463e      	mov	r6, r7
 8008be0:	42be      	cmp	r6, r7
 8008be2:	d900      	bls.n	8008be6 <__ssputs_r+0x72>
 8008be4:	463e      	mov	r6, r7
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	4632      	mov	r2, r6
 8008bea:	4641      	mov	r1, r8
 8008bec:	f000 fb9c 	bl	8009328 <memmove>
 8008bf0:	68a3      	ldr	r3, [r4, #8]
 8008bf2:	1b9b      	subs	r3, r3, r6
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	4433      	add	r3, r6
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	462a      	mov	r2, r5
 8008c04:	f000 fbfe 	bl	8009404 <_realloc_r>
 8008c08:	4606      	mov	r6, r0
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d1e0      	bne.n	8008bd0 <__ssputs_r+0x5c>
 8008c0e:	6921      	ldr	r1, [r4, #16]
 8008c10:	4650      	mov	r0, sl
 8008c12:	f7ff fb2d 	bl	8008270 <_free_r>
 8008c16:	230c      	movs	r3, #12
 8008c18:	f8ca 3000 	str.w	r3, [sl]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c28:	e7e9      	b.n	8008bfe <__ssputs_r+0x8a>
	...

08008c2c <_svfiprintf_r>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	4698      	mov	r8, r3
 8008c32:	898b      	ldrh	r3, [r1, #12]
 8008c34:	061b      	lsls	r3, r3, #24
 8008c36:	b09d      	sub	sp, #116	@ 0x74
 8008c38:	4607      	mov	r7, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	d510      	bpl.n	8008c62 <_svfiprintf_r+0x36>
 8008c40:	690b      	ldr	r3, [r1, #16]
 8008c42:	b973      	cbnz	r3, 8008c62 <_svfiprintf_r+0x36>
 8008c44:	2140      	movs	r1, #64	@ 0x40
 8008c46:	f7ff fb87 	bl	8008358 <_malloc_r>
 8008c4a:	6028      	str	r0, [r5, #0]
 8008c4c:	6128      	str	r0, [r5, #16]
 8008c4e:	b930      	cbnz	r0, 8008c5e <_svfiprintf_r+0x32>
 8008c50:	230c      	movs	r3, #12
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c58:	b01d      	add	sp, #116	@ 0x74
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	2340      	movs	r3, #64	@ 0x40
 8008c60:	616b      	str	r3, [r5, #20]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c66:	2320      	movs	r3, #32
 8008c68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c70:	2330      	movs	r3, #48	@ 0x30
 8008c72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e10 <_svfiprintf_r+0x1e4>
 8008c76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c7a:	f04f 0901 	mov.w	r9, #1
 8008c7e:	4623      	mov	r3, r4
 8008c80:	469a      	mov	sl, r3
 8008c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c86:	b10a      	cbz	r2, 8008c8c <_svfiprintf_r+0x60>
 8008c88:	2a25      	cmp	r2, #37	@ 0x25
 8008c8a:	d1f9      	bne.n	8008c80 <_svfiprintf_r+0x54>
 8008c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c90:	d00b      	beq.n	8008caa <_svfiprintf_r+0x7e>
 8008c92:	465b      	mov	r3, fp
 8008c94:	4622      	mov	r2, r4
 8008c96:	4629      	mov	r1, r5
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff ff6b 	bl	8008b74 <__ssputs_r>
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f000 80a7 	beq.w	8008df2 <_svfiprintf_r+0x1c6>
 8008ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ca6:	445a      	add	r2, fp
 8008ca8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008caa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 809f 	beq.w	8008df2 <_svfiprintf_r+0x1c6>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cbe:	f10a 0a01 	add.w	sl, sl, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	9307      	str	r3, [sp, #28]
 8008cc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cca:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	484e      	ldr	r0, [pc, #312]	@ (8008e10 <_svfiprintf_r+0x1e4>)
 8008cd6:	f7f7 fa9b 	bl	8000210 <memchr>
 8008cda:	9a04      	ldr	r2, [sp, #16]
 8008cdc:	b9d8      	cbnz	r0, 8008d16 <_svfiprintf_r+0xea>
 8008cde:	06d0      	lsls	r0, r2, #27
 8008ce0:	bf44      	itt	mi
 8008ce2:	2320      	movmi	r3, #32
 8008ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce8:	0711      	lsls	r1, r2, #28
 8008cea:	bf44      	itt	mi
 8008cec:	232b      	movmi	r3, #43	@ 0x2b
 8008cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cf8:	d015      	beq.n	8008d26 <_svfiprintf_r+0xfa>
 8008cfa:	9a07      	ldr	r2, [sp, #28]
 8008cfc:	4654      	mov	r4, sl
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f04f 0c0a 	mov.w	ip, #10
 8008d04:	4621      	mov	r1, r4
 8008d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d0a:	3b30      	subs	r3, #48	@ 0x30
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	d94b      	bls.n	8008da8 <_svfiprintf_r+0x17c>
 8008d10:	b1b0      	cbz	r0, 8008d40 <_svfiprintf_r+0x114>
 8008d12:	9207      	str	r2, [sp, #28]
 8008d14:	e014      	b.n	8008d40 <_svfiprintf_r+0x114>
 8008d16:	eba0 0308 	sub.w	r3, r0, r8
 8008d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	9304      	str	r3, [sp, #16]
 8008d22:	46a2      	mov	sl, r4
 8008d24:	e7d2      	b.n	8008ccc <_svfiprintf_r+0xa0>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	1d19      	adds	r1, r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	9103      	str	r1, [sp, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfbb      	ittet	lt
 8008d32:	425b      	neglt	r3, r3
 8008d34:	f042 0202 	orrlt.w	r2, r2, #2
 8008d38:	9307      	strge	r3, [sp, #28]
 8008d3a:	9307      	strlt	r3, [sp, #28]
 8008d3c:	bfb8      	it	lt
 8008d3e:	9204      	strlt	r2, [sp, #16]
 8008d40:	7823      	ldrb	r3, [r4, #0]
 8008d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d44:	d10a      	bne.n	8008d5c <_svfiprintf_r+0x130>
 8008d46:	7863      	ldrb	r3, [r4, #1]
 8008d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d4a:	d132      	bne.n	8008db2 <_svfiprintf_r+0x186>
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	9203      	str	r2, [sp, #12]
 8008d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d58:	3402      	adds	r4, #2
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e20 <_svfiprintf_r+0x1f4>
 8008d60:	7821      	ldrb	r1, [r4, #0]
 8008d62:	2203      	movs	r2, #3
 8008d64:	4650      	mov	r0, sl
 8008d66:	f7f7 fa53 	bl	8000210 <memchr>
 8008d6a:	b138      	cbz	r0, 8008d7c <_svfiprintf_r+0x150>
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	eba0 000a 	sub.w	r0, r0, sl
 8008d72:	2240      	movs	r2, #64	@ 0x40
 8008d74:	4082      	lsls	r2, r0
 8008d76:	4313      	orrs	r3, r2
 8008d78:	3401      	adds	r4, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d80:	4824      	ldr	r0, [pc, #144]	@ (8008e14 <_svfiprintf_r+0x1e8>)
 8008d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d86:	2206      	movs	r2, #6
 8008d88:	f7f7 fa42 	bl	8000210 <memchr>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d036      	beq.n	8008dfe <_svfiprintf_r+0x1d2>
 8008d90:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <_svfiprintf_r+0x1ec>)
 8008d92:	bb1b      	cbnz	r3, 8008ddc <_svfiprintf_r+0x1b0>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	3307      	adds	r3, #7
 8008d98:	f023 0307 	bic.w	r3, r3, #7
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	9303      	str	r3, [sp, #12]
 8008da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da2:	4433      	add	r3, r6
 8008da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da6:	e76a      	b.n	8008c7e <_svfiprintf_r+0x52>
 8008da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dac:	460c      	mov	r4, r1
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7a8      	b.n	8008d04 <_svfiprintf_r+0xd8>
 8008db2:	2300      	movs	r3, #0
 8008db4:	3401      	adds	r4, #1
 8008db6:	9305      	str	r3, [sp, #20]
 8008db8:	4619      	mov	r1, r3
 8008dba:	f04f 0c0a 	mov.w	ip, #10
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc4:	3a30      	subs	r2, #48	@ 0x30
 8008dc6:	2a09      	cmp	r2, #9
 8008dc8:	d903      	bls.n	8008dd2 <_svfiprintf_r+0x1a6>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0c6      	beq.n	8008d5c <_svfiprintf_r+0x130>
 8008dce:	9105      	str	r1, [sp, #20]
 8008dd0:	e7c4      	b.n	8008d5c <_svfiprintf_r+0x130>
 8008dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e7f0      	b.n	8008dbe <_svfiprintf_r+0x192>
 8008ddc:	ab03      	add	r3, sp, #12
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	462a      	mov	r2, r5
 8008de2:	4b0e      	ldr	r3, [pc, #56]	@ (8008e1c <_svfiprintf_r+0x1f0>)
 8008de4:	a904      	add	r1, sp, #16
 8008de6:	4638      	mov	r0, r7
 8008de8:	f7fd fe76 	bl	8006ad8 <_printf_float>
 8008dec:	1c42      	adds	r2, r0, #1
 8008dee:	4606      	mov	r6, r0
 8008df0:	d1d6      	bne.n	8008da0 <_svfiprintf_r+0x174>
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	065b      	lsls	r3, r3, #25
 8008df6:	f53f af2d 	bmi.w	8008c54 <_svfiprintf_r+0x28>
 8008dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dfc:	e72c      	b.n	8008c58 <_svfiprintf_r+0x2c>
 8008dfe:	ab03      	add	r3, sp, #12
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	462a      	mov	r2, r5
 8008e04:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <_svfiprintf_r+0x1f0>)
 8008e06:	a904      	add	r1, sp, #16
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f7fe f8fd 	bl	8007008 <_printf_i>
 8008e0e:	e7ed      	b.n	8008dec <_svfiprintf_r+0x1c0>
 8008e10:	08009b50 	.word	0x08009b50
 8008e14:	08009b5a 	.word	0x08009b5a
 8008e18:	08006ad9 	.word	0x08006ad9
 8008e1c:	08008b75 	.word	0x08008b75
 8008e20:	08009b56 	.word	0x08009b56

08008e24 <__sfputc_r>:
 8008e24:	6893      	ldr	r3, [r2, #8]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	b410      	push	{r4}
 8008e2c:	6093      	str	r3, [r2, #8]
 8008e2e:	da08      	bge.n	8008e42 <__sfputc_r+0x1e>
 8008e30:	6994      	ldr	r4, [r2, #24]
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	db01      	blt.n	8008e3a <__sfputc_r+0x16>
 8008e36:	290a      	cmp	r1, #10
 8008e38:	d103      	bne.n	8008e42 <__sfputc_r+0x1e>
 8008e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e3e:	f000 b9df 	b.w	8009200 <__swbuf_r>
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	1c58      	adds	r0, r3, #1
 8008e46:	6010      	str	r0, [r2, #0]
 8008e48:	7019      	strb	r1, [r3, #0]
 8008e4a:	4608      	mov	r0, r1
 8008e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <__sfputs_r>:
 8008e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e54:	4606      	mov	r6, r0
 8008e56:	460f      	mov	r7, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	18d5      	adds	r5, r2, r3
 8008e5c:	42ac      	cmp	r4, r5
 8008e5e:	d101      	bne.n	8008e64 <__sfputs_r+0x12>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e007      	b.n	8008e74 <__sfputs_r+0x22>
 8008e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e68:	463a      	mov	r2, r7
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ffda 	bl	8008e24 <__sfputc_r>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d1f3      	bne.n	8008e5c <__sfputs_r+0xa>
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e78 <_vfiprintf_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	b09d      	sub	sp, #116	@ 0x74
 8008e80:	4614      	mov	r4, r2
 8008e82:	4698      	mov	r8, r3
 8008e84:	4606      	mov	r6, r0
 8008e86:	b118      	cbz	r0, 8008e90 <_vfiprintf_r+0x18>
 8008e88:	6a03      	ldr	r3, [r0, #32]
 8008e8a:	b90b      	cbnz	r3, 8008e90 <_vfiprintf_r+0x18>
 8008e8c:	f7fe fa68 	bl	8007360 <__sinit>
 8008e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e92:	07d9      	lsls	r1, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_vfiprintf_r+0x2a>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	059a      	lsls	r2, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_vfiprintf_r+0x2a>
 8008e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9e:	f7fe fb8a 	bl	80075b6 <__retarget_lock_acquire_recursive>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	071b      	lsls	r3, r3, #28
 8008ea6:	d501      	bpl.n	8008eac <_vfiprintf_r+0x34>
 8008ea8:	692b      	ldr	r3, [r5, #16]
 8008eaa:	b99b      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x5c>
 8008eac:	4629      	mov	r1, r5
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f000 f9e4 	bl	800927c <__swsetup_r>
 8008eb4:	b170      	cbz	r0, 8008ed4 <_vfiprintf_r+0x5c>
 8008eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eb8:	07dc      	lsls	r4, r3, #31
 8008eba:	d504      	bpl.n	8008ec6 <_vfiprintf_r+0x4e>
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ec0:	b01d      	add	sp, #116	@ 0x74
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d4f7      	bmi.n	8008ebc <_vfiprintf_r+0x44>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ece:	f7fe fb73 	bl	80075b8 <__retarget_lock_release_recursive>
 8008ed2:	e7f3      	b.n	8008ebc <_vfiprintf_r+0x44>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee2:	2330      	movs	r3, #48	@ 0x30
 8008ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009094 <_vfiprintf_r+0x21c>
 8008ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eec:	f04f 0901 	mov.w	r9, #1
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	469a      	mov	sl, r3
 8008ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef8:	b10a      	cbz	r2, 8008efe <_vfiprintf_r+0x86>
 8008efa:	2a25      	cmp	r2, #37	@ 0x25
 8008efc:	d1f9      	bne.n	8008ef2 <_vfiprintf_r+0x7a>
 8008efe:	ebba 0b04 	subs.w	fp, sl, r4
 8008f02:	d00b      	beq.n	8008f1c <_vfiprintf_r+0xa4>
 8008f04:	465b      	mov	r3, fp
 8008f06:	4622      	mov	r2, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ffa1 	bl	8008e52 <__sfputs_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	f000 80a7 	beq.w	8009064 <_vfiprintf_r+0x1ec>
 8008f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f18:	445a      	add	r2, fp
 8008f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 809f 	beq.w	8009064 <_vfiprintf_r+0x1ec>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f30:	f10a 0a01 	add.w	sl, sl, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f3e:	4654      	mov	r4, sl
 8008f40:	2205      	movs	r2, #5
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	4853      	ldr	r0, [pc, #332]	@ (8009094 <_vfiprintf_r+0x21c>)
 8008f48:	f7f7 f962 	bl	8000210 <memchr>
 8008f4c:	9a04      	ldr	r2, [sp, #16]
 8008f4e:	b9d8      	cbnz	r0, 8008f88 <_vfiprintf_r+0x110>
 8008f50:	06d1      	lsls	r1, r2, #27
 8008f52:	bf44      	itt	mi
 8008f54:	2320      	movmi	r3, #32
 8008f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5a:	0713      	lsls	r3, r2, #28
 8008f5c:	bf44      	itt	mi
 8008f5e:	232b      	movmi	r3, #43	@ 0x2b
 8008f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f64:	f89a 3000 	ldrb.w	r3, [sl]
 8008f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f6a:	d015      	beq.n	8008f98 <_vfiprintf_r+0x120>
 8008f6c:	9a07      	ldr	r2, [sp, #28]
 8008f6e:	4654      	mov	r4, sl
 8008f70:	2000      	movs	r0, #0
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4621      	mov	r1, r4
 8008f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7c:	3b30      	subs	r3, #48	@ 0x30
 8008f7e:	2b09      	cmp	r3, #9
 8008f80:	d94b      	bls.n	800901a <_vfiprintf_r+0x1a2>
 8008f82:	b1b0      	cbz	r0, 8008fb2 <_vfiprintf_r+0x13a>
 8008f84:	9207      	str	r2, [sp, #28]
 8008f86:	e014      	b.n	8008fb2 <_vfiprintf_r+0x13a>
 8008f88:	eba0 0308 	sub.w	r3, r0, r8
 8008f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	46a2      	mov	sl, r4
 8008f96:	e7d2      	b.n	8008f3e <_vfiprintf_r+0xc6>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	1d19      	adds	r1, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	9103      	str	r1, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfbb      	ittet	lt
 8008fa4:	425b      	neglt	r3, r3
 8008fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8008faa:	9307      	strge	r3, [sp, #28]
 8008fac:	9307      	strlt	r3, [sp, #28]
 8008fae:	bfb8      	it	lt
 8008fb0:	9204      	strlt	r2, [sp, #16]
 8008fb2:	7823      	ldrb	r3, [r4, #0]
 8008fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fb6:	d10a      	bne.n	8008fce <_vfiprintf_r+0x156>
 8008fb8:	7863      	ldrb	r3, [r4, #1]
 8008fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fbc:	d132      	bne.n	8009024 <_vfiprintf_r+0x1ac>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fca:	3402      	adds	r4, #2
 8008fcc:	9305      	str	r3, [sp, #20]
 8008fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090a4 <_vfiprintf_r+0x22c>
 8008fd2:	7821      	ldrb	r1, [r4, #0]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	f7f7 f91a 	bl	8000210 <memchr>
 8008fdc:	b138      	cbz	r0, 8008fee <_vfiprintf_r+0x176>
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	eba0 000a 	sub.w	r0, r0, sl
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	4082      	lsls	r2, r0
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	3401      	adds	r4, #1
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff2:	4829      	ldr	r0, [pc, #164]	@ (8009098 <_vfiprintf_r+0x220>)
 8008ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ff8:	2206      	movs	r2, #6
 8008ffa:	f7f7 f909 	bl	8000210 <memchr>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d03f      	beq.n	8009082 <_vfiprintf_r+0x20a>
 8009002:	4b26      	ldr	r3, [pc, #152]	@ (800909c <_vfiprintf_r+0x224>)
 8009004:	bb1b      	cbnz	r3, 800904e <_vfiprintf_r+0x1d6>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	3307      	adds	r3, #7
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	3308      	adds	r3, #8
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009014:	443b      	add	r3, r7
 8009016:	9309      	str	r3, [sp, #36]	@ 0x24
 8009018:	e76a      	b.n	8008ef0 <_vfiprintf_r+0x78>
 800901a:	fb0c 3202 	mla	r2, ip, r2, r3
 800901e:	460c      	mov	r4, r1
 8009020:	2001      	movs	r0, #1
 8009022:	e7a8      	b.n	8008f76 <_vfiprintf_r+0xfe>
 8009024:	2300      	movs	r3, #0
 8009026:	3401      	adds	r4, #1
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	4619      	mov	r1, r3
 800902c:	f04f 0c0a 	mov.w	ip, #10
 8009030:	4620      	mov	r0, r4
 8009032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009036:	3a30      	subs	r2, #48	@ 0x30
 8009038:	2a09      	cmp	r2, #9
 800903a:	d903      	bls.n	8009044 <_vfiprintf_r+0x1cc>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0c6      	beq.n	8008fce <_vfiprintf_r+0x156>
 8009040:	9105      	str	r1, [sp, #20]
 8009042:	e7c4      	b.n	8008fce <_vfiprintf_r+0x156>
 8009044:	fb0c 2101 	mla	r1, ip, r1, r2
 8009048:	4604      	mov	r4, r0
 800904a:	2301      	movs	r3, #1
 800904c:	e7f0      	b.n	8009030 <_vfiprintf_r+0x1b8>
 800904e:	ab03      	add	r3, sp, #12
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	462a      	mov	r2, r5
 8009054:	4b12      	ldr	r3, [pc, #72]	@ (80090a0 <_vfiprintf_r+0x228>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	4630      	mov	r0, r6
 800905a:	f7fd fd3d 	bl	8006ad8 <_printf_float>
 800905e:	4607      	mov	r7, r0
 8009060:	1c78      	adds	r0, r7, #1
 8009062:	d1d6      	bne.n	8009012 <_vfiprintf_r+0x19a>
 8009064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009066:	07d9      	lsls	r1, r3, #31
 8009068:	d405      	bmi.n	8009076 <_vfiprintf_r+0x1fe>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	059a      	lsls	r2, r3, #22
 800906e:	d402      	bmi.n	8009076 <_vfiprintf_r+0x1fe>
 8009070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009072:	f7fe faa1 	bl	80075b8 <__retarget_lock_release_recursive>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	065b      	lsls	r3, r3, #25
 800907a:	f53f af1f 	bmi.w	8008ebc <_vfiprintf_r+0x44>
 800907e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009080:	e71e      	b.n	8008ec0 <_vfiprintf_r+0x48>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <_vfiprintf_r+0x228>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4630      	mov	r0, r6
 800908e:	f7fd ffbb 	bl	8007008 <_printf_i>
 8009092:	e7e4      	b.n	800905e <_vfiprintf_r+0x1e6>
 8009094:	08009b50 	.word	0x08009b50
 8009098:	08009b5a 	.word	0x08009b5a
 800909c:	08006ad9 	.word	0x08006ad9
 80090a0:	08008e53 	.word	0x08008e53
 80090a4:	08009b56 	.word	0x08009b56

080090a8 <__sflush_r>:
 80090a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	0716      	lsls	r6, r2, #28
 80090b2:	4605      	mov	r5, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	d454      	bmi.n	8009162 <__sflush_r+0xba>
 80090b8:	684b      	ldr	r3, [r1, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dc02      	bgt.n	80090c4 <__sflush_r+0x1c>
 80090be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dd48      	ble.n	8009156 <__sflush_r+0xae>
 80090c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d045      	beq.n	8009156 <__sflush_r+0xae>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090d0:	682f      	ldr	r7, [r5, #0]
 80090d2:	6a21      	ldr	r1, [r4, #32]
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	d030      	beq.n	800913a <__sflush_r+0x92>
 80090d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	0759      	lsls	r1, r3, #29
 80090de:	d505      	bpl.n	80090ec <__sflush_r+0x44>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090e6:	b10b      	cbz	r3, 80090ec <__sflush_r+0x44>
 80090e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090f0:	6a21      	ldr	r1, [r4, #32]
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b0      	blx	r6
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	d106      	bne.n	800910a <__sflush_r+0x62>
 80090fc:	6829      	ldr	r1, [r5, #0]
 80090fe:	291d      	cmp	r1, #29
 8009100:	d82b      	bhi.n	800915a <__sflush_r+0xb2>
 8009102:	4a2a      	ldr	r2, [pc, #168]	@ (80091ac <__sflush_r+0x104>)
 8009104:	410a      	asrs	r2, r1
 8009106:	07d6      	lsls	r6, r2, #31
 8009108:	d427      	bmi.n	800915a <__sflush_r+0xb2>
 800910a:	2200      	movs	r2, #0
 800910c:	6062      	str	r2, [r4, #4]
 800910e:	04d9      	lsls	r1, r3, #19
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	6022      	str	r2, [r4, #0]
 8009114:	d504      	bpl.n	8009120 <__sflush_r+0x78>
 8009116:	1c42      	adds	r2, r0, #1
 8009118:	d101      	bne.n	800911e <__sflush_r+0x76>
 800911a:	682b      	ldr	r3, [r5, #0]
 800911c:	b903      	cbnz	r3, 8009120 <__sflush_r+0x78>
 800911e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009122:	602f      	str	r7, [r5, #0]
 8009124:	b1b9      	cbz	r1, 8009156 <__sflush_r+0xae>
 8009126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800912a:	4299      	cmp	r1, r3
 800912c:	d002      	beq.n	8009134 <__sflush_r+0x8c>
 800912e:	4628      	mov	r0, r5
 8009130:	f7ff f89e 	bl	8008270 <_free_r>
 8009134:	2300      	movs	r3, #0
 8009136:	6363      	str	r3, [r4, #52]	@ 0x34
 8009138:	e00d      	b.n	8009156 <__sflush_r+0xae>
 800913a:	2301      	movs	r3, #1
 800913c:	4628      	mov	r0, r5
 800913e:	47b0      	blx	r6
 8009140:	4602      	mov	r2, r0
 8009142:	1c50      	adds	r0, r2, #1
 8009144:	d1c9      	bne.n	80090da <__sflush_r+0x32>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0c6      	beq.n	80090da <__sflush_r+0x32>
 800914c:	2b1d      	cmp	r3, #29
 800914e:	d001      	beq.n	8009154 <__sflush_r+0xac>
 8009150:	2b16      	cmp	r3, #22
 8009152:	d11e      	bne.n	8009192 <__sflush_r+0xea>
 8009154:	602f      	str	r7, [r5, #0]
 8009156:	2000      	movs	r0, #0
 8009158:	e022      	b.n	80091a0 <__sflush_r+0xf8>
 800915a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915e:	b21b      	sxth	r3, r3
 8009160:	e01b      	b.n	800919a <__sflush_r+0xf2>
 8009162:	690f      	ldr	r7, [r1, #16]
 8009164:	2f00      	cmp	r7, #0
 8009166:	d0f6      	beq.n	8009156 <__sflush_r+0xae>
 8009168:	0793      	lsls	r3, r2, #30
 800916a:	680e      	ldr	r6, [r1, #0]
 800916c:	bf08      	it	eq
 800916e:	694b      	ldreq	r3, [r1, #20]
 8009170:	600f      	str	r7, [r1, #0]
 8009172:	bf18      	it	ne
 8009174:	2300      	movne	r3, #0
 8009176:	eba6 0807 	sub.w	r8, r6, r7
 800917a:	608b      	str	r3, [r1, #8]
 800917c:	f1b8 0f00 	cmp.w	r8, #0
 8009180:	dde9      	ble.n	8009156 <__sflush_r+0xae>
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009186:	4643      	mov	r3, r8
 8009188:	463a      	mov	r2, r7
 800918a:	4628      	mov	r0, r5
 800918c:	47b0      	blx	r6
 800918e:	2800      	cmp	r0, #0
 8009190:	dc08      	bgt.n	80091a4 <__sflush_r+0xfc>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	4407      	add	r7, r0
 80091a6:	eba8 0800 	sub.w	r8, r8, r0
 80091aa:	e7e7      	b.n	800917c <__sflush_r+0xd4>
 80091ac:	dfbffffe 	.word	0xdfbffffe

080091b0 <_fflush_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	690b      	ldr	r3, [r1, #16]
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	b913      	cbnz	r3, 80091c0 <_fflush_r+0x10>
 80091ba:	2500      	movs	r5, #0
 80091bc:	4628      	mov	r0, r5
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	b118      	cbz	r0, 80091ca <_fflush_r+0x1a>
 80091c2:	6a03      	ldr	r3, [r0, #32]
 80091c4:	b90b      	cbnz	r3, 80091ca <_fflush_r+0x1a>
 80091c6:	f7fe f8cb 	bl	8007360 <__sinit>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0f3      	beq.n	80091ba <_fflush_r+0xa>
 80091d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091d4:	07d0      	lsls	r0, r2, #31
 80091d6:	d404      	bmi.n	80091e2 <_fflush_r+0x32>
 80091d8:	0599      	lsls	r1, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_fflush_r+0x32>
 80091dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091de:	f7fe f9ea 	bl	80075b6 <__retarget_lock_acquire_recursive>
 80091e2:	4628      	mov	r0, r5
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7ff ff5f 	bl	80090a8 <__sflush_r>
 80091ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091ec:	07da      	lsls	r2, r3, #31
 80091ee:	4605      	mov	r5, r0
 80091f0:	d4e4      	bmi.n	80091bc <_fflush_r+0xc>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	059b      	lsls	r3, r3, #22
 80091f6:	d4e1      	bmi.n	80091bc <_fflush_r+0xc>
 80091f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091fa:	f7fe f9dd 	bl	80075b8 <__retarget_lock_release_recursive>
 80091fe:	e7dd      	b.n	80091bc <_fflush_r+0xc>

08009200 <__swbuf_r>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	460e      	mov	r6, r1
 8009204:	4614      	mov	r4, r2
 8009206:	4605      	mov	r5, r0
 8009208:	b118      	cbz	r0, 8009212 <__swbuf_r+0x12>
 800920a:	6a03      	ldr	r3, [r0, #32]
 800920c:	b90b      	cbnz	r3, 8009212 <__swbuf_r+0x12>
 800920e:	f7fe f8a7 	bl	8007360 <__sinit>
 8009212:	69a3      	ldr	r3, [r4, #24]
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	071a      	lsls	r2, r3, #28
 800921a:	d501      	bpl.n	8009220 <__swbuf_r+0x20>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	b943      	cbnz	r3, 8009232 <__swbuf_r+0x32>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f82a 	bl	800927c <__swsetup_r>
 8009228:	b118      	cbz	r0, 8009232 <__swbuf_r+0x32>
 800922a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800922e:	4638      	mov	r0, r7
 8009230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	1a98      	subs	r0, r3, r2
 8009238:	6963      	ldr	r3, [r4, #20]
 800923a:	b2f6      	uxtb	r6, r6
 800923c:	4283      	cmp	r3, r0
 800923e:	4637      	mov	r7, r6
 8009240:	dc05      	bgt.n	800924e <__swbuf_r+0x4e>
 8009242:	4621      	mov	r1, r4
 8009244:	4628      	mov	r0, r5
 8009246:	f7ff ffb3 	bl	80091b0 <_fflush_r>
 800924a:	2800      	cmp	r0, #0
 800924c:	d1ed      	bne.n	800922a <__swbuf_r+0x2a>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	3b01      	subs	r3, #1
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	701e      	strb	r6, [r3, #0]
 800925c:	6962      	ldr	r2, [r4, #20]
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	429a      	cmp	r2, r3
 8009262:	d004      	beq.n	800926e <__swbuf_r+0x6e>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d5e1      	bpl.n	800922e <__swbuf_r+0x2e>
 800926a:	2e0a      	cmp	r6, #10
 800926c:	d1df      	bne.n	800922e <__swbuf_r+0x2e>
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f7ff ff9d 	bl	80091b0 <_fflush_r>
 8009276:	2800      	cmp	r0, #0
 8009278:	d0d9      	beq.n	800922e <__swbuf_r+0x2e>
 800927a:	e7d6      	b.n	800922a <__swbuf_r+0x2a>

0800927c <__swsetup_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4b29      	ldr	r3, [pc, #164]	@ (8009324 <__swsetup_r+0xa8>)
 8009280:	4605      	mov	r5, r0
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	460c      	mov	r4, r1
 8009286:	b118      	cbz	r0, 8009290 <__swsetup_r+0x14>
 8009288:	6a03      	ldr	r3, [r0, #32]
 800928a:	b90b      	cbnz	r3, 8009290 <__swsetup_r+0x14>
 800928c:	f7fe f868 	bl	8007360 <__sinit>
 8009290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009294:	0719      	lsls	r1, r3, #28
 8009296:	d422      	bmi.n	80092de <__swsetup_r+0x62>
 8009298:	06da      	lsls	r2, r3, #27
 800929a:	d407      	bmi.n	80092ac <__swsetup_r+0x30>
 800929c:	2209      	movs	r2, #9
 800929e:	602a      	str	r2, [r5, #0]
 80092a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092aa:	e033      	b.n	8009314 <__swsetup_r+0x98>
 80092ac:	0758      	lsls	r0, r3, #29
 80092ae:	d512      	bpl.n	80092d6 <__swsetup_r+0x5a>
 80092b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b2:	b141      	cbz	r1, 80092c6 <__swsetup_r+0x4a>
 80092b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092b8:	4299      	cmp	r1, r3
 80092ba:	d002      	beq.n	80092c2 <__swsetup_r+0x46>
 80092bc:	4628      	mov	r0, r5
 80092be:	f7fe ffd7 	bl	8008270 <_free_r>
 80092c2:	2300      	movs	r3, #0
 80092c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	2300      	movs	r3, #0
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f043 0308 	orr.w	r3, r3, #8
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	b94b      	cbnz	r3, 80092f6 <__swsetup_r+0x7a>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ec:	d003      	beq.n	80092f6 <__swsetup_r+0x7a>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f8fb 	bl	80094ec <__smakebuf_r>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	f013 0201 	ands.w	r2, r3, #1
 80092fe:	d00a      	beq.n	8009316 <__swsetup_r+0x9a>
 8009300:	2200      	movs	r2, #0
 8009302:	60a2      	str	r2, [r4, #8]
 8009304:	6962      	ldr	r2, [r4, #20]
 8009306:	4252      	negs	r2, r2
 8009308:	61a2      	str	r2, [r4, #24]
 800930a:	6922      	ldr	r2, [r4, #16]
 800930c:	b942      	cbnz	r2, 8009320 <__swsetup_r+0xa4>
 800930e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009312:	d1c5      	bne.n	80092a0 <__swsetup_r+0x24>
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	0799      	lsls	r1, r3, #30
 8009318:	bf58      	it	pl
 800931a:	6962      	ldrpl	r2, [r4, #20]
 800931c:	60a2      	str	r2, [r4, #8]
 800931e:	e7f4      	b.n	800930a <__swsetup_r+0x8e>
 8009320:	2000      	movs	r0, #0
 8009322:	e7f7      	b.n	8009314 <__swsetup_r+0x98>
 8009324:	2000001c 	.word	0x2000001c

08009328 <memmove>:
 8009328:	4288      	cmp	r0, r1
 800932a:	b510      	push	{r4, lr}
 800932c:	eb01 0402 	add.w	r4, r1, r2
 8009330:	d902      	bls.n	8009338 <memmove+0x10>
 8009332:	4284      	cmp	r4, r0
 8009334:	4623      	mov	r3, r4
 8009336:	d807      	bhi.n	8009348 <memmove+0x20>
 8009338:	1e43      	subs	r3, r0, #1
 800933a:	42a1      	cmp	r1, r4
 800933c:	d008      	beq.n	8009350 <memmove+0x28>
 800933e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009346:	e7f8      	b.n	800933a <memmove+0x12>
 8009348:	4402      	add	r2, r0
 800934a:	4601      	mov	r1, r0
 800934c:	428a      	cmp	r2, r1
 800934e:	d100      	bne.n	8009352 <memmove+0x2a>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800935a:	e7f7      	b.n	800934c <memmove+0x24>

0800935c <_sbrk_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d06      	ldr	r5, [pc, #24]	@ (8009378 <_sbrk_r+0x1c>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7f8 fad2 	bl	8001910 <_sbrk>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_sbrk_r+0x1a>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_sbrk_r+0x1a>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20004d4c 	.word	0x20004d4c

0800937c <__assert_func>:
 800937c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800937e:	4614      	mov	r4, r2
 8009380:	461a      	mov	r2, r3
 8009382:	4b09      	ldr	r3, [pc, #36]	@ (80093a8 <__assert_func+0x2c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4605      	mov	r5, r0
 8009388:	68d8      	ldr	r0, [r3, #12]
 800938a:	b954      	cbnz	r4, 80093a2 <__assert_func+0x26>
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <__assert_func+0x30>)
 800938e:	461c      	mov	r4, r3
 8009390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009394:	9100      	str	r1, [sp, #0]
 8009396:	462b      	mov	r3, r5
 8009398:	4905      	ldr	r1, [pc, #20]	@ (80093b0 <__assert_func+0x34>)
 800939a:	f000 f86f 	bl	800947c <fiprintf>
 800939e:	f000 f903 	bl	80095a8 <abort>
 80093a2:	4b04      	ldr	r3, [pc, #16]	@ (80093b4 <__assert_func+0x38>)
 80093a4:	e7f4      	b.n	8009390 <__assert_func+0x14>
 80093a6:	bf00      	nop
 80093a8:	2000001c 	.word	0x2000001c
 80093ac:	08009ba6 	.word	0x08009ba6
 80093b0:	08009b78 	.word	0x08009b78
 80093b4:	08009b6b 	.word	0x08009b6b

080093b8 <_calloc_r>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	fba1 5402 	umull	r5, r4, r1, r2
 80093be:	b93c      	cbnz	r4, 80093d0 <_calloc_r+0x18>
 80093c0:	4629      	mov	r1, r5
 80093c2:	f7fe ffc9 	bl	8008358 <_malloc_r>
 80093c6:	4606      	mov	r6, r0
 80093c8:	b928      	cbnz	r0, 80093d6 <_calloc_r+0x1e>
 80093ca:	2600      	movs	r6, #0
 80093cc:	4630      	mov	r0, r6
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	220c      	movs	r2, #12
 80093d2:	6002      	str	r2, [r0, #0]
 80093d4:	e7f9      	b.n	80093ca <_calloc_r+0x12>
 80093d6:	462a      	mov	r2, r5
 80093d8:	4621      	mov	r1, r4
 80093da:	f7fe f86e 	bl	80074ba <memset>
 80093de:	e7f5      	b.n	80093cc <_calloc_r+0x14>

080093e0 <__ascii_mbtowc>:
 80093e0:	b082      	sub	sp, #8
 80093e2:	b901      	cbnz	r1, 80093e6 <__ascii_mbtowc+0x6>
 80093e4:	a901      	add	r1, sp, #4
 80093e6:	b142      	cbz	r2, 80093fa <__ascii_mbtowc+0x1a>
 80093e8:	b14b      	cbz	r3, 80093fe <__ascii_mbtowc+0x1e>
 80093ea:	7813      	ldrb	r3, [r2, #0]
 80093ec:	600b      	str	r3, [r1, #0]
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	1e10      	subs	r0, r2, #0
 80093f2:	bf18      	it	ne
 80093f4:	2001      	movne	r0, #1
 80093f6:	b002      	add	sp, #8
 80093f8:	4770      	bx	lr
 80093fa:	4610      	mov	r0, r2
 80093fc:	e7fb      	b.n	80093f6 <__ascii_mbtowc+0x16>
 80093fe:	f06f 0001 	mvn.w	r0, #1
 8009402:	e7f8      	b.n	80093f6 <__ascii_mbtowc+0x16>

08009404 <_realloc_r>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	4680      	mov	r8, r0
 800940a:	4615      	mov	r5, r2
 800940c:	460c      	mov	r4, r1
 800940e:	b921      	cbnz	r1, 800941a <_realloc_r+0x16>
 8009410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4611      	mov	r1, r2
 8009416:	f7fe bf9f 	b.w	8008358 <_malloc_r>
 800941a:	b92a      	cbnz	r2, 8009428 <_realloc_r+0x24>
 800941c:	f7fe ff28 	bl	8008270 <_free_r>
 8009420:	2400      	movs	r4, #0
 8009422:	4620      	mov	r0, r4
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	f000 f8c5 	bl	80095b6 <_malloc_usable_size_r>
 800942c:	4285      	cmp	r5, r0
 800942e:	4606      	mov	r6, r0
 8009430:	d802      	bhi.n	8009438 <_realloc_r+0x34>
 8009432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009436:	d8f4      	bhi.n	8009422 <_realloc_r+0x1e>
 8009438:	4629      	mov	r1, r5
 800943a:	4640      	mov	r0, r8
 800943c:	f7fe ff8c 	bl	8008358 <_malloc_r>
 8009440:	4607      	mov	r7, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d0ec      	beq.n	8009420 <_realloc_r+0x1c>
 8009446:	42b5      	cmp	r5, r6
 8009448:	462a      	mov	r2, r5
 800944a:	4621      	mov	r1, r4
 800944c:	bf28      	it	cs
 800944e:	4632      	movcs	r2, r6
 8009450:	f7fe f8b3 	bl	80075ba <memcpy>
 8009454:	4621      	mov	r1, r4
 8009456:	4640      	mov	r0, r8
 8009458:	f7fe ff0a 	bl	8008270 <_free_r>
 800945c:	463c      	mov	r4, r7
 800945e:	e7e0      	b.n	8009422 <_realloc_r+0x1e>

08009460 <__ascii_wctomb>:
 8009460:	4603      	mov	r3, r0
 8009462:	4608      	mov	r0, r1
 8009464:	b141      	cbz	r1, 8009478 <__ascii_wctomb+0x18>
 8009466:	2aff      	cmp	r2, #255	@ 0xff
 8009468:	d904      	bls.n	8009474 <__ascii_wctomb+0x14>
 800946a:	228a      	movs	r2, #138	@ 0x8a
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009472:	4770      	bx	lr
 8009474:	700a      	strb	r2, [r1, #0]
 8009476:	2001      	movs	r0, #1
 8009478:	4770      	bx	lr
	...

0800947c <fiprintf>:
 800947c:	b40e      	push	{r1, r2, r3}
 800947e:	b503      	push	{r0, r1, lr}
 8009480:	4601      	mov	r1, r0
 8009482:	ab03      	add	r3, sp, #12
 8009484:	4805      	ldr	r0, [pc, #20]	@ (800949c <fiprintf+0x20>)
 8009486:	f853 2b04 	ldr.w	r2, [r3], #4
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	f7ff fcf3 	bl	8008e78 <_vfiprintf_r>
 8009492:	b002      	add	sp, #8
 8009494:	f85d eb04 	ldr.w	lr, [sp], #4
 8009498:	b003      	add	sp, #12
 800949a:	4770      	bx	lr
 800949c:	2000001c 	.word	0x2000001c

080094a0 <__swhatbuf_r>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	460c      	mov	r4, r1
 80094a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	b096      	sub	sp, #88	@ 0x58
 80094ac:	4615      	mov	r5, r2
 80094ae:	461e      	mov	r6, r3
 80094b0:	da0d      	bge.n	80094ce <__swhatbuf_r+0x2e>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094b8:	f04f 0100 	mov.w	r1, #0
 80094bc:	bf14      	ite	ne
 80094be:	2340      	movne	r3, #64	@ 0x40
 80094c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094c4:	2000      	movs	r0, #0
 80094c6:	6031      	str	r1, [r6, #0]
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	b016      	add	sp, #88	@ 0x58
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	466a      	mov	r2, sp
 80094d0:	f000 f848 	bl	8009564 <_fstat_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	dbec      	blt.n	80094b2 <__swhatbuf_r+0x12>
 80094d8:	9901      	ldr	r1, [sp, #4]
 80094da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094e2:	4259      	negs	r1, r3
 80094e4:	4159      	adcs	r1, r3
 80094e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094ea:	e7eb      	b.n	80094c4 <__swhatbuf_r+0x24>

080094ec <__smakebuf_r>:
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f0:	079d      	lsls	r5, r3, #30
 80094f2:	4606      	mov	r6, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	d507      	bpl.n	8009508 <__smakebuf_r+0x1c>
 80094f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	2301      	movs	r3, #1
 8009502:	6163      	str	r3, [r4, #20]
 8009504:	b003      	add	sp, #12
 8009506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009508:	ab01      	add	r3, sp, #4
 800950a:	466a      	mov	r2, sp
 800950c:	f7ff ffc8 	bl	80094a0 <__swhatbuf_r>
 8009510:	9f00      	ldr	r7, [sp, #0]
 8009512:	4605      	mov	r5, r0
 8009514:	4639      	mov	r1, r7
 8009516:	4630      	mov	r0, r6
 8009518:	f7fe ff1e 	bl	8008358 <_malloc_r>
 800951c:	b948      	cbnz	r0, 8009532 <__smakebuf_r+0x46>
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	059a      	lsls	r2, r3, #22
 8009524:	d4ee      	bmi.n	8009504 <__smakebuf_r+0x18>
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	f043 0302 	orr.w	r3, r3, #2
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	e7e2      	b.n	80094f8 <__smakebuf_r+0xc>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	6020      	str	r0, [r4, #0]
 8009536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009542:	b15b      	cbz	r3, 800955c <__smakebuf_r+0x70>
 8009544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f81d 	bl	8009588 <_isatty_r>
 800954e:	b128      	cbz	r0, 800955c <__smakebuf_r+0x70>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	431d      	orrs	r5, r3
 8009560:	81a5      	strh	r5, [r4, #12]
 8009562:	e7cf      	b.n	8009504 <__smakebuf_r+0x18>

08009564 <_fstat_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	@ (8009584 <_fstat_r+0x20>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	f7f8 f9a5 	bl	80018c0 <_fstat>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d102      	bne.n	8009580 <_fstat_r+0x1c>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	b103      	cbz	r3, 8009580 <_fstat_r+0x1c>
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20004d4c 	.word	0x20004d4c

08009588 <_isatty_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	@ (80095a4 <_isatty_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f8 f9a4 	bl	80018e0 <_isatty>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_isatty_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_isatty_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20004d4c 	.word	0x20004d4c

080095a8 <abort>:
 80095a8:	b508      	push	{r3, lr}
 80095aa:	2006      	movs	r0, #6
 80095ac:	f000 f834 	bl	8009618 <raise>
 80095b0:	2001      	movs	r0, #1
 80095b2:	f7f8 f935 	bl	8001820 <_exit>

080095b6 <_malloc_usable_size_r>:
 80095b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ba:	1f18      	subs	r0, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfbc      	itt	lt
 80095c0:	580b      	ldrlt	r3, [r1, r0]
 80095c2:	18c0      	addlt	r0, r0, r3
 80095c4:	4770      	bx	lr

080095c6 <_raise_r>:
 80095c6:	291f      	cmp	r1, #31
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4605      	mov	r5, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	d904      	bls.n	80095da <_raise_r+0x14>
 80095d0:	2316      	movs	r3, #22
 80095d2:	6003      	str	r3, [r0, #0]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095d8:	bd38      	pop	{r3, r4, r5, pc}
 80095da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095dc:	b112      	cbz	r2, 80095e4 <_raise_r+0x1e>
 80095de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095e2:	b94b      	cbnz	r3, 80095f8 <_raise_r+0x32>
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 f831 	bl	800964c <_getpid_r>
 80095ea:	4622      	mov	r2, r4
 80095ec:	4601      	mov	r1, r0
 80095ee:	4628      	mov	r0, r5
 80095f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095f4:	f000 b818 	b.w	8009628 <_kill_r>
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d00a      	beq.n	8009612 <_raise_r+0x4c>
 80095fc:	1c59      	adds	r1, r3, #1
 80095fe:	d103      	bne.n	8009608 <_raise_r+0x42>
 8009600:	2316      	movs	r3, #22
 8009602:	6003      	str	r3, [r0, #0]
 8009604:	2001      	movs	r0, #1
 8009606:	e7e7      	b.n	80095d8 <_raise_r+0x12>
 8009608:	2100      	movs	r1, #0
 800960a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800960e:	4620      	mov	r0, r4
 8009610:	4798      	blx	r3
 8009612:	2000      	movs	r0, #0
 8009614:	e7e0      	b.n	80095d8 <_raise_r+0x12>
	...

08009618 <raise>:
 8009618:	4b02      	ldr	r3, [pc, #8]	@ (8009624 <raise+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f7ff bfd2 	b.w	80095c6 <_raise_r>
 8009622:	bf00      	nop
 8009624:	2000001c 	.word	0x2000001c

08009628 <_kill_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	@ (8009648 <_kill_r+0x20>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f7f8 f8e3 	bl	8001800 <_kill>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d102      	bne.n	8009644 <_kill_r+0x1c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b103      	cbz	r3, 8009644 <_kill_r+0x1c>
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	20004d4c 	.word	0x20004d4c

0800964c <_getpid_r>:
 800964c:	f7f8 b8d0 	b.w	80017f0 <_getpid>

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
