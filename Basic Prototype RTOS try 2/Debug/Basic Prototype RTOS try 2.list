
Basic Prototype RTOS try 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08009738  08009738  0000a738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e68  08009e68  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e68  08009e68  0000ae68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e70  08009e70  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e70  08009e70  0000ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009e78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b30  200001d8  0800a050  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d08  0800a050  0000bd08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dac  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d88  00000000  00000000  0001dfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00020d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c02  00000000  00000000  00021cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004493  00000000  00000000  000228f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001127e  00000000  00000000  00026d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f1b  00000000  00000000  00038003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cf1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  0010cf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00112274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009720 	.word	0x08009720

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009720 	.word	0x08009720

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ee0:	1d39      	adds	r1, r7, #4
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <__io_putchar+0x20>)
 8000eea:	f001 feaf 	bl	8002c4c <HAL_UART_Transmit>
  return ch;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200001f4 	.word	0x200001f4

08000efc <_write>:

int _write(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e009      	b.n	8000f22 <_write+0x26>
    __io_putchar(*ptr++);
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	60ba      	str	r2, [r7, #8]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffde 	bl	8000ed8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbf1      	blt.n	8000f0e <_write+0x12>
  }
  return len;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SimulateStateActions>:
static FlightState currentState = STATE_IDLE;
static uint32_t packetCount = 0;
static uint32_t missionTime = 0;
static ErrorFlags errorFlags = E_NONE;

void SimulateStateActions(FlightState state) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d830      	bhi.n	8000fa6 <SimulateStateActions+0x72>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <SimulateStateActions+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f6d 	.word	0x08000f6d
 8000f54:	08000f75 	.word	0x08000f75
 8000f58:	08000f7d 	.word	0x08000f7d
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	08000f93 	.word	0x08000f93
        case STATE_IDLE:
            printf("IDLE: Initializing systems and calibrating sensors\r\n");
 8000f64:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <SimulateStateActions+0x7c>)
 8000f66:	f006 f9a9 	bl	80072bc <puts>
            break;
 8000f6a:	e01c      	b.n	8000fa6 <SimulateStateActions+0x72>
        case STATE_ARMED:
            printf("ARMED: Running pre-launch diagnostics\r\n");
 8000f6c:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <SimulateStateActions+0x80>)
 8000f6e:	f006 f9a5 	bl	80072bc <puts>
            break;
 8000f72:	e018      	b.n	8000fa6 <SimulateStateActions+0x72>
        case STATE_LAUNCH:
            printf("LAUNCH: Detecting launch conditions\r\n");
 8000f74:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <SimulateStateActions+0x84>)
 8000f76:	f006 f9a1 	bl	80072bc <puts>
            break;
 8000f7a:	e014      	b.n	8000fa6 <SimulateStateActions+0x72>
        case STATE_ASCENT:
            printf("ASCENT: Monitoring flight data and motor burnout\r\n");
 8000f7c:	480f      	ldr	r0, [pc, #60]	@ (8000fbc <SimulateStateActions+0x88>)
 8000f7e:	f006 f99d 	bl	80072bc <puts>
            break;
 8000f82:	e010      	b.n	8000fa6 <SimulateStateActions+0x72>
        case STATE_DESCENT:
            printf("DESCENT: Deploying parachutes\r\n");
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <SimulateStateActions+0x8c>)
 8000f86:	f006 f999 	bl	80072bc <puts>
            printf("Action: Main parachute deployment initiated\r\n");
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <SimulateStateActions+0x90>)
 8000f8c:	f006 f996 	bl	80072bc <puts>
            break;
 8000f90:	e009      	b.n	8000fa6 <SimulateStateActions+0x72>
        case STATE_RECOVERY:
            printf("RECOVERY: Activating recovery systems\r\n");
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <SimulateStateActions+0x94>)
 8000f94:	f006 f992 	bl	80072bc <puts>
            printf("Action: GPS tracking activated\r\n");
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <SimulateStateActions+0x98>)
 8000f9a:	f006 f98f 	bl	80072bc <puts>
            printf("Action: Audio beacon activated\r\n");
 8000f9e:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <SimulateStateActions+0x9c>)
 8000fa0:	f006 f98c 	bl	80072bc <puts>
            break;
 8000fa4:	bf00      	nop
    }
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08009788 	.word	0x08009788
 8000fb4:	080097bc 	.word	0x080097bc
 8000fb8:	080097e4 	.word	0x080097e4
 8000fbc:	0800980c 	.word	0x0800980c
 8000fc0:	08009840 	.word	0x08009840
 8000fc4:	08009860 	.word	0x08009860
 8000fc8:	08009890 	.word	0x08009890
 8000fcc:	080098b8 	.word	0x080098b8
 8000fd0:	080098d8 	.word	0x080098d8

08000fd4 <SaveToEEPROM>:

void SaveToEEPROM(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    printf("Saving state to EEPROM: State=%d, PacketCount=%lu, MissionTime=%lu\r\n",
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SaveToEEPROM+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <SaveToEEPROM+0x20>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SaveToEEPROM+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <SaveToEEPROM+0x28>)
 8000fe8:	f006 f8f8 	bl	80071dc <iprintf>
    		currentState, packetCount, missionTime);
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000254 	.word	0x20000254
 8000ff4:	20000258 	.word	0x20000258
 8000ff8:	2000025c 	.word	0x2000025c
 8000ffc:	080098f8 	.word	0x080098f8

08001000 <SimulateSDCardWrite>:

void SimulateSDCardWrite(const char* data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    printf("SD Card Write: %s", data);
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <SimulateSDCardWrite+0x18>)
 800100c:	f006 f8e6 	bl	80071dc <iprintf>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	08009940 	.word	0x08009940

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fca4 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f866 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f8fc 	bl	8001224 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102c:	f000 f8d0 	bl	80011d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <main+0x90>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6898      	ldr	r0, [r3, #8]
 8001036:	2300      	movs	r3, #0
 8001038:	2202      	movs	r2, #2
 800103a:	2100      	movs	r1, #0
 800103c:	f006 f946 	bl	80072cc <setvbuf>
  printf("System Starting...\r\n");
 8001040:	481b      	ldr	r0, [pc, #108]	@ (80010b0 <main+0x94>)
 8001042:	f006 f93b 	bl	80072bc <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001046:	f002 f9f1 	bl	800342c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of stateMutex */
  stateMutexHandle = osMutexNew(&stateMutex_attributes);
 800104a:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <main+0x98>)
 800104c:	f002 fae5 	bl	800361a <osMutexNew>
 8001050:	4603      	mov	r3, r0
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <main+0x9c>)
 8001054:	6013      	str	r3, [r2, #0]

  /* creation of telemetryMutex */
  telemetryMutexHandle = osMutexNew(&telemetryMutex_attributes);
 8001056:	4819      	ldr	r0, [pc, #100]	@ (80010bc <main+0xa0>)
 8001058:	f002 fadf 	bl	800361a <osMutexNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <main+0xa4>)
 8001060:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateTask */
  stateTaskHandle = osThreadNew(StateTask, NULL, &stateTask_attributes);
 8001062:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <main+0xa8>)
 8001064:	2100      	movs	r1, #0
 8001066:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <main+0xac>)
 8001068:	f002 fa2a 	bl	80034c0 <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <main+0xb0>)
 8001070:	6013      	str	r3, [r2, #0]

  /* creation of telemetryTask */
  telemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &telemetryTask_attributes);
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <main+0xb4>)
 8001074:	2100      	movs	r1, #0
 8001076:	4817      	ldr	r0, [pc, #92]	@ (80010d4 <main+0xb8>)
 8001078:	f002 fa22 	bl	80034c0 <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a16      	ldr	r2, [pc, #88]	@ (80010d8 <main+0xbc>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of errorTask */
  errorTaskHandle = osThreadNew(ErrorTask, NULL, &errorTask_attributes);
 8001082:	4a16      	ldr	r2, [pc, #88]	@ (80010dc <main+0xc0>)
 8001084:	2100      	movs	r1, #0
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <main+0xc4>)
 8001088:	f002 fa1a 	bl	80034c0 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a15      	ldr	r2, [pc, #84]	@ (80010e4 <main+0xc8>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of storageTask */
  storageTaskHandle = osThreadNew(StorageTask, NULL, &storageTask_attributes);
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <main+0xcc>)
 8001094:	2100      	movs	r1, #0
 8001096:	4815      	ldr	r0, [pc, #84]	@ (80010ec <main+0xd0>)
 8001098:	f002 fa12 	bl	80034c0 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <main+0xd4>)
 80010a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a2:	f002 f9e7 	bl	8003474 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a6:	bf00      	nop
 80010a8:	e7fd      	b.n	80010a6 <main+0x8a>
 80010aa:	bf00      	nop
 80010ac:	2000001c 	.word	0x2000001c
 80010b0:	08009954 	.word	0x08009954
 80010b4:	08009abc 	.word	0x08009abc
 80010b8:	2000024c 	.word	0x2000024c
 80010bc:	08009acc 	.word	0x08009acc
 80010c0:	20000250 	.word	0x20000250
 80010c4:	08009a2c 	.word	0x08009a2c
 80010c8:	0800132d 	.word	0x0800132d
 80010cc:	2000023c 	.word	0x2000023c
 80010d0:	08009a50 	.word	0x08009a50
 80010d4:	0800140d 	.word	0x0800140d
 80010d8:	20000240 	.word	0x20000240
 80010dc:	08009a74 	.word	0x08009a74
 80010e0:	080015e1 	.word	0x080015e1
 80010e4:	20000244 	.word	0x20000244
 80010e8:	08009a98 	.word	0x08009a98
 80010ec:	08001645 	.word	0x08001645
 80010f0:	20000248 	.word	0x20000248

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2234      	movs	r2, #52	@ 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 faa2 	bl	800764c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a29      	ldr	r2, [pc, #164]	@ (80011c8 <SystemClock_Config+0xd4>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <SystemClock_Config+0xd4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <SystemClock_Config+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001140:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <SystemClock_Config+0xd8>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001168:	2310      	movs	r3, #16
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001170:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fa74 	bl	8002670 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800118e:	f000 fa65 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 ff14 	bl	8001fdc <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ba:	f000 fa4f 	bl	800165c <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_USART2_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 8001208:	f001 fcd0 	bl	8002bac <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001212:	f000 fa23 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001f4 	.word	0x200001f4
 8001220:	40004400 	.word	0x40004400

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a37      	ldr	r2, [pc, #220]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <MX_GPIO_Init+0xfc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <MX_GPIO_Init+0xfc>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a30      	ldr	r2, [pc, #192]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <MX_GPIO_Init+0xfc>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a22      	ldr	r2, [pc, #136]	@ (8001320 <MX_GPIO_Init+0xfc>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <MX_GPIO_Init+0xfc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	481d      	ldr	r0, [pc, #116]	@ (8001324 <MX_GPIO_Init+0x100>)
 80012b0:	f000 fe60 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80012ba:	481b      	ldr	r0, [pc, #108]	@ (8001328 <MX_GPIO_Init+0x104>)
 80012bc:	f000 fe5a 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4814      	ldr	r0, [pc, #80]	@ (8001328 <MX_GPIO_Init+0x104>)
 80012d8:	f000 fca0 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012dc:	2320      	movs	r3, #32
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_GPIO_Init+0x100>)
 80012f4:	f000 fc92 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012f8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_GPIO_Init+0x104>)
 8001312:	f000 fc83 	bl	8001c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	@ 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020800 	.word	0x40020800

0800132c <StateTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StateTask */
void StateTask(void *argument)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  uint32_t lastButtonPress = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
	  printf("State Task Started\r\n");
 8001338:	482e      	ldr	r0, [pc, #184]	@ (80013f4 <StateTask+0xc8>)
 800133a:	f005 ffbf 	bl	80072bc <puts>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800133e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001342:	482d      	ldr	r0, [pc, #180]	@ (80013f8 <StateTask+0xcc>)
 8001344:	f000 fe2f 	bl	8001fa6 <HAL_GPIO_TogglePin>
	  printf("a");
 8001348:	2061      	movs	r0, #97	@ 0x61
 800134a:	f005 ff59 	bl	8007200 <putchar>

      if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <StateTask+0xcc>)
 8001354:	f000 fdf6 	bl	8001f44 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d13d      	bne.n	80013da <StateTask+0xae>
          uint32_t currentTime = HAL_GetTick();
 800135e:	f000 fb6b 	bl	8001a38 <HAL_GetTick>
 8001362:	60b8      	str	r0, [r7, #8]
          HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001364:	2140      	movs	r1, #64	@ 0x40
 8001366:	4824      	ldr	r0, [pc, #144]	@ (80013f8 <StateTask+0xcc>)
 8001368:	f000 fe1d 	bl	8001fa6 <HAL_GPIO_TogglePin>
          printf("c");
 800136c:	2063      	movs	r0, #99	@ 0x63
 800136e:	f005 ff47 	bl	8007200 <putchar>

          if(currentTime - lastButtonPress > 500) {
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800137c:	d92d      	bls.n	80013da <StateTask+0xae>
              osMutexAcquire(stateMutexHandle, osWaitForever);
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <StateTask+0xd0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f9cd 	bl	8003726 <osMutexAcquire>
              printf("d");
 800138c:	2064      	movs	r0, #100	@ 0x64
 800138e:	f005 ff37 	bl	8007200 <putchar>

              currentState = (currentState + 1) % 6;
 8001392:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <StateTask+0xd4>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <StateTask+0xd8>)
 800139a:	fb83 3102 	smull	r3, r1, r3, r2
 800139e:	17d3      	asrs	r3, r2, #31
 80013a0:	1ac9      	subs	r1, r1, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	440b      	add	r3, r1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	1ad1      	subs	r1, r2, r3
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <StateTask+0xd4>)
 80013b0:	701a      	strb	r2, [r3, #0]

              printf("Button pressed - New State: %d\r\n", currentState);
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <StateTask+0xd4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <StateTask+0xdc>)
 80013ba:	f005 ff0f 	bl	80071dc <iprintf>

              SimulateStateActions(currentState);
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <StateTask+0xd4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fdb6 	bl	8000f34 <SimulateStateActions>

              SaveToEEPROM();
 80013c8:	f7ff fe04 	bl	8000fd4 <SaveToEEPROM>

              osMutexRelease(stateMutexHandle);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <StateTask+0xd0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 f9f3 	bl	80037bc <osMutexRelease>
              lastButtonPress = currentTime;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	60fb      	str	r3, [r7, #12]
          }
      }
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <StateTask+0xcc>)
 80013e2:	f000 fdc7 	bl	8001f74 <HAL_GPIO_WritePin>
	  printf("b");
 80013e6:	2062      	movs	r0, #98	@ 0x62
 80013e8:	f005 ff0a 	bl	8007200 <putchar>

      osDelay(50);
 80013ec:	2032      	movs	r0, #50	@ 0x32
 80013ee:	f002 f8f9 	bl	80035e4 <osDelay>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80013f2:	e7a4      	b.n	800133e <StateTask+0x12>
 80013f4:	08009968 	.word	0x08009968
 80013f8:	40020800 	.word	0x40020800
 80013fc:	2000024c 	.word	0x2000024c
 8001400:	20000254 	.word	0x20000254
 8001404:	2aaaaaab 	.word	0x2aaaaaab
 8001408:	0800997c 	.word	0x0800997c

0800140c <TelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TelemetryTask */
void TelemetryTask(void *argument)
{
 800140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	b0ed      	sub	sp, #436	@ 0x1b4
 8001412:	af1e      	add	r7, sp, #120	@ 0x78
 8001414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001418:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800141c:	6018      	str	r0, [r3, #0]
    char telemetryString[MAX_TELEMETRY_STRING];

  /* Infinite loop */
  for(;;)
  {
	  printf("e");
 800141e:	2065      	movs	r0, #101	@ 0x65
 8001420:	f005 feee 	bl	8007200 <putchar>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001424:	2120      	movs	r1, #32
 8001426:	485f      	ldr	r0, [pc, #380]	@ (80015a4 <TelemetryTask+0x198>)
 8001428:	f000 fdbd 	bl	8001fa6 <HAL_GPIO_TogglePin>
      osMutexAcquire(telemetryMutexHandle, osWaitForever);
 800142c:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <TelemetryTask+0x19c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001434:	4618      	mov	r0, r3
 8001436:	f002 f976 	bl	8003726 <osMutexAcquire>

      float altitude = 100.0f;
 800143a:	4b5c      	ldr	r3, [pc, #368]	@ (80015ac <TelemetryTask+0x1a0>)
 800143c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
      float pressure = 101.325f;
 8001440:	4b5b      	ldr	r3, [pc, #364]	@ (80015b0 <TelemetryTask+0x1a4>)
 8001442:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      float temp = 25.0f;
 8001446:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <TelemetryTask+0x1a8>)
 8001448:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      float voltage = 11.8f;
 800144c:	4b5a      	ldr	r3, [pc, #360]	@ (80015b8 <TelemetryTask+0x1ac>)
 800144e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

      int len = snprintf(telemetryString, MAX_TELEMETRY_STRING,
 8001452:	4b5a      	ldr	r3, [pc, #360]	@ (80015bc <TelemetryTask+0x1b0>)
 8001454:	681e      	ldr	r6, [r3, #0]
 8001456:	4b5a      	ldr	r3, [pc, #360]	@ (80015c0 <TelemetryTask+0x1b4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001460:	f7ff f892 	bl	8000588 <__aeabi_f2d>
 8001464:	4680      	mov	r8, r0
 8001466:	4689      	mov	r9, r1
 8001468:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800146c:	f7ff f88c 	bl	8000588 <__aeabi_f2d>
 8001470:	4682      	mov	sl, r0
 8001472:	468b      	mov	fp, r1
 8001474:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001478:	f7ff f886 	bl	8000588 <__aeabi_f2d>
 800147c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001480:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001484:	f7ff f880 	bl	8000588 <__aeabi_f2d>
 8001488:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800148c:	4b4d      	ldr	r3, [pc, #308]	@ (80015c4 <TelemetryTask+0x1b8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001496:	f7ff f877 	bl	8000588 <__aeabi_f2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	4b4a      	ldr	r3, [pc, #296]	@ (80015c8 <TelemetryTask+0x1bc>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80014a6:	931c      	str	r3, [sp, #112]	@ 0x70
 80014a8:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80014c8:	2300      	movs	r3, #0
 80014ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80014f0:	2300      	movs	r3, #0
 80014f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80014f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80014f8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80014fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001500:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001504:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001508:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	9600      	str	r6, [sp, #0]
 8001512:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <TelemetryTask+0x1c0>)
 8001514:	4a2e      	ldr	r2, [pc, #184]	@ (80015d0 <TelemetryTask+0x1c4>)
 8001516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800151a:	f005 ff8b 	bl	8007434 <sniprintf>
 800151e:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
              "#%s,%lu,%lu,%.2f,%.2f,%.2f,%.2f,%lu,%.6f,%.6f,%.2f,%d,%.2f,%.2f,%d,%.2f,%04X$\r\n",
              TEAM_ID, missionTime, packetCount, altitude, pressure, temp, voltage,
              0UL, 0.0f, 0.0f, 0.0f, 0, 0.0f, 0.0f,
              currentState, temp, errorFlags);
      printf("tele");
 8001522:	482c      	ldr	r0, [pc, #176]	@ (80015d4 <TelemetryTask+0x1c8>)
 8001524:	f005 fe5a 	bl	80071dc <iprintf>

      if (len > 0) {
 8001528:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800152c:	2b00      	cmp	r3, #0
 800152e:	dd1e      	ble.n	800156e <TelemetryTask+0x162>
          HAL_UART_Transmit(&huart2, (uint8_t*)telemetryString, len, HAL_MAX_DELAY);
 8001530:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001534:	b29a      	uxth	r2, r3
 8001536:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153e:	4826      	ldr	r0, [pc, #152]	@ (80015d8 <TelemetryTask+0x1cc>)
 8001540:	f001 fb84 	bl	8002c4c <HAL_UART_Transmit>

          printf("Packet %lu sent\r\n", packetCount);
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <TelemetryTask+0x1b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4824      	ldr	r0, [pc, #144]	@ (80015dc <TelemetryTask+0x1d0>)
 800154c:	f005 fe46 	bl	80071dc <iprintf>

          SimulateSDCardWrite(telemetryString);
 8001550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd53 	bl	8001000 <SimulateSDCardWrite>

          packetCount++;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <TelemetryTask+0x1b4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <TelemetryTask+0x1b4>)
 8001562:	6013      	str	r3, [r2, #0]
          missionTime++;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <TelemetryTask+0x1b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <TelemetryTask+0x1b0>)
 800156c:	6013      	str	r3, [r2, #0]
      }
      printf("f");
 800156e:	2066      	movs	r0, #102	@ 0x66
 8001570:	f005 fe46 	bl	8007200 <putchar>

      osMutexRelease(telemetryMutexHandle);
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <TelemetryTask+0x19c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 f91f 	bl	80037bc <osMutexRelease>
      printf("g");
 800157e:	2067      	movs	r0, #103	@ 0x67
 8001580:	f005 fe3e 	bl	8007200 <putchar>


      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001584:	2120      	movs	r1, #32
 8001586:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <TelemetryTask+0x198>)
 8001588:	f000 fd0d 	bl	8001fa6 <HAL_GPIO_TogglePin>
      printf("h");
 800158c:	2068      	movs	r0, #104	@ 0x68
 800158e:	f005 fe37 	bl	8007200 <putchar>


      osDelay(TELEMETRY_DELAY);
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f002 f825 	bl	80035e4 <osDelay>
      printf("i");
 800159a:	2069      	movs	r0, #105	@ 0x69
 800159c:	f005 fe30 	bl	8007200 <putchar>
  {
 80015a0:	e73d      	b.n	800141e <TelemetryTask+0x12>
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000
 80015a8:	20000250 	.word	0x20000250
 80015ac:	42c80000 	.word	0x42c80000
 80015b0:	42caa666 	.word	0x42caa666
 80015b4:	41c80000 	.word	0x41c80000
 80015b8:	413ccccd 	.word	0x413ccccd
 80015bc:	2000025c 	.word	0x2000025c
 80015c0:	20000258 	.word	0x20000258
 80015c4:	20000254 	.word	0x20000254
 80015c8:	20000260 	.word	0x20000260
 80015cc:	080099a0 	.word	0x080099a0
 80015d0:	080099a8 	.word	0x080099a8
 80015d4:	080099f8 	.word	0x080099f8
 80015d8:	200001f4 	.word	0x200001f4
 80015dc:	08009a00 	.word	0x08009a00

080015e0 <ErrorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorTask */
void ErrorTask(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015e8:	2140      	movs	r1, #64	@ 0x40
 80015ea:	4813      	ldr	r0, [pc, #76]	@ (8001638 <ErrorTask+0x58>)
 80015ec:	f000 fcdb 	bl	8001fa6 <HAL_GPIO_TogglePin>
	  printf("h");
 80015f0:	2068      	movs	r0, #104	@ 0x68
 80015f2:	f005 fe05 	bl	8007200 <putchar>

      float voltage = 11.8f;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <ErrorTask+0x5c>)
 80015f8:	60fb      	str	r3, [r7, #12]
      if(voltage < 11.0f) {
 80015fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fe:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d50a      	bpl.n	8001622 <ErrorTask+0x42>
    	  printf("i");
 800160c:	2069      	movs	r0, #105	@ 0x69
 800160e:	f005 fdf7 	bl	8007200 <putchar>

          errorFlags |= E_BATT;
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <ErrorTask+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <ErrorTask+0x60>)
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	e006      	b.n	8001630 <ErrorTask+0x50>
      } else {
          errorFlags &= ~E_BATT;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <ErrorTask+0x60>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <ErrorTask+0x60>)
 800162e:	801a      	strh	r2, [r3, #0]
      }

      osDelay(ERROR_CHECK_DELAY);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f001 ffd7 	bl	80035e4 <osDelay>
  {
 8001636:	e7d7      	b.n	80015e8 <ErrorTask+0x8>
 8001638:	40020800 	.word	0x40020800
 800163c:	413ccccd 	.word	0x413ccccd
 8001640:	20000260 	.word	0x20000260

08001644 <StorageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StorageTask */
void StorageTask(void *argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StorageTask */
  /* Infinite loop */
  for(;;)
  {
	printf("1");
 800164c:	2031      	movs	r0, #49	@ 0x31
 800164e:	f005 fdd7 	bl	8007200 <putchar>
    osDelay(10);
 8001652:	200a      	movs	r0, #10
 8001654:	f001 ffc6 	bl	80035e4 <osDelay>
	printf("1");
 8001658:	bf00      	nop
 800165a:	e7f7      	b.n	800164c <StorageTask+0x8>

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_MspInit+0x54>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_MspInit+0x54>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <HAL_MspInit+0x54>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_MspInit+0x54>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_MspInit+0x54>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_MspInit+0x54>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	f06f 0001 	mvn.w	r0, #1
 80016ae:	f000 fa8c 	bl	8001bca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_UART_MspInit+0x84>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12b      	bne.n	800173a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_UART_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_UART_MspInit+0x88>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_UART_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_UART_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <HAL_UART_MspInit+0x88>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <HAL_UART_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171a:	230c      	movs	r3, #12
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172a:	2307      	movs	r3, #7
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	@ (800174c <HAL_UART_MspInit+0x8c>)
 8001736:	f000 fa71 	bl	8001c1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40004400 	.word	0x40004400
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f941 	bl	8001a10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800178e:	f003 fe8b 	bl	80054a8 <xTaskGetSchedulerState>
 8001792:	4603      	mov	r3, r0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d001      	beq.n	800179c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001798:	f004 fd86 	bl	80062a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_kill>:

int _kill(int pid, int sig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ba:	f005 ff99 	bl	80076f0 <__errno>
 80017be:	4603      	mov	r3, r0
 80017c0:	2216      	movs	r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
  return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_exit>:

void _exit (int status)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe7 	bl	80017b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <_exit+0x12>

080017e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e00a      	b.n	800180e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f8:	f3af 8000 	nop.w
 80017fc:	4601      	mov	r1, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbf0      	blt.n	80017f8 <_read+0x12>
  }

  return len;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001848:	605a      	str	r2, [r3, #4]
  return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_isatty>:

int _isatty(int file)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001860:	2301      	movs	r3, #1
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f005 ff1a 	bl	80076f0 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20020000 	.word	0x20020000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000264 	.word	0x20000264
 80018f0:	20004d08 	.word	0x20004d08

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800191c:	f7ff ffea 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001946:	f005 fed9 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fb67 	bl	800101c <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800195c:	08009e78 	.word	0x08009e78
  ldr r2, =_sbss
 8001960:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001964:	20004d08 	.word	0x20004d08

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f90d 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	200f      	movs	r0, #15
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fe62 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f917 	bl	8001c02 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ec:	f000 f8ed 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000268 	.word	0x20000268

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000268 	.word	0x20000268

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff47 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff5c 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffb0 	bl	8001b70 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e165      	b.n	8001f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8154 	bne.w	8001efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ae 	beq.w	8001efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a58      	ldr	r2, [pc, #352]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <HAL_GPIO_Init+0x308>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f2c <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f30 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	@ (8001f34 <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f38 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x206>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a49      	ldr	r2, [pc, #292]	@ (8001f3c <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x202>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a31      	ldr	r2, [pc, #196]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae96 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	041a      	lsls	r2, r3, #16
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff fcb4 	bl	8001a38 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff fcb0 	bl	8001a38 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f855 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc14 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	08009adc 	.word	0x08009adc
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000000 	.word	0x20000000

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff0 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	@ (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08009aec 	.word	0x08009aec

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f7ff ffdc 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	@ (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	08009aec 	.word	0x08009aec

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b0ae      	sub	sp, #184	@ 0xb8
 8002216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002236:	4bcb      	ldr	r3, [pc, #812]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b0c      	cmp	r3, #12
 8002240:	f200 8206 	bhi.w	8002650 <HAL_RCC_GetSysClockFreq+0x440>
 8002244:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002281 	.word	0x08002281
 8002250:	08002651 	.word	0x08002651
 8002254:	08002651 	.word	0x08002651
 8002258:	08002651 	.word	0x08002651
 800225c:	08002289 	.word	0x08002289
 8002260:	08002651 	.word	0x08002651
 8002264:	08002651 	.word	0x08002651
 8002268:	08002651 	.word	0x08002651
 800226c:	08002291 	.word	0x08002291
 8002270:	08002651 	.word	0x08002651
 8002274:	08002651 	.word	0x08002651
 8002278:	08002651 	.word	0x08002651
 800227c:	08002481 	.word	0x08002481
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4bb9      	ldr	r3, [pc, #740]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x358>)
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002286:	e1e7      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4bb8      	ldr	r3, [pc, #736]	@ (800256c <HAL_RCC_GetSysClockFreq+0x35c>)
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800228e:	e1e3      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002290:	4bb4      	ldr	r3, [pc, #720]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229c:	4bb1      	ldr	r3, [pc, #708]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d071      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4bae      	ldr	r3, [pc, #696]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e0:	0150      	lsls	r0, r2, #5
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4621      	mov	r1, r4
 80022e8:	1a51      	subs	r1, r2, r1
 80022ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb63 0301 	sbc.w	r3, r3, r1
 80022f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002300:	4649      	mov	r1, r9
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	4641      	mov	r1, r8
 8002306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230a:	4641      	mov	r1, r8
 800230c:	018a      	lsls	r2, r1, #6
 800230e:	4641      	mov	r1, r8
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002314:	4649      	mov	r1, r9
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002328:	4649      	mov	r1, r9
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4641      	mov	r1, r8
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4622      	mov	r2, r4
 800233e:	189b      	adds	r3, r3, r2
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	462b      	mov	r3, r5
 8002344:	460a      	mov	r2, r1
 8002346:	eb42 0303 	adc.w	r3, r2, r3
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002358:	4629      	mov	r1, r5
 800235a:	024b      	lsls	r3, r1, #9
 800235c:	4621      	mov	r1, r4
 800235e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002362:	4621      	mov	r1, r4
 8002364:	024a      	lsls	r2, r1, #9
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800236e:	2200      	movs	r2, #0
 8002370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002374:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002378:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800237c:	f7fe fc34 	bl	8000be8 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800238a:	e067      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002398:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800239c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023a6:	2300      	movs	r3, #0
 80023a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	0159      	lsls	r1, r3, #5
 80023bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c0:	0150      	lsls	r0, r2, #5
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4621      	mov	r1, r4
 80023c8:	1a51      	subs	r1, r2, r1
 80023ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023cc:	4629      	mov	r1, r5
 80023ce:	eb63 0301 	sbc.w	r3, r3, r1
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023e0:	4649      	mov	r1, r9
 80023e2:	018b      	lsls	r3, r1, #6
 80023e4:	4641      	mov	r1, r8
 80023e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ea:	4641      	mov	r1, r8
 80023ec:	018a      	lsls	r2, r1, #6
 80023ee:	4641      	mov	r1, r8
 80023f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f4:	4649      	mov	r1, r9
 80023f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002406:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800240a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800240e:	4692      	mov	sl, r2
 8002410:	469b      	mov	fp, r3
 8002412:	4623      	mov	r3, r4
 8002414:	eb1a 0303 	adds.w	r3, sl, r3
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	462b      	mov	r3, r5
 800241c:	eb4b 0303 	adc.w	r3, fp, r3
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800242e:	4629      	mov	r1, r5
 8002430:	028b      	lsls	r3, r1, #10
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002438:	4621      	mov	r1, r4
 800243a:	028a      	lsls	r2, r1, #10
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002444:	2200      	movs	r2, #0
 8002446:	673b      	str	r3, [r7, #112]	@ 0x70
 8002448:	677a      	str	r2, [r7, #116]	@ 0x74
 800244a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800244e:	f7fe fbcb 	bl	8000be8 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4613      	mov	r3, r2
 8002458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800246e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800247e:	e0eb      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248c:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d06b      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002498:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	2200      	movs	r2, #0
 80024a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ac:	2300      	movs	r3, #0
 80024ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80024b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	0159      	lsls	r1, r3, #5
 80024c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c6:	0150      	lsls	r0, r2, #5
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4621      	mov	r1, r4
 80024ce:	1a51      	subs	r1, r2, r1
 80024d0:	61b9      	str	r1, [r7, #24]
 80024d2:	4629      	mov	r1, r5
 80024d4:	eb63 0301 	sbc.w	r3, r3, r1
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024e6:	4659      	mov	r1, fp
 80024e8:	018b      	lsls	r3, r1, #6
 80024ea:	4651      	mov	r1, sl
 80024ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f0:	4651      	mov	r1, sl
 80024f2:	018a      	lsls	r2, r1, #6
 80024f4:	4651      	mov	r1, sl
 80024f6:	ebb2 0801 	subs.w	r8, r2, r1
 80024fa:	4659      	mov	r1, fp
 80024fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002514:	4690      	mov	r8, r2
 8002516:	4699      	mov	r9, r3
 8002518:	4623      	mov	r3, r4
 800251a:	eb18 0303 	adds.w	r3, r8, r3
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	462b      	mov	r3, r5
 8002522:	eb49 0303 	adc.w	r3, r9, r3
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002534:	4629      	mov	r1, r5
 8002536:	024b      	lsls	r3, r1, #9
 8002538:	4621      	mov	r1, r4
 800253a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253e:	4621      	mov	r1, r4
 8002540:	024a      	lsls	r2, r1, #9
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800254a:	2200      	movs	r2, #0
 800254c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800254e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002550:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002562:	e065      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x420>
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002570:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x458>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	2200      	movs	r2, #0
 8002578:	4618      	mov	r0, r3
 800257a:	4611      	mov	r1, r2
 800257c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002580:	653b      	str	r3, [r7, #80]	@ 0x50
 8002582:	2300      	movs	r3, #0
 8002584:	657b      	str	r3, [r7, #84]	@ 0x54
 8002586:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800258a:	4642      	mov	r2, r8
 800258c:	464b      	mov	r3, r9
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259c:	0150      	lsls	r0, r2, #5
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4641      	mov	r1, r8
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	4649      	mov	r1, r9
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025bc:	4659      	mov	r1, fp
 80025be:	018b      	lsls	r3, r1, #6
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c6:	4651      	mov	r1, sl
 80025c8:	018a      	lsls	r2, r1, #6
 80025ca:	4651      	mov	r1, sl
 80025cc:	1a54      	subs	r4, r2, r1
 80025ce:	4659      	mov	r1, fp
 80025d0:	eb63 0501 	sbc.w	r5, r3, r1
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	00eb      	lsls	r3, r5, #3
 80025de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e2:	00e2      	lsls	r2, r4, #3
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	18e3      	adds	r3, r4, r3
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	464b      	mov	r3, r9
 80025f0:	eb45 0303 	adc.w	r3, r5, r3
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002618:	2200      	movs	r2, #0
 800261a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800261c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800261e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002622:	f7fe fae1 	bl	8000be8 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x458>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0f1b      	lsrs	r3, r3, #28
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800263e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800264e:	e003      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800265c:	4618      	mov	r0, r3
 800265e:	37b8      	adds	r7, #184	@ 0xb8
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400

08002670 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e28d      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8083 	beq.w	8002796 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002690:	4b94      	ldr	r3, [pc, #592]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d019      	beq.n	80026d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800269c:	4b91      	ldr	r3, [pc, #580]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026a8:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b8b      	ldr	r3, [pc, #556]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b84      	ldr	r3, [pc, #528]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x124>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e25a      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x90>
 80026f2:	4b7c      	ldr	r3, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xcc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0xb4>
 800270a:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a75      	ldr	r2, [pc, #468]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a72      	ldr	r2, [pc, #456]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xcc>
 8002724:	4b6f      	ldr	r3, [pc, #444]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b6c      	ldr	r3, [pc, #432]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6b      	ldr	r2, [pc, #428]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff f978 	bl	8001a38 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff f974 	bl	8001a38 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e21f      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b61      	ldr	r3, [pc, #388]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xdc>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f964 	bl	8001a38 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f960 	bl	8001a38 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e20b      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b57      	ldr	r3, [pc, #348]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x104>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d06f      	beq.n	8002882 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027a2:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d017      	beq.n	80027de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ae:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ba:	4b4a      	ldr	r3, [pc, #296]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c6:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d11c      	bne.n	800280c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b44      	ldr	r3, [pc, #272]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	4b41      	ldr	r3, [pc, #260]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x186>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1d3      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4937      	ldr	r1, [pc, #220]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	e03a      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_RCC_OscConfig+0x278>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7ff f90d 	bl	8001a38 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7ff f909 	bl	8001a38 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1b4      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b28      	ldr	r3, [pc, #160]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4925      	ldr	r1, [pc, #148]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_RCC_OscConfig+0x278>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff f8ec 	bl	8001a38 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002864:	f7ff f8e8 	bl	8001a38 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e193      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d036      	beq.n	80028fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_RCC_OscConfig+0x27c>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff f8cc 	bl	8001a38 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff f8c8 	bl	8001a38 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e173      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80028b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x234>
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_RCC_OscConfig+0x27c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7ff f8b5 	bl	8001a38 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	e00e      	b.n	80028f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7ff f8b1 	bl	8001a38 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d907      	bls.n	80028f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e15c      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	42470000 	.word	0x42470000
 80028ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ea      	bne.n	80028d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8097 	beq.w	8002a38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b83      	ldr	r3, [pc, #524]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	@ 0x40
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b79      	ldr	r3, [pc, #484]	@ (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	@ (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7ff f871 	bl	8001a38 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7ff f86d 	bl	8001a38 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e118      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x31e>
 8002980:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a65      	ldr	r2, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x358>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x340>
 8002996:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	4a60      	ldr	r2, [pc, #384]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a2:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a6:	4a5d      	ldr	r2, [pc, #372]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x358>
 80029b0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a59      	ldr	r2, [pc, #356]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c0:	4a56      	ldr	r2, [pc, #344]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7ff f832 	bl	8001a38 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7ff f82e 	bl	8001a38 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0d7      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ee      	beq.n	80029d8 <HAL_RCC_OscConfig+0x368>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7ff f81c 	bl	8001a38 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7ff f818 	bl	8001a38 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0c1      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1a:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ee      	bne.n	8002a04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	4a3a      	ldr	r2, [pc, #232]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80ad 	beq.w	8002b9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a42:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d060      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d145      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ffec 	bl	8001a38 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe ffe8 	bl	8001a38 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e093      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe ffbd 	bl	8001a38 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe ffb9 	bl	8001a38 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e064      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x452>
 8002ae0:	e05c      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ffa6 	bl	8001a38 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe ffa2 	bl	8001a38 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04d      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x480>
 8002b0e:	e045      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e040      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba8 <HAL_RCC_OscConfig+0x538>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d030      	beq.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d129      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d122      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d119      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10f      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fd74 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	@ 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f973 	bl	8002edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d175      	bne.n	8002d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Transmit+0x2c>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e06e      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2221      	movs	r2, #33	@ 0x21
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe fed5 	bl	8001a38 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca4:	d108      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e003      	b.n	8002cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc0:	e02e      	b.n	8002d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f848 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e03a      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e007      	b.n	8002d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1cb      	bne.n	8002cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2140      	movs	r1, #64	@ 0x40
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f814 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	e03b      	b.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d7a:	d037      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7fe fe5c 	bl	8001a38 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e03a      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d020      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d01d      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d116      	bne.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f81d 	bl	8002e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e00f      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d0b4      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b095      	sub	sp, #84	@ 0x54
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3314      	adds	r3, #20
 8002e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e5      	bne.n	8002e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d119      	bne.n	8002ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eac:	61ba      	str	r2, [r7, #24]
 8002eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ece:	bf00      	nop
 8002ed0:	3754      	adds	r7, #84	@ 0x54
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee0:	b0c0      	sub	sp, #256	@ 0x100
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	68d9      	ldr	r1, [r3, #12]
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	ea40 0301 	orr.w	r3, r0, r1
 8002f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f34:	f021 010c 	bic.w	r1, r1, #12
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f42:	430b      	orrs	r3, r1
 8002f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f56:	6999      	ldr	r1, [r3, #24]
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	ea40 0301 	orr.w	r3, r0, r1
 8002f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d005      	beq.n	8002f7c <UART_SetConfig+0xa0>
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8d      	ldr	r3, [pc, #564]	@ (80031ac <UART_SetConfig+0x2d0>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d104      	bne.n	8002f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff f934 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002f80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f84:	e003      	b.n	8002f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f86:	f7ff f91b 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f98:	f040 810c 	bne.w	80031b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fae:	4622      	mov	r2, r4
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	1891      	adds	r1, r2, r2
 8002fb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	eb12 0801 	adds.w	r8, r2, r1
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb43 0901 	adc.w	r9, r3, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fde:	4690      	mov	r8, r2
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	eb18 0303 	adds.w	r3, r8, r3
 8002fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fec:	462b      	mov	r3, r5
 8002fee:	eb49 0303 	adc.w	r3, r9, r3
 8002ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003002:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800300a:	460b      	mov	r3, r1
 800300c:	18db      	adds	r3, r3, r3
 800300e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003010:	4613      	mov	r3, r2
 8003012:	eb42 0303 	adc.w	r3, r2, r3
 8003016:	657b      	str	r3, [r7, #84]	@ 0x54
 8003018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800301c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003020:	f7fd fde2 	bl	8000be8 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4b61      	ldr	r3, [pc, #388]	@ (80031b0 <UART_SetConfig+0x2d4>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011c      	lsls	r4, r3, #4
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800303c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800304c:	415b      	adcs	r3, r3
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003054:	4641      	mov	r1, r8
 8003056:	eb12 0a01 	adds.w	sl, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb43 0b01 	adc.w	fp, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800306c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003074:	4692      	mov	sl, r2
 8003076:	469b      	mov	fp, r3
 8003078:	4643      	mov	r3, r8
 800307a:	eb1a 0303 	adds.w	r3, sl, r3
 800307e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003082:	464b      	mov	r3, r9
 8003084:	eb4b 0303 	adc.w	r3, fp, r3
 8003088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003098:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800309c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030a0:	460b      	mov	r3, r1
 80030a2:	18db      	adds	r3, r3, r3
 80030a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80030a6:	4613      	mov	r3, r2
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030b6:	f7fd fd97 	bl	8000be8 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <UART_SetConfig+0x2d4>)
 80030c2:	fba3 2301 	umull	r2, r3, r3, r1
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2264      	movs	r2, #100	@ 0x64
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	1acb      	subs	r3, r1, r3
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <UART_SetConfig+0x2d4>)
 80030d8:	fba3 2302 	umull	r2, r3, r3, r2
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030e4:	441c      	add	r4, r3
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003100:	415b      	adcs	r3, r3
 8003102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003108:	4641      	mov	r1, r8
 800310a:	1851      	adds	r1, r2, r1
 800310c:	6339      	str	r1, [r7, #48]	@ 0x30
 800310e:	4649      	mov	r1, r9
 8003110:	414b      	adcs	r3, r1
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003120:	4659      	mov	r1, fp
 8003122:	00cb      	lsls	r3, r1, #3
 8003124:	4651      	mov	r1, sl
 8003126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312a:	4651      	mov	r1, sl
 800312c:	00ca      	lsls	r2, r1, #3
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	4603      	mov	r3, r0
 8003134:	4642      	mov	r2, r8
 8003136:	189b      	adds	r3, r3, r2
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003154:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800315c:	460b      	mov	r3, r1
 800315e:	18db      	adds	r3, r3, r3
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003162:	4613      	mov	r3, r2
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800316a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800316e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003172:	f7fd fd39 	bl	8000be8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <UART_SetConfig+0x2d4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	@ 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3332      	adds	r3, #50	@ 0x32
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <UART_SetConfig+0x2d4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4422      	add	r2, r4
 80031a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031a4:	e106      	b.n	80033b4 <UART_SetConfig+0x4d8>
 80031a6:	bf00      	nop
 80031a8:	40011000 	.word	0x40011000
 80031ac:	40011400 	.word	0x40011400
 80031b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031c6:	4642      	mov	r2, r8
 80031c8:	464b      	mov	r3, r9
 80031ca:	1891      	adds	r1, r2, r2
 80031cc:	6239      	str	r1, [r7, #32]
 80031ce:	415b      	adcs	r3, r3
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d6:	4641      	mov	r1, r8
 80031d8:	1854      	adds	r4, r2, r1
 80031da:	4649      	mov	r1, r9
 80031dc:	eb43 0501 	adc.w	r5, r3, r1
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031fc:	464b      	mov	r3, r9
 80031fe:	eb45 0303 	adc.w	r3, r5, r3
 8003202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003222:	4629      	mov	r1, r5
 8003224:	008b      	lsls	r3, r1, #2
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322c:	4621      	mov	r1, r4
 800322e:	008a      	lsls	r2, r1, #2
 8003230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003234:	f7fd fcd8 	bl	8000be8 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4b60      	ldr	r3, [pc, #384]	@ (80033c0 <UART_SetConfig+0x4e4>)
 800323e:	fba3 2302 	umull	r2, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	011c      	lsls	r4, r3, #4
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	61b9      	str	r1, [r7, #24]
 8003260:	415b      	adcs	r3, r3
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6139      	str	r1, [r7, #16]
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032c0:	4649      	mov	r1, r9
 80032c2:	008b      	lsls	r3, r1, #2
 80032c4:	4641      	mov	r1, r8
 80032c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ca:	4641      	mov	r1, r8
 80032cc:	008a      	lsls	r2, r1, #2
 80032ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032d2:	f7fd fc89 	bl	8000be8 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <UART_SetConfig+0x4e4>)
 80032de:	fba3 2301 	umull	r2, r3, r3, r1
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2264      	movs	r2, #100	@ 0x64
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	1acb      	subs	r3, r1, r3
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	3332      	adds	r3, #50	@ 0x32
 80032f0:	4a33      	ldr	r2, [pc, #204]	@ (80033c0 <UART_SetConfig+0x4e4>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032fc:	441c      	add	r4, r3
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003302:	2200      	movs	r2, #0
 8003304:	673b      	str	r3, [r7, #112]	@ 0x70
 8003306:	677a      	str	r2, [r7, #116]	@ 0x74
 8003308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	1891      	adds	r1, r2, r2
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	415b      	adcs	r3, r3
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331c:	4641      	mov	r1, r8
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	4649      	mov	r1, r9
 8003324:	414b      	adcs	r3, r1
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003334:	4659      	mov	r1, fp
 8003336:	00cb      	lsls	r3, r1, #3
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	4651      	mov	r1, sl
 8003340:	00ca      	lsls	r2, r1, #3
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	4603      	mov	r3, r0
 8003348:	4642      	mov	r2, r8
 800334a:	189b      	adds	r3, r3, r2
 800334c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800334e:	464b      	mov	r3, r9
 8003350:	460a      	mov	r2, r1
 8003352:	eb42 0303 	adc.w	r3, r2, r3
 8003356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	663b      	str	r3, [r7, #96]	@ 0x60
 8003362:	667a      	str	r2, [r7, #100]	@ 0x64
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003370:	4649      	mov	r1, r9
 8003372:	008b      	lsls	r3, r1, #2
 8003374:	4641      	mov	r1, r8
 8003376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337a:	4641      	mov	r1, r8
 800337c:	008a      	lsls	r2, r1, #2
 800337e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003382:	f7fd fc31 	bl	8000be8 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <UART_SetConfig+0x4e4>)
 800338c:	fba3 1302 	umull	r1, r3, r3, r2
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	2164      	movs	r1, #100	@ 0x64
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	3332      	adds	r3, #50	@ 0x32
 800339e:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <UART_SetConfig+0x4e4>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4422      	add	r2, r4
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ba:	46bd      	mov	sp, r7
 80033bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c0:	51eb851f 	.word	0x51eb851f

080033c4 <__NVIC_SetPriority>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	@ (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800341c:	2100      	movs	r1, #0
 800341e:	f06f 0004 	mvn.w	r0, #4
 8003422:	f7ff ffcf 	bl	80033c4 <__NVIC_SetPriority>
#endif
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003432:	f3ef 8305 	mrs	r3, IPSR
 8003436:	603b      	str	r3, [r7, #0]
  return(result);
 8003438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800343e:	f06f 0305 	mvn.w	r3, #5
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e00c      	b.n	8003460 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <osKernelInitialize+0x44>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800344e:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <osKernelInitialize+0x44>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e002      	b.n	8003460 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800345e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003460:	687b      	ldr	r3, [r7, #4]
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	2000026c 	.word	0x2000026c

08003474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347a:	f3ef 8305 	mrs	r3, IPSR
 800347e:	603b      	str	r3, [r7, #0]
  return(result);
 8003480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003486:	f06f 0305 	mvn.w	r3, #5
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e010      	b.n	80034b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800348e:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <osKernelStart+0x48>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d109      	bne.n	80034aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003496:	f7ff ffbf 	bl	8003418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <osKernelStart+0x48>)
 800349c:	2202      	movs	r2, #2
 800349e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034a0:	f001 fba4 	bl	8004bec <vTaskStartScheduler>
      stat = osOK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	e002      	b.n	80034b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000026c 	.word	0x2000026c

080034c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	@ 0x38
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	617b      	str	r3, [r7, #20]
  return(result);
 80034d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d17e      	bne.n	80035da <osThreadNew+0x11a>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07b      	beq.n	80035da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034e6:	2318      	movs	r3, #24
 80034e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d045      	beq.n	8003586 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <osThreadNew+0x48>
        name = attr->name;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <osThreadNew+0x6e>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b38      	cmp	r3, #56	@ 0x38
 8003520:	d805      	bhi.n	800352e <osThreadNew+0x6e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <osThreadNew+0x72>
        return (NULL);
 800352e:	2300      	movs	r3, #0
 8003530:	e054      	b.n	80035dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <osThreadNew+0xa8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003550:	d90a      	bls.n	8003568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <osThreadNew+0xa8>
        mem = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e010      	b.n	800358a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <osThreadNew+0xca>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <osThreadNew+0xca>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <osThreadNew+0xca>
          mem = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e001      	b.n	800358a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d110      	bne.n	80035b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003598:	9202      	str	r2, [sp, #8]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f001 f944 	bl	8004834 <xTaskCreateStatic>
 80035ac:	4603      	mov	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	e013      	b.n	80035da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d110      	bne.n	80035da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f001 f992 	bl	80048f4 <xTaskCreate>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <osThreadNew+0x11a>
            hTask = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035da:	693b      	ldr	r3, [r7, #16]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	@ 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <osDelay+0x1c>
    stat = osErrorISR;
 80035f8:	f06f 0305 	mvn.w	r3, #5
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e007      	b.n	8003610 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <osDelay+0x2c>
      vTaskDelay(ticks);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 fab8 	bl	8004b80 <vTaskDelay>
    }
  }

  return (stat);
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800361a:	b580      	push	{r7, lr}
 800361c:	b088      	sub	sp, #32
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003626:	f3ef 8305 	mrs	r3, IPSR
 800362a:	60bb      	str	r3, [r7, #8]
  return(result);
 800362c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800362e:	2b00      	cmp	r3, #0
 8003630:	d174      	bne.n	800371c <osMutexNew+0x102>
    if (attr != NULL) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e001      	b.n	8003644 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <osMutexNew+0x3a>
      rmtx = 1U;
 800364e:	2301      	movs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e001      	b.n	8003658 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d15c      	bne.n	800371c <osMutexNew+0x102>
      mem = -1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003666:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d015      	beq.n	800369a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <osMutexNew+0x6a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b4f      	cmp	r3, #79	@ 0x4f
 800367c:	d902      	bls.n	8003684 <osMutexNew+0x6a>
          mem = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e00c      	b.n	800369e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <osMutexNew+0x84>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <osMutexNew+0x84>
            mem = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e001      	b.n	800369e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d112      	bne.n	80036ca <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4619      	mov	r1, r3
 80036b0:	2004      	movs	r0, #4
 80036b2:	f000 fb20 	bl	8003cf6 <xQueueCreateMutexStatic>
 80036b6:	61f8      	str	r0, [r7, #28]
 80036b8:	e016      	b.n	80036e8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4619      	mov	r1, r3
 80036c0:	2001      	movs	r0, #1
 80036c2:	f000 fb18 	bl	8003cf6 <xQueueCreateMutexStatic>
 80036c6:	61f8      	str	r0, [r7, #28]
 80036c8:	e00e      	b.n	80036e8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80036d6:	2004      	movs	r0, #4
 80036d8:	f000 faf5 	bl	8003cc6 <xQueueCreateMutex>
 80036dc:	61f8      	str	r0, [r7, #28]
 80036de:	e003      	b.n	80036e8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80036e0:	2001      	movs	r0, #1
 80036e2:	f000 faf0 	bl	8003cc6 <xQueueCreateMutex>
 80036e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <osMutexNew+0xee>
        if (attr != NULL) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <osMutexNew+0xe2>
          name = attr->name;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e001      	b.n	8003700 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	69f8      	ldr	r0, [r7, #28]
 8003704:	f001 f838 	bl	8004778 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <osMutexNew+0x102>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800371c:	69fb      	ldr	r3, [r7, #28]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003744:	f3ef 8305 	mrs	r3, IPSR
 8003748:	60bb      	str	r3, [r7, #8]
  return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003750:	f06f 0305 	mvn.w	r3, #5
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e02c      	b.n	80037b2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800375e:	f06f 0303 	mvn.w	r3, #3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e025      	b.n	80037b2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	6938      	ldr	r0, [r7, #16]
 8003770:	f000 fb11 	bl	8003d96 <xQueueTakeMutexRecursive>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d01b      	beq.n	80037b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003780:	f06f 0301 	mvn.w	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e014      	b.n	80037b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003788:	f06f 0302 	mvn.w	r3, #2
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e010      	b.n	80037b2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6938      	ldr	r0, [r7, #16]
 8003794:	f000 fdb8 	bl	8004308 <xQueueSemaphoreTake>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d009      	beq.n	80037b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80037a4:	f06f 0301 	mvn.w	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e002      	b.n	80037b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80037ac:	f06f 0302 	mvn.w	r3, #2
 80037b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80037b2:	697b      	ldr	r3, [r7, #20]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d8:	f3ef 8305 	mrs	r3, IPSR
 80037dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <osMutexRelease+0x30>
    stat = osErrorISR;
 80037e4:	f06f 0305 	mvn.w	r3, #5
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e01f      	b.n	800382c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80037f2:	f06f 0303 	mvn.w	r3, #3
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e018      	b.n	800382c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d009      	beq.n	8003814 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003800:	6938      	ldr	r0, [r7, #16]
 8003802:	f000 fa93 	bl	8003d2c <xQueueGiveMutexRecursive>
 8003806:	4603      	mov	r3, r0
 8003808:	2b01      	cmp	r3, #1
 800380a:	d00f      	beq.n	800382c <osMutexRelease+0x70>
        stat = osErrorResource;
 800380c:	f06f 0302 	mvn.w	r3, #2
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e00b      	b.n	800382c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003814:	2300      	movs	r3, #0
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	6938      	ldr	r0, [r7, #16]
 800381c:	f000 faf2 	bl	8003e04 <xQueueGenericSend>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d002      	beq.n	800382c <osMutexRelease+0x70>
        stat = osErrorResource;
 8003826:	f06f 0302 	mvn.w	r3, #2
 800382a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800382c:	697b      	ldr	r3, [r7, #20]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a07      	ldr	r2, [pc, #28]	@ (8003864 <vApplicationGetIdleTaskMemory+0x2c>)
 8003848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4a06      	ldr	r2, [pc, #24]	@ (8003868 <vApplicationGetIdleTaskMemory+0x30>)
 800384e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2280      	movs	r2, #128	@ 0x80
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000270 	.word	0x20000270
 8003868:	200002cc 	.word	0x200002cc

0800386c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <vApplicationGetTimerTaskMemory+0x2c>)
 800387c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a06      	ldr	r2, [pc, #24]	@ (800389c <vApplicationGetTimerTaskMemory+0x30>)
 8003882:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800388a:	601a      	str	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	200004cc 	.word	0x200004cc
 800389c:	20000528 	.word	0x20000528

080038a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 0208 	add.w	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f103 0208 	add.w	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f103 0208 	add.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003958:	d103      	bne.n	8003962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e00c      	b.n	800397c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3308      	adds	r3, #8
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e002      	b.n	8003970 <vListInsert+0x2e>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	d2f6      	bcs.n	800396a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6852      	ldr	r2, [r2, #4]
 80039d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d103      	bne.n	80039e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a34:	f002 fba8 	bl	8006188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	441a      	add	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	3b01      	subs	r3, #1
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	441a      	add	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	22ff      	movs	r2, #255	@ 0xff
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	22ff      	movs	r2, #255	@ 0xff
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d114      	bne.n	8003ab4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3310      	adds	r3, #16
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fb36 	bl	8005108 <xTaskRemoveFromEventList>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <xQueueGenericReset+0xd0>)
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	e009      	b.n	8003ac8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3310      	adds	r3, #16
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fef1 	bl	80038a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3324      	adds	r3, #36	@ 0x24
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff feec 	bl	80038a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ac8:	f002 fb90 	bl	80061ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003acc:	2301      	movs	r3, #1
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	@ 0x38
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <xQueueGenericCreateStatic+0x56>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <xQueueGenericCreateStatic+0x5a>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <xQueueGenericCreateStatic+0x5c>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	623b      	str	r3, [r7, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <xQueueGenericCreateStatic+0x84>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <xQueueGenericCreateStatic+0x88>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <xQueueGenericCreateStatic+0x8a>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	61fb      	str	r3, [r7, #28]
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	e7fd      	b.n	8003b7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b82:	2350      	movs	r3, #80	@ 0x50
 8003b84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b50      	cmp	r3, #80	@ 0x50
 8003b8a:	d00b      	beq.n	8003ba4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61bb      	str	r3, [r7, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ba4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f840 	bl	8003c4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3730      	adds	r7, #48	@ 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	@ 0x28
 8003bda:	af02      	add	r7, sp, #8
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	613b      	str	r3, [r7, #16]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3350      	adds	r3, #80	@ 0x50
 8003c10:	4618      	mov	r0, r3
 8003c12:	f002 fbdb 	bl	80063cc <pvPortMalloc>
 8003c16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d011      	beq.n	8003c42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3350      	adds	r3, #80	@ 0x50
 8003c26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c30:	79fa      	ldrb	r2, [r7, #7]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f805 	bl	8003c4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c42:	69bb      	ldr	r3, [r7, #24]
	}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	69b8      	ldr	r0, [r7, #24]
 8003c7e:	f7ff fec3 	bl	8003a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f8a3 	bl	8003e04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7ff ff79 	bl	8003bd6 <xQueueGenericCreate>
 8003ce4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff ffd3 	bl	8003c92 <prvInitialiseMutex>

		return xNewQueue;
 8003cec:	68fb      	ldr	r3, [r7, #12]
	}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	6039      	str	r1, [r7, #0]
 8003d00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003d02:	2301      	movs	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff fee1 	bl	8003adc <xQueueGenericCreateStatic>
 8003d1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ffb8 	bl	8003c92 <prvInitialiseMutex>

		return xNewQueue;
 8003d22:	68fb      	ldr	r3, [r7, #12]
	}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	60fb      	str	r3, [r7, #12]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	689c      	ldr	r4, [r3, #8]
 8003d5a:	f001 fb95 	bl	8005488 <xTaskGetCurrentTaskHandle>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	429c      	cmp	r4, r3
 8003d62:	d111      	bne.n	8003d88 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003d76:	2300      	movs	r3, #0
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	6938      	ldr	r0, [r7, #16]
 8003d7e:	f000 f841 	bl	8003e04 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003d82:	2301      	movs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e001      	b.n	8003d8c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003d8c:	697b      	ldr	r3, [r7, #20]
	}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd90      	pop	{r4, r7, pc}

08003d96 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003d96:	b590      	push	{r4, r7, lr}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	689c      	ldr	r4, [r3, #8]
 8003dc6:	f001 fb5f 	bl	8005488 <xTaskGetCurrentTaskHandle>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d107      	bne.n	8003de0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e00c      	b.n	8003dfa <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	6938      	ldr	r0, [r7, #16]
 8003de4:	f000 fa90 	bl	8004308 <xQueueSemaphoreTake>
 8003de8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003dfa:	697b      	ldr	r3, [r7, #20]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd90      	pop	{r4, r7, pc}

08003e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	@ 0x38
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e12:	2300      	movs	r3, #0
 8003e14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <xQueueGenericSend+0x34>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <xQueueGenericSend+0x42>
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <xQueueGenericSend+0x46>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <xQueueGenericSend+0x48>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xQueueGenericSend+0x64>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d103      	bne.n	8003e76 <xQueueGenericSend+0x72>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <xQueueGenericSend+0x76>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <xQueueGenericSend+0x78>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <xQueueGenericSend+0x94>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e98:	f001 fb06 	bl	80054a8 <xTaskGetSchedulerState>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <xQueueGenericSend+0xa4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <xQueueGenericSend+0xa8>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <xQueueGenericSend+0xaa>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <xQueueGenericSend+0xc6>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	61fb      	str	r3, [r7, #28]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eca:	f002 f95d 	bl	8006188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <xQueueGenericSend+0xdc>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d129      	bne.n	8003f34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ee6:	f000 fb37 	bl	8004558 <prvCopyDataToQueue>
 8003eea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d010      	beq.n	8003f16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	3324      	adds	r3, #36	@ 0x24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f905 	bl	8005108 <xTaskRemoveFromEventList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f04:	4b3f      	ldr	r3, [pc, #252]	@ (8004004 <xQueueGenericSend+0x200>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	e00a      	b.n	8003f2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f1c:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <xQueueGenericSend+0x200>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f2c:	f002 f95e 	bl	80061ec <vPortExitCritical>
				return pdPASS;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e063      	b.n	8003ffc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f3a:	f002 f957 	bl	80061ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e05c      	b.n	8003ffc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 f93f 	bl	80051d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f56:	f002 f949 	bl	80061ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f5a:	f000 feaf 	bl	8004cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5e:	f002 f913 	bl	8006188 <vPortEnterCritical>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f6e:	d103      	bne.n	8003f78 <xQueueGenericSend+0x174>
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f84:	d103      	bne.n	8003f8e <xQueueGenericSend+0x18a>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f8e:	f002 f92d 	bl	80061ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f92:	1d3a      	adds	r2, r7, #4
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f92e 	bl	80051fc <xTaskCheckForTimeOut>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d124      	bne.n	8003ff0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fa8:	f000 fbce 	bl	8004748 <prvIsQueueFull>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	3310      	adds	r3, #16
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 f852 	bl	8005064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fc2:	f000 fb59 	bl	8004678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fc6:	f000 fe87 	bl	8004cd8 <xTaskResumeAll>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f af7c 	bne.w	8003eca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <xQueueGenericSend+0x200>)
 8003fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	e772      	b.n	8003eca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fe6:	f000 fb47 	bl	8004678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fea:	f000 fe75 	bl	8004cd8 <xTaskResumeAll>
 8003fee:	e76c      	b.n	8003eca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ff2:	f000 fb41 	bl	8004678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff6:	f000 fe6f 	bl	8004cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3738      	adds	r7, #56	@ 0x38
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b090      	sub	sp, #64	@ 0x40
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <xQueueGenericSendFromISR+0x3e>
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <xQueueGenericSendFromISR+0x42>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <xQueueGenericSendFromISR+0x44>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10b      	bne.n	8004068 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d103      	bne.n	8004076 <xQueueGenericSendFromISR+0x6e>
 800406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <xQueueGenericSendFromISR+0x72>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <xQueueGenericSendFromISR+0x74>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	623b      	str	r3, [r7, #32]
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004098:	f002 f956 	bl	8006348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800409c:	f3ef 8211 	mrs	r2, BASEPRI
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <xQueueGenericSendFromISR+0xc2>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d12f      	bne.n	800412a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80040e0:	f000 fa3a 	bl	8004558 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ec:	d112      	bne.n	8004114 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	3324      	adds	r3, #36	@ 0x24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f804 	bl	8005108 <xTaskRemoveFromEventList>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00e      	beq.n	8004124 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e007      	b.n	8004124 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004114:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004118:	3301      	adds	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	b25a      	sxtb	r2, r3
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004124:	2301      	movs	r3, #1
 8004126:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004128:	e001      	b.n	800412e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800412a:	2300      	movs	r3, #0
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800412e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004130:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800413a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800413c:	4618      	mov	r0, r3
 800413e:	3740      	adds	r7, #64	@ 0x40
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08c      	sub	sp, #48	@ 0x30
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <xQueueReceive+0x32>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	623b      	str	r3, [r7, #32]
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	e7fd      	b.n	8004172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <xQueueReceive+0x40>
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <xQueueReceive+0x44>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <xQueueReceive+0x46>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <xQueueReceive+0x62>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	61fb      	str	r3, [r7, #28]
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a6:	f001 f97f 	bl	80054a8 <xTaskGetSchedulerState>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <xQueueReceive+0x72>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueReceive+0x76>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueReceive+0x78>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueReceive+0x94>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	61bb      	str	r3, [r7, #24]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d8:	f001 ffd6 	bl	8006188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01f      	beq.n	8004228 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041ec:	f000 fa1e 	bl	800462c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	1e5a      	subs	r2, r3, #1
 80041f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00f      	beq.n	8004220 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	3310      	adds	r3, #16
 8004204:	4618      	mov	r0, r3
 8004206:	f000 ff7f 	bl	8005108 <xTaskRemoveFromEventList>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004210:	4b3c      	ldr	r3, [pc, #240]	@ (8004304 <xQueueReceive+0x1c0>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004220:	f001 ffe4 	bl	80061ec <vPortExitCritical>
				return pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	e069      	b.n	80042fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800422e:	f001 ffdd 	bl	80061ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004232:	2300      	movs	r3, #0
 8004234:	e062      	b.n	80042fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800423c:	f107 0310 	add.w	r3, r7, #16
 8004240:	4618      	mov	r0, r3
 8004242:	f000 ffc5 	bl	80051d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800424a:	f001 ffcf 	bl	80061ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800424e:	f000 fd35 	bl	8004cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004252:	f001 ff99 	bl	8006188 <vPortEnterCritical>
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800425c:	b25b      	sxtb	r3, r3
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004262:	d103      	bne.n	800426c <xQueueReceive+0x128>
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004278:	d103      	bne.n	8004282 <xQueueReceive+0x13e>
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004282:	f001 ffb3 	bl	80061ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004286:	1d3a      	adds	r2, r7, #4
 8004288:	f107 0310 	add.w	r3, r7, #16
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 ffb4 	bl	80051fc <xTaskCheckForTimeOut>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d123      	bne.n	80042e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800429c:	f000 fa3e 	bl	800471c <prvIsQueueEmpty>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d017      	beq.n	80042d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	3324      	adds	r3, #36	@ 0x24
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fed8 	bl	8005064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042b6:	f000 f9df 	bl	8004678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042ba:	f000 fd0d 	bl	8004cd8 <xTaskResumeAll>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d189      	bne.n	80041d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <xQueueReceive+0x1c0>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	e780      	b.n	80041d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042d8:	f000 f9ce 	bl	8004678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042dc:	f000 fcfc 	bl	8004cd8 <xTaskResumeAll>
 80042e0:	e77a      	b.n	80041d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042e4:	f000 f9c8 	bl	8004678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e8:	f000 fcf6 	bl	8004cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042ee:	f000 fa15 	bl	800471c <prvIsQueueEmpty>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f43f af6f 	beq.w	80041d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3730      	adds	r7, #48	@ 0x30
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	@ 0x38
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	623b      	str	r3, [r7, #32]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	61fb      	str	r3, [r7, #28]
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800435c:	f001 f8a4 	bl	80054a8 <xTaskGetSchedulerState>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <xQueueSemaphoreTake+0x64>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <xQueueSemaphoreTake+0x68>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <xQueueSemaphoreTake+0x6a>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	61bb      	str	r3, [r7, #24]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800438e:	f001 fefb 	bl	8006188 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80043ae:	f001 f9f5 	bl	800579c <pvTaskIncrementMutexHeldCount>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00f      	beq.n	80043e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c2:	3310      	adds	r3, #16
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe9f 	bl	8005108 <xTaskRemoveFromEventList>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043d0:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <xQueueSemaphoreTake+0x21c>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043e0:	f001 ff04 	bl	80061ec <vPortExitCritical>
				return pdPASS;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e098      	b.n	800451a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d112      	bne.n	8004414 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	617b      	str	r3, [r7, #20]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800440c:	f001 feee 	bl	80061ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004410:	2300      	movs	r3, #0
 8004412:	e082      	b.n	800451a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fed6 	bl	80051d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004428:	f001 fee0 	bl	80061ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800442c:	f000 fc46 	bl	8004cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004430:	f001 feaa 	bl	8006188 <vPortEnterCritical>
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800443a:	b25b      	sxtb	r3, r3
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004440:	d103      	bne.n	800444a <xQueueSemaphoreTake+0x142>
 8004442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004450:	b25b      	sxtb	r3, r3
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004456:	d103      	bne.n	8004460 <xQueueSemaphoreTake+0x158>
 8004458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004460:	f001 fec4 	bl	80061ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004464:	463a      	mov	r2, r7
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fec5 	bl	80051fc <xTaskCheckForTimeOut>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d132      	bne.n	80044de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800447a:	f000 f94f 	bl	800471c <prvIsQueueEmpty>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d026      	beq.n	80044d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800448c:	f001 fe7c 	bl	8006188 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f001 f825 	bl	80054e4 <xTaskPriorityInherit>
 800449a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800449c:	f001 fea6 	bl	80061ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	3324      	adds	r3, #36	@ 0x24
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fddb 	bl	8005064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044b0:	f000 f8e2 	bl	8004678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b4:	f000 fc10 	bl	8004cd8 <xTaskResumeAll>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f47f af67 	bne.w	800438e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80044c0:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <xQueueSemaphoreTake+0x21c>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	e75d      	b.n	800438e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044d4:	f000 f8d0 	bl	8004678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d8:	f000 fbfe 	bl	8004cd8 <xTaskResumeAll>
 80044dc:	e757      	b.n	800438e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044e0:	f000 f8ca 	bl	8004678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e4:	f000 fbf8 	bl	8004cd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044ea:	f000 f917 	bl	800471c <prvIsQueueEmpty>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f43f af4c 	beq.w	800438e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044fc:	f001 fe44 	bl	8006188 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004500:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004502:	f000 f811 	bl	8004528 <prvGetDisinheritPriorityAfterTimeout>
 8004506:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f8c0 	bl	8005694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004514:	f001 fe6a 	bl	80061ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004518:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800451a:	4618      	mov	r0, r3
 800451c:	3738      	adds	r7, #56	@ 0x38
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e001      	b.n	800454a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800454a:	68fb      	ldr	r3, [r7, #12]
	}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d14d      	bne.n	800461a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f816 	bl	80055b4 <xTaskPriorityDisinherit>
 8004588:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	e043      	b.n	800461a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d119      	bne.n	80045cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6858      	ldr	r0, [r3, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	461a      	mov	r2, r3
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	f003 f8d1 	bl	800774a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d32b      	bcc.n	800461a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e026      	b.n	800461a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68d8      	ldr	r0, [r3, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	461a      	mov	r2, r3
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	f003 f8b7 	bl	800774a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	425b      	negs	r3, r3
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d207      	bcs.n	8004608 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	425b      	negs	r3, r3
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d105      	bne.n	800461a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3b01      	subs	r3, #1
 8004618:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004622:	697b      	ldr	r3, [r7, #20]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d018      	beq.n	8004670 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d303      	bcc.n	8004660 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	461a      	mov	r2, r3
 800466a:	6838      	ldr	r0, [r7, #0]
 800466c:	f003 f86d 	bl	800774a <memcpy>
	}
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004680:	f001 fd82 	bl	8006188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800468a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800468c:	e011      	b.n	80046b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3324      	adds	r3, #36	@ 0x24
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fd34 	bl	8005108 <xTaskRemoveFromEventList>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046a6:	f000 fe0d 	bl	80052c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dce9      	bgt.n	800468e <prvUnlockQueue+0x16>
 80046ba:	e000      	b.n	80046be <prvUnlockQueue+0x46>
					break;
 80046bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	22ff      	movs	r2, #255	@ 0xff
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fd91 	bl	80061ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ca:	f001 fd5d 	bl	8006188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046d6:	e011      	b.n	80046fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3310      	adds	r3, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fd0f 	bl	8005108 <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046f0:	f000 fde8 	bl	80052c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004700:	2b00      	cmp	r3, #0
 8004702:	dce9      	bgt.n	80046d8 <prvUnlockQueue+0x60>
 8004704:	e000      	b.n	8004708 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004706:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	22ff      	movs	r2, #255	@ 0xff
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004710:	f001 fd6c 	bl	80061ec <vPortExitCritical>
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004724:	f001 fd30 	bl	8006188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e001      	b.n	800473a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800473a:	f001 fd57 	bl	80061ec <vPortExitCritical>

	return xReturn;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004750:	f001 fd1a 	bl	8006188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475c:	429a      	cmp	r2, r3
 800475e:	d102      	bne.n	8004766 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476a:	f001 fd3f 	bl	80061ec <vPortExitCritical>

	return xReturn;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e014      	b.n	80047b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004788:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <vQueueAddToRegistry+0x50>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004794:	490c      	ldr	r1, [pc, #48]	@ (80047c8 <vQueueAddToRegistry+0x50>)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800479e:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <vQueueAddToRegistry+0x50>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047aa:	e006      	b.n	80047ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d9e7      	bls.n	8004788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000928 	.word	0x20000928

080047cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047dc:	f001 fcd4 	bl	8006188 <vPortEnterCritical>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ec:	d103      	bne.n	80047f6 <vQueueWaitForMessageRestricted+0x2a>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004802:	d103      	bne.n	800480c <vQueueWaitForMessageRestricted+0x40>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480c:	f001 fcee 	bl	80061ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	3324      	adds	r3, #36	@ 0x24
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fc45 	bl	80050b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff26 	bl	8004678 <prvUnlockQueue>
	}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08e      	sub	sp, #56	@ 0x38
 8004838:	af04      	add	r7, sp, #16
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	623b      	str	r3, [r7, #32]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	61fb      	str	r3, [r7, #28]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800487e:	235c      	movs	r3, #92	@ 0x5c
 8004880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b5c      	cmp	r3, #92	@ 0x5c
 8004886:	d00b      	beq.n	80048a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61bb      	str	r3, [r7, #24]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01e      	beq.n	80048e6 <xTaskCreateStatic+0xb2>
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01b      	beq.n	80048e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048c0:	2300      	movs	r3, #0
 80048c2:	9303      	str	r3, [sp, #12]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f850 	bl	800497e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048e0:	f000 f8de 	bl	8004aa0 <prvAddNewTaskToReadyList>
 80048e4:	e001      	b.n	80048ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048ea:	697b      	ldr	r3, [r7, #20]
	}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3728      	adds	r7, #40	@ 0x28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	@ 0x30
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fd5f 	bl	80063cc <pvPortMalloc>
 800490e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004916:	205c      	movs	r0, #92	@ 0x5c
 8004918:	f001 fd58 	bl	80063cc <pvPortMalloc>
 800491c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
 800492a:	e005      	b.n	8004938 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800492c:	6978      	ldr	r0, [r7, #20]
 800492e:	f001 fe1b 	bl	8006568 <vPortFree>
 8004932:	e001      	b.n	8004938 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d017      	beq.n	800496e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	2300      	movs	r3, #0
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	9302      	str	r3, [sp, #8]
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f80e 	bl	800497e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004962:	69f8      	ldr	r0, [r7, #28]
 8004964:	f000 f89c 	bl	8004aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004968:	2301      	movs	r3, #1
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	e002      	b.n	8004974 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800496e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004972:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004974:	69bb      	ldr	r3, [r7, #24]
	}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b088      	sub	sp, #32
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	461a      	mov	r2, r3
 8004996:	21a5      	movs	r1, #165	@ 0xa5
 8004998:	f002 fe58 	bl	800764c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049a6:	3b01      	subs	r3, #1
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	617b      	str	r3, [r7, #20]
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01f      	beq.n	8004a1e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e012      	b.n	8004a0a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	7819      	ldrb	r1, [r3, #0]
 80049ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	3334      	adds	r3, #52	@ 0x34
 80049f4:	460a      	mov	r2, r1
 80049f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d9e9      	bls.n	80049e4 <prvInitialiseNewTask+0x66>
 8004a10:	e000      	b.n	8004a14 <prvInitialiseNewTask+0x96>
			{
				break;
 8004a12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a1c:	e003      	b.n	8004a26 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	2b37      	cmp	r3, #55	@ 0x37
 8004a2a:	d901      	bls.n	8004a30 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a2c:	2337      	movs	r3, #55	@ 0x37
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a34:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	2200      	movs	r2, #0
 8004a40:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	3304      	adds	r3, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe ff4a 	bl	80038e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	3318      	adds	r3, #24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe ff45 	bl	80038e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	2200      	movs	r2, #0
 8004a70:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f001 fa4e 	bl	8005f20 <pxPortInitialiseStack>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a96:	bf00      	nop
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004aa8:	f001 fb6e 	bl	8006188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aac:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <prvAddNewTaskToReadyList+0xc4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b64 <prvAddNewTaskToReadyList+0xc4>)
 8004ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b68 <prvAddNewTaskToReadyList+0xc8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004abe:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <prvAddNewTaskToReadyList+0xc8>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ac4:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <prvAddNewTaskToReadyList+0xc4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d110      	bne.n	8004aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004acc:	f000 fc1e 	bl	800530c <prvInitialiseTaskLists>
 8004ad0:	e00d      	b.n	8004aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ad2:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <prvAddNewTaskToReadyList+0xcc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ada:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <prvAddNewTaskToReadyList+0xc8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d802      	bhi.n	8004aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <prvAddNewTaskToReadyList+0xc8>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aee:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <prvAddNewTaskToReadyList+0xd0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <prvAddNewTaskToReadyList+0xd0>)
 8004af6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <prvAddNewTaskToReadyList+0xd0>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <prvAddNewTaskToReadyList+0xd4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <prvAddNewTaskToReadyList+0x74>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <prvAddNewTaskToReadyList+0xd4>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <prvAddNewTaskToReadyList+0xd8>)
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe fee5 	bl	80038fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b30:	f001 fb5c 	bl	80061ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <prvAddNewTaskToReadyList+0xcc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <prvAddNewTaskToReadyList+0xc8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d207      	bcs.n	8004b5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <prvAddNewTaskToReadyList+0xdc>)
 8004b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000e3c 	.word	0x20000e3c
 8004b68:	20000968 	.word	0x20000968
 8004b6c:	20000e48 	.word	0x20000e48
 8004b70:	20000e58 	.word	0x20000e58
 8004b74:	20000e44 	.word	0x20000e44
 8004b78:	2000096c 	.word	0x2000096c
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b92:	4b14      	ldr	r3, [pc, #80]	@ (8004be4 <vTaskDelay+0x64>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <vTaskDelay+0x32>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bb2:	f000 f883 	bl	8004cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fe03 	bl	80057c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bbe:	f000 f88b 	bl	8004cd8 <xTaskResumeAll>
 8004bc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004bca:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <vTaskDelay+0x68>)
 8004bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000e64 	.word	0x20000e64
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	@ 0x28
 8004bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bfa:	463a      	mov	r2, r7
 8004bfc:	1d39      	adds	r1, r7, #4
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fe18 	bl	8003838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	9202      	str	r2, [sp, #8]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	460a      	mov	r2, r1
 8004c1a:	4922      	ldr	r1, [pc, #136]	@ (8004ca4 <vTaskStartScheduler+0xb8>)
 8004c1c:	4822      	ldr	r0, [pc, #136]	@ (8004ca8 <vTaskStartScheduler+0xbc>)
 8004c1e:	f7ff fe09 	bl	8004834 <xTaskCreateStatic>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <vTaskStartScheduler+0xc0>)
 8004c26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c28:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <vTaskStartScheduler+0xc0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e001      	b.n	8004c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d102      	bne.n	8004c46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c40:	f000 fe14 	bl	800586c <xTimerCreateTimerTask>
 8004c44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d116      	bne.n	8004c7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
}
 8004c5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c60:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <vTaskStartScheduler+0xc4>)
 8004c62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c68:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <vTaskStartScheduler+0xc8>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <vTaskStartScheduler+0xcc>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c74:	f001 f9e4 	bl	8006040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c78:	e00f      	b.n	8004c9a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c80:	d10b      	bne.n	8004c9a <vTaskStartScheduler+0xae>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <vTaskStartScheduler+0xaa>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08009a14 	.word	0x08009a14
 8004ca8:	080052dd 	.word	0x080052dd
 8004cac:	20000e60 	.word	0x20000e60
 8004cb0:	20000e5c 	.word	0x20000e5c
 8004cb4:	20000e48 	.word	0x20000e48
 8004cb8:	20000e40 	.word	0x20000e40

08004cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <vTaskSuspendAll+0x18>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a03      	ldr	r2, [pc, #12]	@ (8004cd4 <vTaskSuspendAll+0x18>)
 8004cc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cca:	bf00      	nop
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20000e64 	.word	0x20000e64

08004cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ce6:	4b42      	ldr	r3, [pc, #264]	@ (8004df0 <xTaskResumeAll+0x118>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <xTaskResumeAll+0x2e>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	603b      	str	r3, [r7, #0]
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d06:	f001 fa3f 	bl	8006188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d0a:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <xTaskResumeAll+0x118>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a37      	ldr	r2, [pc, #220]	@ (8004df0 <xTaskResumeAll+0x118>)
 8004d12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d14:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <xTaskResumeAll+0x118>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d162      	bne.n	8004de2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d1c:	4b35      	ldr	r3, [pc, #212]	@ (8004df4 <xTaskResumeAll+0x11c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d05e      	beq.n	8004de2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d24:	e02f      	b.n	8004d86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <xTaskResumeAll+0x120>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3318      	adds	r3, #24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fe3e 	bl	80039b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fe39 	bl	80039b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <xTaskResumeAll+0x124>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d903      	bls.n	8004d56 <xTaskResumeAll+0x7e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <xTaskResumeAll+0x124>)
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <xTaskResumeAll+0x128>)
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7fe fdc4 	bl	80038fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d76:	4b23      	ldr	r3, [pc, #140]	@ (8004e04 <xTaskResumeAll+0x12c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d80:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <xTaskResumeAll+0x130>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d86:	4b1c      	ldr	r3, [pc, #112]	@ (8004df8 <xTaskResumeAll+0x120>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cb      	bne.n	8004d26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d94:	f000 fb58 	bl	8005448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <xTaskResumeAll+0x134>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004da4:	f000 f846 	bl	8004e34 <xTaskIncrementTick>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004dae:	4b16      	ldr	r3, [pc, #88]	@ (8004e08 <xTaskResumeAll+0x130>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f1      	bne.n	8004da4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004dc0:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <xTaskResumeAll+0x134>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <xTaskResumeAll+0x130>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <xTaskResumeAll+0x138>)
 8004dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004de2:	f001 fa03 	bl	80061ec <vPortExitCritical>

	return xAlreadyYielded;
 8004de6:	68bb      	ldr	r3, [r7, #8]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000e64 	.word	0x20000e64
 8004df4:	20000e3c 	.word	0x20000e3c
 8004df8:	20000dfc 	.word	0x20000dfc
 8004dfc:	20000e44 	.word	0x20000e44
 8004e00:	2000096c 	.word	0x2000096c
 8004e04:	20000968 	.word	0x20000968
 8004e08:	20000e50 	.word	0x20000e50
 8004e0c:	20000e4c 	.word	0x20000e4c
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <xTaskGetTickCount+0x1c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e20:	687b      	ldr	r3, [r7, #4]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000e40 	.word	0x20000e40

08004e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <xTaskIncrementTick+0x148>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 8090 	bne.w	8004f68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e48:	4b4d      	ldr	r3, [pc, #308]	@ (8004f80 <xTaskIncrementTick+0x14c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e50:	4a4b      	ldr	r2, [pc, #300]	@ (8004f80 <xTaskIncrementTick+0x14c>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d121      	bne.n	8004ea0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e5c:	4b49      	ldr	r3, [pc, #292]	@ (8004f84 <xTaskIncrementTick+0x150>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	603b      	str	r3, [r7, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <xTaskIncrementTick+0x46>
 8004e7e:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <xTaskIncrementTick+0x150>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	4b40      	ldr	r3, [pc, #256]	@ (8004f88 <xTaskIncrementTick+0x154>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3e      	ldr	r2, [pc, #248]	@ (8004f84 <xTaskIncrementTick+0x150>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f88 <xTaskIncrementTick+0x154>)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <xTaskIncrementTick+0x158>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	4a3c      	ldr	r2, [pc, #240]	@ (8004f8c <xTaskIncrementTick+0x158>)
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	f000 fad4 	bl	8005448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <xTaskIncrementTick+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d349      	bcc.n	8004f3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <xTaskIncrementTick+0x150>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb4:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <xTaskIncrementTick+0x15c>)
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eba:	601a      	str	r2, [r3, #0]
					break;
 8004ebc:	e03f      	b.n	8004f3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ebe:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <xTaskIncrementTick+0x150>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d203      	bcs.n	8004ede <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <xTaskIncrementTick+0x15c>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004edc:	e02f      	b.n	8004f3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fd66 	bl	80039b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe fd5d 	bl	80039b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <xTaskIncrementTick+0x160>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d903      	bls.n	8004f0e <xTaskIncrementTick+0xda>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <xTaskIncrementTick+0x160>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f98 <xTaskIncrementTick+0x164>)
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7fe fce8 	bl	80038fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f9c <xTaskIncrementTick+0x168>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d3b8      	bcc.n	8004eaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3c:	e7b5      	b.n	8004eaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f3e:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <xTaskIncrementTick+0x168>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f44:	4914      	ldr	r1, [pc, #80]	@ (8004f98 <xTaskIncrementTick+0x164>)
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d901      	bls.n	8004f5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f5a:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <xTaskIncrementTick+0x16c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e004      	b.n	8004f72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <xTaskIncrementTick+0x170>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa4 <xTaskIncrementTick+0x170>)
 8004f70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000e64 	.word	0x20000e64
 8004f80:	20000e40 	.word	0x20000e40
 8004f84:	20000df4 	.word	0x20000df4
 8004f88:	20000df8 	.word	0x20000df8
 8004f8c:	20000e54 	.word	0x20000e54
 8004f90:	20000e5c 	.word	0x20000e5c
 8004f94:	20000e44 	.word	0x20000e44
 8004f98:	2000096c 	.word	0x2000096c
 8004f9c:	20000968 	.word	0x20000968
 8004fa0:	20000e50 	.word	0x20000e50
 8004fa4:	20000e4c 	.word	0x20000e4c

08004fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fae:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <vTaskSwitchContext+0xa8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fb6:	4b27      	ldr	r3, [pc, #156]	@ (8005054 <vTaskSwitchContext+0xac>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fbc:	e042      	b.n	8005044 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004fbe:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <vTaskSwitchContext+0xac>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fc4:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <vTaskSwitchContext+0xb0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e011      	b.n	8004ff0 <vTaskSwitchContext+0x48>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <vTaskSwitchContext+0x42>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	607b      	str	r3, [r7, #4]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <vTaskSwitchContext+0x3e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	491a      	ldr	r1, [pc, #104]	@ (800505c <vTaskSwitchContext+0xb4>)
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0e3      	beq.n	8004fcc <vTaskSwitchContext+0x24>
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4a13      	ldr	r2, [pc, #76]	@ (800505c <vTaskSwitchContext+0xb4>)
 8005010:	4413      	add	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3308      	adds	r3, #8
 8005026:	429a      	cmp	r2, r3
 8005028:	d104      	bne.n	8005034 <vTaskSwitchContext+0x8c>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vTaskSwitchContext+0xb8>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4a06      	ldr	r2, [pc, #24]	@ (8005058 <vTaskSwitchContext+0xb0>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000e64 	.word	0x20000e64
 8005054:	20000e50 	.word	0x20000e50
 8005058:	20000e44 	.word	0x20000e44
 800505c:	2000096c 	.word	0x2000096c
 8005060:	20000968 	.word	0x20000968

08005064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <vTaskPlaceOnEventList+0x48>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3318      	adds	r3, #24
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fe fc54 	bl	8003942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800509a:	2101      	movs	r1, #1
 800509c:	6838      	ldr	r0, [r7, #0]
 800509e:	f000 fb91 	bl	80057c4 <prvAddCurrentTaskToDelayedList>
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000968 	.word	0x20000968

080050b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	617b      	str	r3, [r7, #20]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050da:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <vTaskPlaceOnEventListRestricted+0x54>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3318      	adds	r3, #24
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7fe fc09 	bl	80038fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f000 fb64 	bl	80057c4 <prvAddCurrentTaskToDelayedList>
	}
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000968 	.word	0x20000968

08005108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60fb      	str	r3, [r7, #12]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3318      	adds	r3, #24
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fc3a 	bl	80039b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005140:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <xTaskRemoveFromEventList+0xb0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11d      	bne.n	8005184 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe fc31 	bl	80039b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005156:	4b19      	ldr	r3, [pc, #100]	@ (80051bc <xTaskRemoveFromEventList+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <xTaskRemoveFromEventList+0x5e>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <xTaskRemoveFromEventList+0xb4>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <xTaskRemoveFromEventList+0xb8>)
 8005174:	441a      	add	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7fe fbbc 	bl	80038fa <vListInsertEnd>
 8005182:	e005      	b.n	8005190 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	3318      	adds	r3, #24
 8005188:	4619      	mov	r1, r3
 800518a:	480e      	ldr	r0, [pc, #56]	@ (80051c4 <xTaskRemoveFromEventList+0xbc>)
 800518c:	f7fe fbb5 	bl	80038fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <xTaskRemoveFromEventList+0xc0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	429a      	cmp	r2, r3
 800519c:	d905      	bls.n	80051aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800519e:	2301      	movs	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051a2:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <xTaskRemoveFromEventList+0xc4>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e001      	b.n	80051ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000e64 	.word	0x20000e64
 80051bc:	20000e44 	.word	0x20000e44
 80051c0:	2000096c 	.word	0x2000096c
 80051c4:	20000dfc 	.word	0x20000dfc
 80051c8:	20000968 	.word	0x20000968
 80051cc:	20000e50 	.word	0x20000e50

080051d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <vTaskInternalSetTimeOutState+0x24>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <vTaskInternalSetTimeOutState+0x28>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	605a      	str	r2, [r3, #4]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	20000e54 	.word	0x20000e54
 80051f8:	20000e40 	.word	0x20000e40

080051fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	613b      	str	r3, [r7, #16]
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60fb      	str	r3, [r7, #12]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005242:	f000 ffa1 	bl	8006188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005246:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <xTaskCheckForTimeOut+0xc0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800525e:	d102      	bne.n	8005266 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e023      	b.n	80052ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <xTaskCheckForTimeOut+0xc4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d007      	beq.n	8005282 <xTaskCheckForTimeOut+0x86>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e015      	b.n	80052ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	d20b      	bcs.n	80052a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff99 	bl	80051d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e004      	b.n	80052ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052ae:	f000 ff9d 	bl	80061ec <vPortExitCritical>

	return xReturn;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000e40 	.word	0x20000e40
 80052c0:	20000e54 	.word	0x20000e54

080052c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052c8:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <vTaskMissedYield+0x14>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	20000e50 	.word	0x20000e50

080052dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052e4:	f000 f852 	bl	800538c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <prvIdleTask+0x28>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d9f9      	bls.n	80052e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <prvIdleTask+0x2c>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005300:	e7f0      	b.n	80052e4 <prvIdleTask+0x8>
 8005302:	bf00      	nop
 8005304:	2000096c 	.word	0x2000096c
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	e00c      	b.n	8005332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a12      	ldr	r2, [pc, #72]	@ (800536c <prvInitialiseTaskLists+0x60>)
 8005324:	4413      	add	r3, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe faba 	bl	80038a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b37      	cmp	r3, #55	@ 0x37
 8005336:	d9ef      	bls.n	8005318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005338:	480d      	ldr	r0, [pc, #52]	@ (8005370 <prvInitialiseTaskLists+0x64>)
 800533a:	f7fe fab1 	bl	80038a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800533e:	480d      	ldr	r0, [pc, #52]	@ (8005374 <prvInitialiseTaskLists+0x68>)
 8005340:	f7fe faae 	bl	80038a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005344:	480c      	ldr	r0, [pc, #48]	@ (8005378 <prvInitialiseTaskLists+0x6c>)
 8005346:	f7fe faab 	bl	80038a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800534a:	480c      	ldr	r0, [pc, #48]	@ (800537c <prvInitialiseTaskLists+0x70>)
 800534c:	f7fe faa8 	bl	80038a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005350:	480b      	ldr	r0, [pc, #44]	@ (8005380 <prvInitialiseTaskLists+0x74>)
 8005352:	f7fe faa5 	bl	80038a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <prvInitialiseTaskLists+0x78>)
 8005358:	4a05      	ldr	r2, [pc, #20]	@ (8005370 <prvInitialiseTaskLists+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <prvInitialiseTaskLists+0x7c>)
 800535e:	4a05      	ldr	r2, [pc, #20]	@ (8005374 <prvInitialiseTaskLists+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2000096c 	.word	0x2000096c
 8005370:	20000dcc 	.word	0x20000dcc
 8005374:	20000de0 	.word	0x20000de0
 8005378:	20000dfc 	.word	0x20000dfc
 800537c:	20000e10 	.word	0x20000e10
 8005380:	20000e28 	.word	0x20000e28
 8005384:	20000df4 	.word	0x20000df4
 8005388:	20000df8 	.word	0x20000df8

0800538c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005392:	e019      	b.n	80053c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005394:	f000 fef8 	bl	8006188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <prvCheckTasksWaitingTermination+0x50>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fb05 	bl	80039b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053aa:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a0b      	ldr	r2, [pc, #44]	@ (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4a0a      	ldr	r2, [pc, #40]	@ (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053be:	f000 ff15 	bl	80061ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f810 	bl	80053e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053c8:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e1      	bne.n	8005394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000e10 	.word	0x20000e10
 80053e0:	20000e3c 	.word	0x20000e3c
 80053e4:	20000e24 	.word	0x20000e24

080053e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f8b2 	bl	8006568 <vPortFree>
				vPortFree( pxTCB );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f8af 	bl	8006568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800540a:	e019      	b.n	8005440 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005412:	2b01      	cmp	r3, #1
 8005414:	d103      	bne.n	800541e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f8a6 	bl	8006568 <vPortFree>
	}
 800541c:	e010      	b.n	8005440 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005424:	2b02      	cmp	r3, #2
 8005426:	d00b      	beq.n	8005440 <prvDeleteTCB+0x58>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <prvDeleteTCB+0x54>
	}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800545e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005460:	e008      	b.n	8005474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000df4 	.word	0x20000df4
 8005484:	20000e5c 	.word	0x20000e5c

08005488 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005494:	687b      	ldr	r3, [r7, #4]
	}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000968 	.word	0x20000968

080054a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054ae:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <xTaskGetSchedulerState+0x34>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054b6:	2301      	movs	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	e008      	b.n	80054ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054bc:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <xTaskGetSchedulerState+0x38>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054c4:	2302      	movs	r3, #2
 80054c6:	607b      	str	r3, [r7, #4]
 80054c8:	e001      	b.n	80054ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ce:	687b      	ldr	r3, [r7, #4]
	}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000e48 	.word	0x20000e48
 80054e0:	20000e64 	.word	0x20000e64

080054e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d051      	beq.n	800559e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fe:	4b2a      	ldr	r3, [pc, #168]	@ (80055a8 <xTaskPriorityInherit+0xc4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d241      	bcs.n	800558c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db06      	blt.n	800551e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005510:	4b25      	ldr	r3, [pc, #148]	@ (80055a8 <xTaskPriorityInherit+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6959      	ldr	r1, [r3, #20]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ac <xTaskPriorityInherit+0xc8>)
 8005530:	4413      	add	r3, r2
 8005532:	4299      	cmp	r1, r3
 8005534:	d122      	bne.n	800557c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3304      	adds	r3, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fa3a 	bl	80039b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <xTaskPriorityInherit+0xc4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	4b18      	ldr	r3, [pc, #96]	@ (80055b0 <xTaskPriorityInherit+0xcc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d903      	bls.n	800555e <xTaskPriorityInherit+0x7a>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <xTaskPriorityInherit+0xcc>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4a10      	ldr	r2, [pc, #64]	@ (80055ac <xTaskPriorityInherit+0xc8>)
 800556c:	441a      	add	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fe f9c0 	bl	80038fa <vListInsertEnd>
 800557a:	e004      	b.n	8005586 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800557c:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <xTaskPriorityInherit+0xc4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e008      	b.n	800559e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <xTaskPriorityInherit+0xc4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	429a      	cmp	r2, r3
 8005598:	d201      	bcs.n	800559e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800559a:	2301      	movs	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800559e:	68fb      	ldr	r3, [r7, #12]
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000968 	.word	0x20000968
 80055ac:	2000096c 	.word	0x2000096c
 80055b0:	20000e44 	.word	0x20000e44

080055b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d058      	beq.n	800567c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <xTaskPriorityDisinherit+0xd4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d00b      	beq.n	80055ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60bb      	str	r3, [r7, #8]
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	429a      	cmp	r2, r3
 8005620:	d02c      	beq.n	800567c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	2b00      	cmp	r3, #0
 8005628:	d128      	bne.n	800567c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe f9c0 	bl	80039b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564c:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <xTaskPriorityDisinherit+0xd8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <xTaskPriorityDisinherit+0xa8>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a0c      	ldr	r2, [pc, #48]	@ (800568c <xTaskPriorityDisinherit+0xd8>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a09      	ldr	r2, [pc, #36]	@ (8005690 <xTaskPriorityDisinherit+0xdc>)
 800566a:	441a      	add	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fe f941 	bl	80038fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800567c:	697b      	ldr	r3, [r7, #20]
	}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000968 	.word	0x20000968
 800568c:	20000e44 	.word	0x20000e44
 8005690:	2000096c 	.word	0x2000096c

08005694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d06c      	beq.n	8005786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d902      	bls.n	80056dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e002      	b.n	80056e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d04c      	beq.n	8005786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d147      	bne.n	8005786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80056f6:	4b26      	ldr	r3, [pc, #152]	@ (8005790 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10b      	bne.n	8005718 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	60bb      	str	r3, [r7, #8]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	db04      	blt.n	8005736 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005746:	4413      	add	r3, r2
 8005748:	4299      	cmp	r1, r3
 800574a:	d11c      	bne.n	8005786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe f92f 	bl	80039b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d903      	bls.n	800576a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	4a0c      	ldr	r2, [pc, #48]	@ (8005798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4a07      	ldr	r2, [pc, #28]	@ (8005794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005778:	441a      	add	r2, r3
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fe f8ba 	bl	80038fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005786:	bf00      	nop
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000968 	.word	0x20000968
 8005794:	2000096c 	.word	0x2000096c
 8005798:	20000e44 	.word	0x20000e44

0800579c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057ae:	3201      	adds	r2, #1
 80057b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80057b2:	4b03      	ldr	r3, [pc, #12]	@ (80057c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80057b4:	681b      	ldr	r3, [r3, #0]
	}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000968 	.word	0x20000968

080057c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057ce:	4b21      	ldr	r3, [pc, #132]	@ (8005854 <prvAddCurrentTaskToDelayedList+0x90>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d4:	4b20      	ldr	r3, [pc, #128]	@ (8005858 <prvAddCurrentTaskToDelayedList+0x94>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3304      	adds	r3, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe f8ea 	bl	80039b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e6:	d10a      	bne.n	80057fe <prvAddCurrentTaskToDelayedList+0x3a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <prvAddCurrentTaskToDelayedList+0x94>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4819      	ldr	r0, [pc, #100]	@ (800585c <prvAddCurrentTaskToDelayedList+0x98>)
 80057f8:	f7fe f87f 	bl	80038fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057fc:	e026      	b.n	800584c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005806:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <prvAddCurrentTaskToDelayedList+0x94>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	429a      	cmp	r2, r3
 8005814:	d209      	bcs.n	800582a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005816:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <prvAddCurrentTaskToDelayedList+0x94>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe f88d 	bl	8003942 <vListInsert>
}
 8005828:	e010      	b.n	800584c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800582a:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <prvAddCurrentTaskToDelayedList+0x94>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe f883 	bl	8003942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d202      	bcs.n	800584c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005846:	4a08      	ldr	r2, [pc, #32]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000e40 	.word	0x20000e40
 8005858:	20000968 	.word	0x20000968
 800585c:	20000e28 	.word	0x20000e28
 8005860:	20000df8 	.word	0x20000df8
 8005864:	20000df4 	.word	0x20000df4
 8005868:	20000e5c 	.word	0x20000e5c

0800586c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	@ 0x28
 8005870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005876:	f000 fb13 	bl	8005ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800587a:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <xTimerCreateTimerTask+0x84>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d021      	beq.n	80058c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800588a:	1d3a      	adds	r2, r7, #4
 800588c:	f107 0108 	add.w	r1, r7, #8
 8005890:	f107 030c 	add.w	r3, r7, #12
 8005894:	4618      	mov	r0, r3
 8005896:	f7fd ffe9 	bl	800386c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	9202      	str	r2, [sp, #8]
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	2302      	movs	r3, #2
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	460a      	mov	r2, r1
 80058ac:	4911      	ldr	r1, [pc, #68]	@ (80058f4 <xTimerCreateTimerTask+0x88>)
 80058ae:	4812      	ldr	r0, [pc, #72]	@ (80058f8 <xTimerCreateTimerTask+0x8c>)
 80058b0:	f7fe ffc0 	bl	8004834 <xTaskCreateStatic>
 80058b4:	4603      	mov	r3, r0
 80058b6:	4a11      	ldr	r2, [pc, #68]	@ (80058fc <xTimerCreateTimerTask+0x90>)
 80058b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ba:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <xTimerCreateTimerTask+0x90>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058c2:	2301      	movs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	613b      	str	r3, [r7, #16]
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	e7fd      	b.n	80058e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058e4:	697b      	ldr	r3, [r7, #20]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000e98 	.word	0x20000e98
 80058f4:	08009a1c 	.word	0x08009a1c
 80058f8:	08005a39 	.word	0x08005a39
 80058fc:	20000e9c 	.word	0x20000e9c

08005900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	@ 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <xTimerGenericCommand+0x30>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	623b      	str	r3, [r7, #32]
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	e7fd      	b.n	800592c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005930:	4b19      	ldr	r3, [pc, #100]	@ (8005998 <xTimerGenericCommand+0x98>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d02a      	beq.n	800598e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b05      	cmp	r3, #5
 8005948:	dc18      	bgt.n	800597c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800594a:	f7ff fdad 	bl	80054a8 <xTaskGetSchedulerState>
 800594e:	4603      	mov	r3, r0
 8005950:	2b02      	cmp	r3, #2
 8005952:	d109      	bne.n	8005968 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005954:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <xTimerGenericCommand+0x98>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	f107 0110 	add.w	r1, r7, #16
 800595c:	2300      	movs	r3, #0
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	f7fe fa50 	bl	8003e04 <xQueueGenericSend>
 8005964:	6278      	str	r0, [r7, #36]	@ 0x24
 8005966:	e012      	b.n	800598e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005968:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <xTimerGenericCommand+0x98>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f107 0110 	add.w	r1, r7, #16
 8005970:	2300      	movs	r3, #0
 8005972:	2200      	movs	r2, #0
 8005974:	f7fe fa46 	bl	8003e04 <xQueueGenericSend>
 8005978:	6278      	str	r0, [r7, #36]	@ 0x24
 800597a:	e008      	b.n	800598e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <xTimerGenericCommand+0x98>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	f107 0110 	add.w	r1, r7, #16
 8005984:	2300      	movs	r3, #0
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	f7fe fb3e 	bl	8004008 <xQueueGenericSendFromISR>
 800598c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005990:	4618      	mov	r0, r3
 8005992:	3728      	adds	r7, #40	@ 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000e98 	.word	0x20000e98

0800599c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a6:	4b23      	ldr	r3, [pc, #140]	@ (8005a34 <prvProcessExpiredTimer+0x98>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd fffd 	bl	80039b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d023      	beq.n	8005a10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	18d1      	adds	r1, r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f000 f8d5 	bl	8005b84 <prvInsertTimerInActiveList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d020      	beq.n	8005a22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059e0:	2300      	movs	r3, #0
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	2100      	movs	r1, #0
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff88 	bl	8005900 <xTimerGenericCommand>
 80059f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d114      	bne.n	8005a22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	e7fd      	b.n	8005a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	4798      	blx	r3
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000e90 	.word	0x20000e90

08005a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 f859 	bl	8005afc <prvGetNextExpireTime>
 8005a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f805 	bl	8005a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a56:	f000 f8d7 	bl	8005c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a5a:	bf00      	nop
 8005a5c:	e7f0      	b.n	8005a40 <prvTimerTask+0x8>
	...

08005a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a6a:	f7ff f927 	bl	8004cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f866 	bl	8005b44 <prvSampleTimeNow>
 8005a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d130      	bne.n	8005ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <prvProcessTimerOrBlockTask+0x3c>
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d806      	bhi.n	8005a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a8e:	f7ff f923 	bl	8004cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ff81 	bl	800599c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a9a:	e024      	b.n	8005ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <prvProcessTimerOrBlockTask+0x90>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <prvProcessTimerOrBlockTask+0x50>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <prvProcessTimerOrBlockTask+0x52>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <prvProcessTimerOrBlockTask+0x94>)
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f7fe fe83 	bl	80047cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ac6:	f7ff f907 	bl	8004cd8 <xTaskResumeAll>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ad0:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <prvProcessTimerOrBlockTask+0x98>)
 8005ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
}
 8005ae0:	e001      	b.n	8005ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ae2:	f7ff f8f9 	bl	8004cd8 <xTaskResumeAll>
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000e94 	.word	0x20000e94
 8005af4:	20000e98 	.word	0x20000e98
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <prvGetNextExpireTime+0x44>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <prvGetNextExpireTime+0x16>
 8005b0e:	2201      	movs	r2, #1
 8005b10:	e000      	b.n	8005b14 <prvGetNextExpireTime+0x18>
 8005b12:	2200      	movs	r2, #0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b20:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <prvGetNextExpireTime+0x44>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e001      	b.n	8005b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000e90 	.word	0x20000e90

08005b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b4c:	f7ff f962 	bl	8004e14 <xTaskGetTickCount>
 8005b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b52:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <prvSampleTimeNow+0x3c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d205      	bcs.n	8005b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b5c:	f000 f93a 	bl	8005dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e002      	b.n	8005b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b6e:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <prvSampleTimeNow+0x3c>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000ea0 	.word	0x20000ea0

08005b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d812      	bhi.n	8005bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e01b      	b.n	8005bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bbe:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <prvInsertTimerInActiveList+0x7c>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f7fd feba 	bl	8003942 <vListInsert>
 8005bce:	e012      	b.n	8005bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d206      	bcs.n	8005be6 <prvInsertTimerInActiveList+0x62>
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e007      	b.n	8005bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <prvInsertTimerInActiveList+0x80>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7fd fea6 	bl	8003942 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bf6:	697b      	ldr	r3, [r7, #20]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000e94 	.word	0x20000e94
 8005c04:	20000e90 	.word	0x20000e90

08005c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	@ 0x38
 8005c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c0e:	e0ce      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da19      	bge.n	8005c4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	3304      	adds	r3, #4
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61fb      	str	r3, [r7, #28]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c40:	6850      	ldr	r0, [r2, #4]
 8005c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f2c0 80ae 	blt.w	8005dae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fd fea6 	bl	80039b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c68:	463b      	mov	r3, r7
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff ff6a 	bl	8005b44 <prvSampleTimeNow>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b09      	cmp	r3, #9
 8005c76:	f200 8097 	bhi.w	8005da8 <prvProcessReceivedCommands+0x1a0>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <prvProcessReceivedCommands+0x78>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005d1f 	.word	0x08005d1f
 8005c90:	08005d33 	.word	0x08005d33
 8005c94:	08005d7f 	.word	0x08005d7f
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005ca9 	.word	0x08005ca9
 8005ca0:	08005d1f 	.word	0x08005d1f
 8005ca4:	08005d33 	.word	0x08005d33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cae:	f043 0301 	orr.w	r3, r3, #1
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	18d1      	adds	r1, r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc8:	f7ff ff5c 	bl	8005b84 <prvInsertTimerInActiveList>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d06c      	beq.n	8005dac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d061      	beq.n	8005dac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	441a      	add	r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cfa:	f7ff fe01 	bl	8005900 <xTimerGenericCommand>
 8005cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d152      	bne.n	8005dac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61bb      	str	r3, [r7, #24]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d30:	e03d      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	617b      	str	r3, [r7, #20]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	18d1      	adds	r1, r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d78:	f7ff ff04 	bl	8005b84 <prvInsertTimerInActiveList>
					break;
 8005d7c:	e017      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d8e:	f000 fbeb 	bl	8006568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d92:	e00c      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005da6:	e002      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <prvProcessReceivedCommands+0x1a6>
					break;
 8005dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <prvProcessReceivedCommands+0x1c8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1d39      	adds	r1, r7, #4
 8005db4:	2200      	movs	r2, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f9c4 	bl	8004144 <xQueueReceive>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f47f af26 	bne.w	8005c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3730      	adds	r7, #48	@ 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000e98 	.word	0x20000e98

08005dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dda:	e049      	b.n	8005e70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fd fddd 	bl	80039b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02f      	beq.n	8005e70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d90e      	bls.n	8005e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fd fd82 	bl	8003942 <vListInsert>
 8005e3e:	e017      	b.n	8005e70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e40:	2300      	movs	r3, #0
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fd58 	bl	8005900 <xTimerGenericCommand>
 8005e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	603b      	str	r3, [r7, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e70:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1b0      	bne.n	8005ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e7a:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e80:	4b06      	ldr	r3, [pc, #24]	@ (8005e9c <prvSwitchTimerLists+0xc8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e88:	4a04      	ldr	r2, [pc, #16]	@ (8005e9c <prvSwitchTimerLists+0xc8>)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6013      	str	r3, [r2, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000e90 	.word	0x20000e90
 8005e9c:	20000e94 	.word	0x20000e94

08005ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ea6:	f000 f96f 	bl	8006188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eaa:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <prvCheckForValidListAndQueue+0x60>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d120      	bne.n	8005ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eb2:	4814      	ldr	r0, [pc, #80]	@ (8005f04 <prvCheckForValidListAndQueue+0x64>)
 8005eb4:	f7fd fcf4 	bl	80038a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005eb8:	4813      	ldr	r0, [pc, #76]	@ (8005f08 <prvCheckForValidListAndQueue+0x68>)
 8005eba:	f7fd fcf1 	bl	80038a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	@ (8005f0c <prvCheckForValidListAndQueue+0x6c>)
 8005ec0:	4a10      	ldr	r2, [pc, #64]	@ (8005f04 <prvCheckForValidListAndQueue+0x64>)
 8005ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ec4:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <prvCheckForValidListAndQueue+0x70>)
 8005ec6:	4a10      	ldr	r2, [pc, #64]	@ (8005f08 <prvCheckForValidListAndQueue+0x68>)
 8005ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <prvCheckForValidListAndQueue+0x74>)
 8005ed0:	4a11      	ldr	r2, [pc, #68]	@ (8005f18 <prvCheckForValidListAndQueue+0x78>)
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	200a      	movs	r0, #10
 8005ed6:	f7fd fe01 	bl	8003adc <xQueueGenericCreateStatic>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a08      	ldr	r2, [pc, #32]	@ (8005f00 <prvCheckForValidListAndQueue+0x60>)
 8005ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ee0:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <prvCheckForValidListAndQueue+0x60>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ee8:	4b05      	ldr	r3, [pc, #20]	@ (8005f00 <prvCheckForValidListAndQueue+0x60>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	490b      	ldr	r1, [pc, #44]	@ (8005f1c <prvCheckForValidListAndQueue+0x7c>)
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fc42 	bl	8004778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ef4:	f000 f97a 	bl	80061ec <vPortExitCritical>
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000e98 	.word	0x20000e98
 8005f04:	20000e68 	.word	0x20000e68
 8005f08:	20000e7c 	.word	0x20000e7c
 8005f0c:	20000e90 	.word	0x20000e90
 8005f10:	20000e94 	.word	0x20000e94
 8005f14:	20000f44 	.word	0x20000f44
 8005f18:	20000ea4 	.word	0x20000ea4
 8005f1c:	08009a24 	.word	0x08009a24

08005f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b04      	subs	r3, #4
 8005f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b04      	subs	r3, #4
 8005f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0201 	bic.w	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f50:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <pxPortInitialiseStack+0x64>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b14      	subs	r3, #20
 8005f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f06f 0202 	mvn.w	r2, #2
 8005f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3b20      	subs	r3, #32
 8005f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	08005f89 	.word	0x08005f89

08005f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f92:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <prvTaskExitError+0x58>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f9a:	d00b      	beq.n	8005fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <prvTaskExitError+0x28>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60bb      	str	r3, [r7, #8]
}
 8005fc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fc8:	bf00      	nop
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0fc      	beq.n	8005fca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	2000000c 	.word	0x2000000c
	...

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	4770      	bx	lr
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst2>:
 8006010:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006018:	4808      	ldr	r0, [pc, #32]	@ (800603c <prvPortStartFirstTask+0x24>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8814 	msr	CONTROL, r0
 800602a:	b662      	cpsie	i
 800602c:	b661      	cpsie	f
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	df00      	svc	0
 8006038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800603a:	bf00      	nop
 800603c:	e000ed08 	.word	0xe000ed08

08006040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006046:	4b47      	ldr	r3, [pc, #284]	@ (8006164 <xPortStartScheduler+0x124>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a47      	ldr	r2, [pc, #284]	@ (8006168 <xPortStartScheduler+0x128>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10b      	bne.n	8006068 <xPortStartScheduler+0x28>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	e7fd      	b.n	8006064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006068:	4b3e      	ldr	r3, [pc, #248]	@ (8006164 <xPortStartScheduler+0x124>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a3f      	ldr	r2, [pc, #252]	@ (800616c <xPortStartScheduler+0x12c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10b      	bne.n	800608a <xPortStartScheduler+0x4a>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800608a:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <xPortStartScheduler+0x130>)
 800608c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	22ff      	movs	r2, #255	@ 0xff
 800609a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	4b31      	ldr	r3, [pc, #196]	@ (8006174 <xPortStartScheduler+0x134>)
 80060b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060b2:	4b31      	ldr	r3, [pc, #196]	@ (8006178 <xPortStartScheduler+0x138>)
 80060b4:	2207      	movs	r2, #7
 80060b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060b8:	e009      	b.n	80060ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <xPortStartScheduler+0x138>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3b01      	subs	r3, #1
 80060c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006178 <xPortStartScheduler+0x138>)
 80060c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b80      	cmp	r3, #128	@ 0x80
 80060d8:	d0ef      	beq.n	80060ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <xPortStartScheduler+0x138>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1c3 0307 	rsb	r3, r3, #7
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d00b      	beq.n	80060fe <xPortStartScheduler+0xbe>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60bb      	str	r3, [r7, #8]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <xPortStartScheduler+0x138>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	4a1c      	ldr	r2, [pc, #112]	@ (8006178 <xPortStartScheduler+0x138>)
 8006106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006108:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <xPortStartScheduler+0x138>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006110:	4a19      	ldr	r2, [pc, #100]	@ (8006178 <xPortStartScheduler+0x138>)
 8006112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800611c:	4b17      	ldr	r3, [pc, #92]	@ (800617c <xPortStartScheduler+0x13c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a16      	ldr	r2, [pc, #88]	@ (800617c <xPortStartScheduler+0x13c>)
 8006122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006128:	4b14      	ldr	r3, [pc, #80]	@ (800617c <xPortStartScheduler+0x13c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a13      	ldr	r2, [pc, #76]	@ (800617c <xPortStartScheduler+0x13c>)
 800612e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006134:	f000 f8da 	bl	80062ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <xPortStartScheduler+0x140>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800613e:	f000 f8f9 	bl	8006334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006142:	4b10      	ldr	r3, [pc, #64]	@ (8006184 <xPortStartScheduler+0x144>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a0f      	ldr	r2, [pc, #60]	@ (8006184 <xPortStartScheduler+0x144>)
 8006148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800614c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800614e:	f7ff ff63 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006152:	f7fe ff29 	bl	8004fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8006156:	f7ff ff17 	bl	8005f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed00 	.word	0xe000ed00
 8006168:	410fc271 	.word	0x410fc271
 800616c:	410fc270 	.word	0x410fc270
 8006170:	e000e400 	.word	0xe000e400
 8006174:	20000f94 	.word	0x20000f94
 8006178:	20000f98 	.word	0x20000f98
 800617c:	e000ed20 	.word	0xe000ed20
 8006180:	2000000c 	.word	0x2000000c
 8006184:	e000ef34 	.word	0xe000ef34

08006188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	607b      	str	r3, [r7, #4]
}
 80061a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061a2:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <vPortEnterCritical+0x5c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a0e      	ldr	r2, [pc, #56]	@ (80061e4 <vPortEnterCritical+0x5c>)
 80061aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061ac:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <vPortEnterCritical+0x5c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d110      	bne.n	80061d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061b4:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <vPortEnterCritical+0x60>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	603b      	str	r3, [r7, #0]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <vPortEnterCritical+0x4a>
	}
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061f2:	4b12      	ldr	r3, [pc, #72]	@ (800623c <vPortExitCritical+0x50>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <vPortExitCritical+0x26>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006212:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <vPortExitCritical+0x50>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3b01      	subs	r3, #1
 8006218:	4a08      	ldr	r2, [pc, #32]	@ (800623c <vPortExitCritical+0x50>)
 800621a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800621c:	4b07      	ldr	r3, [pc, #28]	@ (800623c <vPortExitCritical+0x50>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <vPortExitCritical+0x44>
 8006224:	2300      	movs	r3, #0
 8006226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f383 8811 	msr	BASEPRI, r3
}
 800622e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	2000000c 	.word	0x2000000c

08006240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006240:	f3ef 8009 	mrs	r0, PSP
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4b15      	ldr	r3, [pc, #84]	@ (80062a0 <pxCurrentTCBConst>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f01e 0f10 	tst.w	lr, #16
 8006250:	bf08      	it	eq
 8006252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	6010      	str	r0, [r2, #0]
 800625c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006264:	f380 8811 	msr	BASEPRI, r0
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f7fe fe9a 	bl	8004fa8 <vTaskSwitchContext>
 8006274:	f04f 0000 	mov.w	r0, #0
 8006278:	f380 8811 	msr	BASEPRI, r0
 800627c:	bc09      	pop	{r0, r3}
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006286:	f01e 0f10 	tst.w	lr, #16
 800628a:	bf08      	it	eq
 800628c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006290:	f380 8809 	msr	PSP, r0
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst>:
 80062a0:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062c2:	f7fe fdb7 	bl	8004e34 <xTaskIncrementTick>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <xPortSysTickHandler+0x40>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	2300      	movs	r3, #0
 80062d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f383 8811 	msr	BASEPRI, r3
}
 80062de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <vPortSetupTimerInterrupt+0x34>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <vPortSetupTimerInterrupt+0x38>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006328 <vPortSetupTimerInterrupt+0x3c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <vPortSetupTimerInterrupt+0x40>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	099b      	lsrs	r3, r3, #6
 8006308:	4a09      	ldr	r2, [pc, #36]	@ (8006330 <vPortSetupTimerInterrupt+0x44>)
 800630a:	3b01      	subs	r3, #1
 800630c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800630e:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <vPortSetupTimerInterrupt+0x34>)
 8006310:	2207      	movs	r2, #7
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e010 	.word	0xe000e010
 8006324:	e000e018 	.word	0xe000e018
 8006328:	20000000 	.word	0x20000000
 800632c:	10624dd3 	.word	0x10624dd3
 8006330:	e000e014 	.word	0xe000e014

08006334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006344 <vPortEnableVFP+0x10>
 8006338:	6801      	ldr	r1, [r0, #0]
 800633a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800633e:	6001      	str	r1, [r0, #0]
 8006340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006342:	bf00      	nop
 8006344:	e000ed88 	.word	0xe000ed88

08006348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d915      	bls.n	8006386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800635a:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <vPortValidateInterruptPriority+0x74>)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006364:	4b16      	ldr	r3, [pc, #88]	@ (80063c0 <vPortValidateInterruptPriority+0x78>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	7afa      	ldrb	r2, [r7, #11]
 800636a:	429a      	cmp	r2, r3
 800636c:	d20b      	bcs.n	8006386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006386:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <vPortValidateInterruptPriority+0x7c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800638e:	4b0e      	ldr	r3, [pc, #56]	@ (80063c8 <vPortValidateInterruptPriority+0x80>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d90b      	bls.n	80063ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	603b      	str	r3, [r7, #0]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <vPortValidateInterruptPriority+0x62>
	}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	e000e3f0 	.word	0xe000e3f0
 80063c0:	20000f94 	.word	0x20000f94
 80063c4:	e000ed0c 	.word	0xe000ed0c
 80063c8:	20000f98 	.word	0x20000f98

080063cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063d8:	f7fe fc70 	bl	8004cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006550 <pvPortMalloc+0x184>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063e4:	f000 f924 	bl	8006630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006554 <pvPortMalloc+0x188>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8095 	bne.w	8006520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01e      	beq.n	800643a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80063fc:	2208      	movs	r2, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d015      	beq.n	800643a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f023 0307 	bic.w	r3, r3, #7
 8006414:	3308      	adds	r3, #8
 8006416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <pvPortMalloc+0x6e>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	617b      	str	r3, [r7, #20]
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06f      	beq.n	8006520 <pvPortMalloc+0x154>
 8006440:	4b45      	ldr	r3, [pc, #276]	@ (8006558 <pvPortMalloc+0x18c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d86a      	bhi.n	8006520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800644a:	4b44      	ldr	r3, [pc, #272]	@ (800655c <pvPortMalloc+0x190>)
 800644c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800644e:	4b43      	ldr	r3, [pc, #268]	@ (800655c <pvPortMalloc+0x190>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006454:	e004      	b.n	8006460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d903      	bls.n	8006472 <pvPortMalloc+0xa6>
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f1      	bne.n	8006456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006472:	4b37      	ldr	r3, [pc, #220]	@ (8006550 <pvPortMalloc+0x184>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006478:	429a      	cmp	r2, r3
 800647a:	d051      	beq.n	8006520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	4413      	add	r3, r2
 8006484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	2308      	movs	r3, #8
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	429a      	cmp	r2, r3
 800649c:	d920      	bls.n	80064e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <pvPortMalloc+0xfc>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064da:	69b8      	ldr	r0, [r7, #24]
 80064dc:	f000 f90a 	bl	80066f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <pvPortMalloc+0x18c>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <pvPortMalloc+0x18c>)
 80064ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <pvPortMalloc+0x18c>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006560 <pvPortMalloc+0x194>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d203      	bcs.n	8006502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064fa:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <pvPortMalloc+0x18c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <pvPortMalloc+0x194>)
 8006500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <pvPortMalloc+0x188>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	431a      	orrs	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006516:	4b13      	ldr	r3, [pc, #76]	@ (8006564 <pvPortMalloc+0x198>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	4a11      	ldr	r2, [pc, #68]	@ (8006564 <pvPortMalloc+0x198>)
 800651e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006520:	f7fe fbda 	bl	8004cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <pvPortMalloc+0x17a>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60fb      	str	r3, [r7, #12]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <pvPortMalloc+0x176>
	return pvReturn;
 8006546:	69fb      	ldr	r3, [r7, #28]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3728      	adds	r7, #40	@ 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20004ba4 	.word	0x20004ba4
 8006554:	20004bb8 	.word	0x20004bb8
 8006558:	20004ba8 	.word	0x20004ba8
 800655c:	20004b9c 	.word	0x20004b9c
 8006560:	20004bac 	.word	0x20004bac
 8006564:	20004bb0 	.word	0x20004bb0

08006568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04f      	beq.n	800661a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800657a:	2308      	movs	r3, #8
 800657c:	425b      	negs	r3, r3
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <vPortFree+0xbc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <vPortFree+0x46>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <vPortFree+0x66>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	60bb      	str	r3, [r7, #8]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <vPortFree+0xbc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01e      	beq.n	800661a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11a      	bne.n	800661a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006624 <vPortFree+0xbc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	43db      	mvns	r3, r3
 80065ee:	401a      	ands	r2, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065f4:	f7fe fb62 	bl	8004cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <vPortFree+0xc0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4413      	add	r3, r2
 8006602:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <vPortFree+0xc0>)
 8006604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006606:	6938      	ldr	r0, [r7, #16]
 8006608:	f000 f874 	bl	80066f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800660c:	4b07      	ldr	r3, [pc, #28]	@ (800662c <vPortFree+0xc4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	4a06      	ldr	r2, [pc, #24]	@ (800662c <vPortFree+0xc4>)
 8006614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006616:	f7fe fb5f 	bl	8004cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800661a:	bf00      	nop
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20004bb8 	.word	0x20004bb8
 8006628:	20004ba8 	.word	0x20004ba8
 800662c:	20004bb4 	.word	0x20004bb4

08006630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800663a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800663c:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <prvHeapInit+0xac>)
 800663e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3307      	adds	r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0307 	bic.w	r3, r3, #7
 8006656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	4a1f      	ldr	r2, [pc, #124]	@ (80066dc <prvHeapInit+0xac>)
 8006660:	4413      	add	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006668:	4a1d      	ldr	r2, [pc, #116]	@ (80066e0 <prvHeapInit+0xb0>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800666e:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <prvHeapInit+0xb0>)
 8006670:	2200      	movs	r2, #0
 8006672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800667c:	2208      	movs	r2, #8
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a15      	ldr	r2, [pc, #84]	@ (80066e4 <prvHeapInit+0xb4>)
 8006690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006692:	4b14      	ldr	r3, [pc, #80]	@ (80066e4 <prvHeapInit+0xb4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800669a:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <prvHeapInit+0xb4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	1ad2      	subs	r2, r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <prvHeapInit+0xb4>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4a0a      	ldr	r2, [pc, #40]	@ (80066e8 <prvHeapInit+0xb8>)
 80066be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <prvHeapInit+0xbc>)
 80066c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066c8:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <prvHeapInit+0xc0>)
 80066ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80066ce:	601a      	str	r2, [r3, #0]
}
 80066d0:	bf00      	nop
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000f9c 	.word	0x20000f9c
 80066e0:	20004b9c 	.word	0x20004b9c
 80066e4:	20004ba4 	.word	0x20004ba4
 80066e8:	20004bac 	.word	0x20004bac
 80066ec:	20004ba8 	.word	0x20004ba8
 80066f0:	20004bb8 	.word	0x20004bb8

080066f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066fc:	4b28      	ldr	r3, [pc, #160]	@ (80067a0 <prvInsertBlockIntoFreeList+0xac>)
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e002      	b.n	8006708 <prvInsertBlockIntoFreeList+0x14>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d8f7      	bhi.n	8006702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d108      	bne.n	8006736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d118      	bne.n	800677c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d00d      	beq.n	8006772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e008      	b.n	8006784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e003      	b.n	8006784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d002      	beq.n	8006792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20004b9c 	.word	0x20004b9c
 80067a4:	20004ba4 	.word	0x20004ba4

080067a8 <__cvt>:
 80067a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	ec57 6b10 	vmov	r6, r7, d0
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	460c      	mov	r4, r1
 80067b4:	4619      	mov	r1, r3
 80067b6:	463b      	mov	r3, r7
 80067b8:	bfbb      	ittet	lt
 80067ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067be:	461f      	movlt	r7, r3
 80067c0:	2300      	movge	r3, #0
 80067c2:	232d      	movlt	r3, #45	@ 0x2d
 80067c4:	700b      	strb	r3, [r1, #0]
 80067c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067cc:	4691      	mov	r9, r2
 80067ce:	f023 0820 	bic.w	r8, r3, #32
 80067d2:	bfbc      	itt	lt
 80067d4:	4632      	movlt	r2, r6
 80067d6:	4616      	movlt	r6, r2
 80067d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067dc:	d005      	beq.n	80067ea <__cvt+0x42>
 80067de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067e2:	d100      	bne.n	80067e6 <__cvt+0x3e>
 80067e4:	3401      	adds	r4, #1
 80067e6:	2102      	movs	r1, #2
 80067e8:	e000      	b.n	80067ec <__cvt+0x44>
 80067ea:	2103      	movs	r1, #3
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	ab02      	add	r3, sp, #8
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	ec47 6b10 	vmov	d0, r6, r7
 80067f8:	4653      	mov	r3, sl
 80067fa:	4622      	mov	r2, r4
 80067fc:	f001 f83c 	bl	8007878 <_dtoa_r>
 8006800:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006804:	4605      	mov	r5, r0
 8006806:	d119      	bne.n	800683c <__cvt+0x94>
 8006808:	f019 0f01 	tst.w	r9, #1
 800680c:	d00e      	beq.n	800682c <__cvt+0x84>
 800680e:	eb00 0904 	add.w	r9, r0, r4
 8006812:	2200      	movs	r2, #0
 8006814:	2300      	movs	r3, #0
 8006816:	4630      	mov	r0, r6
 8006818:	4639      	mov	r1, r7
 800681a:	f7fa f975 	bl	8000b08 <__aeabi_dcmpeq>
 800681e:	b108      	cbz	r0, 8006824 <__cvt+0x7c>
 8006820:	f8cd 900c 	str.w	r9, [sp, #12]
 8006824:	2230      	movs	r2, #48	@ 0x30
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	454b      	cmp	r3, r9
 800682a:	d31e      	bcc.n	800686a <__cvt+0xc2>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006830:	1b5b      	subs	r3, r3, r5
 8006832:	4628      	mov	r0, r5
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	b004      	add	sp, #16
 8006838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006840:	eb00 0904 	add.w	r9, r0, r4
 8006844:	d1e5      	bne.n	8006812 <__cvt+0x6a>
 8006846:	7803      	ldrb	r3, [r0, #0]
 8006848:	2b30      	cmp	r3, #48	@ 0x30
 800684a:	d10a      	bne.n	8006862 <__cvt+0xba>
 800684c:	2200      	movs	r2, #0
 800684e:	2300      	movs	r3, #0
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7fa f958 	bl	8000b08 <__aeabi_dcmpeq>
 8006858:	b918      	cbnz	r0, 8006862 <__cvt+0xba>
 800685a:	f1c4 0401 	rsb	r4, r4, #1
 800685e:	f8ca 4000 	str.w	r4, [sl]
 8006862:	f8da 3000 	ldr.w	r3, [sl]
 8006866:	4499      	add	r9, r3
 8006868:	e7d3      	b.n	8006812 <__cvt+0x6a>
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	9103      	str	r1, [sp, #12]
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e7d9      	b.n	8006826 <__cvt+0x7e>

08006872 <__exponent>:
 8006872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006874:	2900      	cmp	r1, #0
 8006876:	bfba      	itte	lt
 8006878:	4249      	neglt	r1, r1
 800687a:	232d      	movlt	r3, #45	@ 0x2d
 800687c:	232b      	movge	r3, #43	@ 0x2b
 800687e:	2909      	cmp	r1, #9
 8006880:	7002      	strb	r2, [r0, #0]
 8006882:	7043      	strb	r3, [r0, #1]
 8006884:	dd29      	ble.n	80068da <__exponent+0x68>
 8006886:	f10d 0307 	add.w	r3, sp, #7
 800688a:	461d      	mov	r5, r3
 800688c:	270a      	movs	r7, #10
 800688e:	461a      	mov	r2, r3
 8006890:	fbb1 f6f7 	udiv	r6, r1, r7
 8006894:	fb07 1416 	mls	r4, r7, r6, r1
 8006898:	3430      	adds	r4, #48	@ 0x30
 800689a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800689e:	460c      	mov	r4, r1
 80068a0:	2c63      	cmp	r4, #99	@ 0x63
 80068a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80068a6:	4631      	mov	r1, r6
 80068a8:	dcf1      	bgt.n	800688e <__exponent+0x1c>
 80068aa:	3130      	adds	r1, #48	@ 0x30
 80068ac:	1e94      	subs	r4, r2, #2
 80068ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068b2:	1c41      	adds	r1, r0, #1
 80068b4:	4623      	mov	r3, r4
 80068b6:	42ab      	cmp	r3, r5
 80068b8:	d30a      	bcc.n	80068d0 <__exponent+0x5e>
 80068ba:	f10d 0309 	add.w	r3, sp, #9
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	42ac      	cmp	r4, r5
 80068c2:	bf88      	it	hi
 80068c4:	2300      	movhi	r3, #0
 80068c6:	3302      	adds	r3, #2
 80068c8:	4403      	add	r3, r0
 80068ca:	1a18      	subs	r0, r3, r0
 80068cc:	b003      	add	sp, #12
 80068ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068d8:	e7ed      	b.n	80068b6 <__exponent+0x44>
 80068da:	2330      	movs	r3, #48	@ 0x30
 80068dc:	3130      	adds	r1, #48	@ 0x30
 80068de:	7083      	strb	r3, [r0, #2]
 80068e0:	70c1      	strb	r1, [r0, #3]
 80068e2:	1d03      	adds	r3, r0, #4
 80068e4:	e7f1      	b.n	80068ca <__exponent+0x58>
	...

080068e8 <_printf_float>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	b08d      	sub	sp, #52	@ 0x34
 80068ee:	460c      	mov	r4, r1
 80068f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068f4:	4616      	mov	r6, r2
 80068f6:	461f      	mov	r7, r3
 80068f8:	4605      	mov	r5, r0
 80068fa:	f000 feaf 	bl	800765c <_localeconv_r>
 80068fe:	6803      	ldr	r3, [r0, #0]
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fcd4 	bl	80002b0 <strlen>
 8006908:	2300      	movs	r3, #0
 800690a:	930a      	str	r3, [sp, #40]	@ 0x28
 800690c:	f8d8 3000 	ldr.w	r3, [r8]
 8006910:	9005      	str	r0, [sp, #20]
 8006912:	3307      	adds	r3, #7
 8006914:	f023 0307 	bic.w	r3, r3, #7
 8006918:	f103 0208 	add.w	r2, r3, #8
 800691c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006920:	f8d4 b000 	ldr.w	fp, [r4]
 8006924:	f8c8 2000 	str.w	r2, [r8]
 8006928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	f8cd 8018 	str.w	r8, [sp, #24]
 8006936:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800693a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693e:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb0 <_printf_float+0x2c8>)
 8006940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006944:	f7fa f912 	bl	8000b6c <__aeabi_dcmpun>
 8006948:	bb70      	cbnz	r0, 80069a8 <_printf_float+0xc0>
 800694a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694e:	4b98      	ldr	r3, [pc, #608]	@ (8006bb0 <_printf_float+0x2c8>)
 8006950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006954:	f7fa f8ec 	bl	8000b30 <__aeabi_dcmple>
 8006958:	bb30      	cbnz	r0, 80069a8 <_printf_float+0xc0>
 800695a:	2200      	movs	r2, #0
 800695c:	2300      	movs	r3, #0
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8db 	bl	8000b1c <__aeabi_dcmplt>
 8006966:	b110      	cbz	r0, 800696e <_printf_float+0x86>
 8006968:	232d      	movs	r3, #45	@ 0x2d
 800696a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696e:	4a91      	ldr	r2, [pc, #580]	@ (8006bb4 <_printf_float+0x2cc>)
 8006970:	4b91      	ldr	r3, [pc, #580]	@ (8006bb8 <_printf_float+0x2d0>)
 8006972:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006976:	bf94      	ite	ls
 8006978:	4690      	movls	r8, r2
 800697a:	4698      	movhi	r8, r3
 800697c:	2303      	movs	r3, #3
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	f02b 0304 	bic.w	r3, fp, #4
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	f04f 0900 	mov.w	r9, #0
 800698a:	9700      	str	r7, [sp, #0]
 800698c:	4633      	mov	r3, r6
 800698e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006990:	4621      	mov	r1, r4
 8006992:	4628      	mov	r0, r5
 8006994:	f000 f9d2 	bl	8006d3c <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	f040 808d 	bne.w	8006ab8 <_printf_float+0x1d0>
 800699e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a2:	b00d      	add	sp, #52	@ 0x34
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	4642      	mov	r2, r8
 80069aa:	464b      	mov	r3, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f8dc 	bl	8000b6c <__aeabi_dcmpun>
 80069b4:	b140      	cbz	r0, 80069c8 <_printf_float+0xe0>
 80069b6:	464b      	mov	r3, r9
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfbc      	itt	lt
 80069bc:	232d      	movlt	r3, #45	@ 0x2d
 80069be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069c2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bbc <_printf_float+0x2d4>)
 80069c4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bc0 <_printf_float+0x2d8>)
 80069c6:	e7d4      	b.n	8006972 <_printf_float+0x8a>
 80069c8:	6863      	ldr	r3, [r4, #4]
 80069ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069ce:	9206      	str	r2, [sp, #24]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	d13b      	bne.n	8006a4c <_printf_float+0x164>
 80069d4:	2306      	movs	r3, #6
 80069d6:	6063      	str	r3, [r4, #4]
 80069d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069dc:	2300      	movs	r3, #0
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80069e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069e8:	ab09      	add	r3, sp, #36	@ 0x24
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	6861      	ldr	r1, [r4, #4]
 80069ee:	ec49 8b10 	vmov	d0, r8, r9
 80069f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7ff fed6 	bl	80067a8 <__cvt>
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a00:	2b47      	cmp	r3, #71	@ 0x47
 8006a02:	4680      	mov	r8, r0
 8006a04:	d129      	bne.n	8006a5a <_printf_float+0x172>
 8006a06:	1cc8      	adds	r0, r1, #3
 8006a08:	db02      	blt.n	8006a10 <_printf_float+0x128>
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	dd41      	ble.n	8006a94 <_printf_float+0x1ac>
 8006a10:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a14:	fa5f fa8a 	uxtb.w	sl, sl
 8006a18:	3901      	subs	r1, #1
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a20:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a22:	f7ff ff26 	bl	8006872 <__exponent>
 8006a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a28:	1813      	adds	r3, r2, r0
 8006a2a:	2a01      	cmp	r2, #1
 8006a2c:	4681      	mov	r9, r0
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	dc02      	bgt.n	8006a38 <_printf_float+0x150>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	07d2      	lsls	r2, r2, #31
 8006a36:	d501      	bpl.n	8006a3c <_printf_float+0x154>
 8006a38:	3301      	adds	r3, #1
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0a2      	beq.n	800698a <_printf_float+0xa2>
 8006a44:	232d      	movs	r3, #45	@ 0x2d
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4a:	e79e      	b.n	800698a <_printf_float+0xa2>
 8006a4c:	9a06      	ldr	r2, [sp, #24]
 8006a4e:	2a47      	cmp	r2, #71	@ 0x47
 8006a50:	d1c2      	bne.n	80069d8 <_printf_float+0xf0>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1c0      	bne.n	80069d8 <_printf_float+0xf0>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7bd      	b.n	80069d6 <_printf_float+0xee>
 8006a5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a5e:	d9db      	bls.n	8006a18 <_printf_float+0x130>
 8006a60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a64:	d118      	bne.n	8006a98 <_printf_float+0x1b0>
 8006a66:	2900      	cmp	r1, #0
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	dd0b      	ble.n	8006a84 <_printf_float+0x19c>
 8006a6c:	6121      	str	r1, [r4, #16]
 8006a6e:	b913      	cbnz	r3, 8006a76 <_printf_float+0x18e>
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	07d0      	lsls	r0, r2, #31
 8006a74:	d502      	bpl.n	8006a7c <_printf_float+0x194>
 8006a76:	3301      	adds	r3, #1
 8006a78:	440b      	add	r3, r1
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a7e:	f04f 0900 	mov.w	r9, #0
 8006a82:	e7db      	b.n	8006a3c <_printf_float+0x154>
 8006a84:	b913      	cbnz	r3, 8006a8c <_printf_float+0x1a4>
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	07d2      	lsls	r2, r2, #31
 8006a8a:	d501      	bpl.n	8006a90 <_printf_float+0x1a8>
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	e7f4      	b.n	8006a7a <_printf_float+0x192>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7f2      	b.n	8006a7a <_printf_float+0x192>
 8006a94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	db05      	blt.n	8006aaa <_printf_float+0x1c2>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	6121      	str	r1, [r4, #16]
 8006aa2:	07d8      	lsls	r0, r3, #31
 8006aa4:	d5ea      	bpl.n	8006a7c <_printf_float+0x194>
 8006aa6:	1c4b      	adds	r3, r1, #1
 8006aa8:	e7e7      	b.n	8006a7a <_printf_float+0x192>
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	bfd4      	ite	le
 8006aae:	f1c1 0202 	rsble	r2, r1, #2
 8006ab2:	2201      	movgt	r2, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	e7e0      	b.n	8006a7a <_printf_float+0x192>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	055a      	lsls	r2, r3, #21
 8006abc:	d407      	bmi.n	8006ace <_printf_float+0x1e6>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d12b      	bne.n	8006b24 <_printf_float+0x23c>
 8006acc:	e767      	b.n	800699e <_printf_float+0xb6>
 8006ace:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ad2:	f240 80dd 	bls.w	8006c90 <_printf_float+0x3a8>
 8006ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	f7fa f813 	bl	8000b08 <__aeabi_dcmpeq>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d033      	beq.n	8006b4e <_printf_float+0x266>
 8006ae6:	4a37      	ldr	r2, [pc, #220]	@ (8006bc4 <_printf_float+0x2dc>)
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	f43f af54 	beq.w	800699e <_printf_float+0xb6>
 8006af6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006afa:	4543      	cmp	r3, r8
 8006afc:	db02      	blt.n	8006b04 <_printf_float+0x21c>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	07d8      	lsls	r0, r3, #31
 8006b02:	d50f      	bpl.n	8006b24 <_printf_float+0x23c>
 8006b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af45 	beq.w	800699e <_printf_float+0xb6>
 8006b14:	f04f 0900 	mov.w	r9, #0
 8006b18:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006b1c:	f104 0a1a 	add.w	sl, r4, #26
 8006b20:	45c8      	cmp	r8, r9
 8006b22:	dc09      	bgt.n	8006b38 <_printf_float+0x250>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	079b      	lsls	r3, r3, #30
 8006b28:	f100 8103 	bmi.w	8006d32 <_printf_float+0x44a>
 8006b2c:	68e0      	ldr	r0, [r4, #12]
 8006b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b30:	4298      	cmp	r0, r3
 8006b32:	bfb8      	it	lt
 8006b34:	4618      	movlt	r0, r3
 8006b36:	e734      	b.n	80069a2 <_printf_float+0xba>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af2b 	beq.w	800699e <_printf_float+0xb6>
 8006b48:	f109 0901 	add.w	r9, r9, #1
 8006b4c:	e7e8      	b.n	8006b20 <_printf_float+0x238>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dc39      	bgt.n	8006bc8 <_printf_float+0x2e0>
 8006b54:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <_printf_float+0x2dc>)
 8006b56:	2301      	movs	r3, #1
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f af1d 	beq.w	800699e <_printf_float+0xb6>
 8006b64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b68:	ea59 0303 	orrs.w	r3, r9, r3
 8006b6c:	d102      	bne.n	8006b74 <_printf_float+0x28c>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	07d9      	lsls	r1, r3, #31
 8006b72:	d5d7      	bpl.n	8006b24 <_printf_float+0x23c>
 8006b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	47b8      	blx	r7
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f43f af0d 	beq.w	800699e <_printf_float+0xb6>
 8006b84:	f04f 0a00 	mov.w	sl, #0
 8006b88:	f104 0b1a 	add.w	fp, r4, #26
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	425b      	negs	r3, r3
 8006b90:	4553      	cmp	r3, sl
 8006b92:	dc01      	bgt.n	8006b98 <_printf_float+0x2b0>
 8006b94:	464b      	mov	r3, r9
 8006b96:	e793      	b.n	8006ac0 <_printf_float+0x1d8>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	465a      	mov	r2, fp
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f aefb 	beq.w	800699e <_printf_float+0xb6>
 8006ba8:	f10a 0a01 	add.w	sl, sl, #1
 8006bac:	e7ee      	b.n	8006b8c <_printf_float+0x2a4>
 8006bae:	bf00      	nop
 8006bb0:	7fefffff 	.word	0x7fefffff
 8006bb4:	08009af4 	.word	0x08009af4
 8006bb8:	08009af8 	.word	0x08009af8
 8006bbc:	08009afc 	.word	0x08009afc
 8006bc0:	08009b00 	.word	0x08009b00
 8006bc4:	08009b04 	.word	0x08009b04
 8006bc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bce:	4553      	cmp	r3, sl
 8006bd0:	bfa8      	it	ge
 8006bd2:	4653      	movge	r3, sl
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	4699      	mov	r9, r3
 8006bd8:	dc36      	bgt.n	8006c48 <_printf_float+0x360>
 8006bda:	f04f 0b00 	mov.w	fp, #0
 8006bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be2:	f104 021a 	add.w	r2, r4, #26
 8006be6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006be8:	9306      	str	r3, [sp, #24]
 8006bea:	eba3 0309 	sub.w	r3, r3, r9
 8006bee:	455b      	cmp	r3, fp
 8006bf0:	dc31      	bgt.n	8006c56 <_printf_float+0x36e>
 8006bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf4:	459a      	cmp	sl, r3
 8006bf6:	dc3a      	bgt.n	8006c6e <_printf_float+0x386>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	07da      	lsls	r2, r3, #31
 8006bfc:	d437      	bmi.n	8006c6e <_printf_float+0x386>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	ebaa 0903 	sub.w	r9, sl, r3
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	ebaa 0303 	sub.w	r3, sl, r3
 8006c0a:	4599      	cmp	r9, r3
 8006c0c:	bfa8      	it	ge
 8006c0e:	4699      	movge	r9, r3
 8006c10:	f1b9 0f00 	cmp.w	r9, #0
 8006c14:	dc33      	bgt.n	8006c7e <_printf_float+0x396>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c1e:	f104 0b1a 	add.w	fp, r4, #26
 8006c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c24:	ebaa 0303 	sub.w	r3, sl, r3
 8006c28:	eba3 0309 	sub.w	r3, r3, r9
 8006c2c:	4543      	cmp	r3, r8
 8006c2e:	f77f af79 	ble.w	8006b24 <_printf_float+0x23c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	465a      	mov	r2, fp
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f aeae 	beq.w	800699e <_printf_float+0xb6>
 8006c42:	f108 0801 	add.w	r8, r8, #1
 8006c46:	e7ec      	b.n	8006c22 <_printf_float+0x33a>
 8006c48:	4642      	mov	r2, r8
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	d1c2      	bne.n	8006bda <_printf_float+0x2f2>
 8006c54:	e6a3      	b.n	800699e <_printf_float+0xb6>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	9206      	str	r2, [sp, #24]
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae9c 	beq.w	800699e <_printf_float+0xb6>
 8006c66:	9a06      	ldr	r2, [sp, #24]
 8006c68:	f10b 0b01 	add.w	fp, fp, #1
 8006c6c:	e7bb      	b.n	8006be6 <_printf_float+0x2fe>
 8006c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d1c0      	bne.n	8006bfe <_printf_float+0x316>
 8006c7c:	e68f      	b.n	800699e <_printf_float+0xb6>
 8006c7e:	9a06      	ldr	r2, [sp, #24]
 8006c80:	464b      	mov	r3, r9
 8006c82:	4442      	add	r2, r8
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d1c3      	bne.n	8006c16 <_printf_float+0x32e>
 8006c8e:	e686      	b.n	800699e <_printf_float+0xb6>
 8006c90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c94:	f1ba 0f01 	cmp.w	sl, #1
 8006c98:	dc01      	bgt.n	8006c9e <_printf_float+0x3b6>
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d536      	bpl.n	8006d0c <_printf_float+0x424>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae78 	beq.w	800699e <_printf_float+0xb6>
 8006cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae70 	beq.w	800699e <_printf_float+0xb6>
 8006cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006cca:	f7f9 ff1d 	bl	8000b08 <__aeabi_dcmpeq>
 8006cce:	b9c0      	cbnz	r0, 8006d02 <_printf_float+0x41a>
 8006cd0:	4653      	mov	r3, sl
 8006cd2:	f108 0201 	add.w	r2, r8, #1
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d10c      	bne.n	8006cfa <_printf_float+0x412>
 8006ce0:	e65d      	b.n	800699e <_printf_float+0xb6>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	465a      	mov	r2, fp
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f ae56 	beq.w	800699e <_printf_float+0xb6>
 8006cf2:	f108 0801 	add.w	r8, r8, #1
 8006cf6:	45d0      	cmp	r8, sl
 8006cf8:	dbf3      	blt.n	8006ce2 <_printf_float+0x3fa>
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d00:	e6df      	b.n	8006ac2 <_printf_float+0x1da>
 8006d02:	f04f 0800 	mov.w	r8, #0
 8006d06:	f104 0b1a 	add.w	fp, r4, #26
 8006d0a:	e7f4      	b.n	8006cf6 <_printf_float+0x40e>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4642      	mov	r2, r8
 8006d10:	e7e1      	b.n	8006cd6 <_printf_float+0x3ee>
 8006d12:	2301      	movs	r3, #1
 8006d14:	464a      	mov	r2, r9
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f ae3e 	beq.w	800699e <_printf_float+0xb6>
 8006d22:	f108 0801 	add.w	r8, r8, #1
 8006d26:	68e3      	ldr	r3, [r4, #12]
 8006d28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d2a:	1a5b      	subs	r3, r3, r1
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	dcf0      	bgt.n	8006d12 <_printf_float+0x42a>
 8006d30:	e6fc      	b.n	8006b2c <_printf_float+0x244>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	f104 0919 	add.w	r9, r4, #25
 8006d3a:	e7f4      	b.n	8006d26 <_printf_float+0x43e>

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4698      	mov	r8, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	3b00      	subs	r3, #0
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d98:	4641      	mov	r1, r8
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c8      	blx	r9
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf02      	ittt	eq
 8006dae:	68e5      	ldreq	r5, [r4, #12]
 8006db0:	6833      	ldreq	r3, [r6, #0]
 8006db2:	1aed      	subeq	r5, r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c8      	blx	r9
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	@ 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4641      	mov	r1, r8
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c8      	blx	r9
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e20:	2f78      	cmp	r7, #120	@ 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	@ 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d2 	beq.w	8006fde <_printf_i+0x1c6>
 8006e3a:	2f58      	cmp	r7, #88	@ 0x58
 8006e3c:	f000 80b9 	beq.w	8006fb2 <_printf_i+0x19a>
 8006e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	@ (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fc5 	.word	0x08006fc5
 8006e88:	08006eef 	.word	0x08006eef
 8006e8c:	08006f7f 	.word	0x08006f7f
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006fe7 	.word	0x08006fe7
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006eef 	.word	0x08006eef
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f87 	.word	0x08006f87
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6032      	str	r2, [r6, #0]
 8006eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09d      	b.n	8007000 <_printf_i+0x1e8>
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	1d19      	adds	r1, r3, #4
 8006eca:	6031      	str	r1, [r6, #0]
 8006ecc:	0606      	lsls	r6, r0, #24
 8006ece:	d501      	bpl.n	8006ed4 <_printf_i+0xbc>
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	e003      	b.n	8006edc <_printf_i+0xc4>
 8006ed4:	0645      	lsls	r5, r0, #25
 8006ed6:	d5fb      	bpl.n	8006ed0 <_printf_i+0xb8>
 8006ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	da03      	bge.n	8006ee8 <_printf_i+0xd0>
 8006ee0:	232d      	movs	r3, #45	@ 0x2d
 8006ee2:	426d      	negs	r5, r5
 8006ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee8:	4859      	ldr	r0, [pc, #356]	@ (8007050 <_printf_i+0x238>)
 8006eea:	230a      	movs	r3, #10
 8006eec:	e011      	b.n	8006f12 <_printf_i+0xfa>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	6833      	ldr	r3, [r6, #0]
 8006ef2:	0608      	lsls	r0, r1, #24
 8006ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ef8:	d402      	bmi.n	8006f00 <_printf_i+0xe8>
 8006efa:	0649      	lsls	r1, r1, #25
 8006efc:	bf48      	it	mi
 8006efe:	b2ad      	uxthmi	r5, r5
 8006f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f02:	4853      	ldr	r0, [pc, #332]	@ (8007050 <_printf_i+0x238>)
 8006f04:	6033      	str	r3, [r6, #0]
 8006f06:	bf14      	ite	ne
 8006f08:	230a      	movne	r3, #10
 8006f0a:	2308      	moveq	r3, #8
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f12:	6866      	ldr	r6, [r4, #4]
 8006f14:	60a6      	str	r6, [r4, #8]
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	bfa2      	ittt	ge
 8006f1a:	6821      	ldrge	r1, [r4, #0]
 8006f1c:	f021 0104 	bicge.w	r1, r1, #4
 8006f20:	6021      	strge	r1, [r4, #0]
 8006f22:	b90d      	cbnz	r5, 8006f28 <_printf_i+0x110>
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d04b      	beq.n	8006fc0 <_printf_i+0x1a8>
 8006f28:	4616      	mov	r6, r2
 8006f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f32:	5dc7      	ldrb	r7, [r0, r7]
 8006f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f38:	462f      	mov	r7, r5
 8006f3a:	42bb      	cmp	r3, r7
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	d9f4      	bls.n	8006f2a <_printf_i+0x112>
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d10b      	bne.n	8006f5c <_printf_i+0x144>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	07df      	lsls	r7, r3, #31
 8006f48:	d508      	bpl.n	8006f5c <_printf_i+0x144>
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	6861      	ldr	r1, [r4, #4]
 8006f4e:	4299      	cmp	r1, r3
 8006f50:	bfde      	ittt	le
 8006f52:	2330      	movle	r3, #48	@ 0x30
 8006f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f5c:	1b92      	subs	r2, r2, r6
 8006f5e:	6122      	str	r2, [r4, #16]
 8006f60:	f8cd a000 	str.w	sl, [sp]
 8006f64:	464b      	mov	r3, r9
 8006f66:	aa03      	add	r2, sp, #12
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f7ff fee6 	bl	8006d3c <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d14a      	bne.n	800700a <_printf_i+0x1f2>
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f78:	b004      	add	sp, #16
 8006f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f043 0320 	orr.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	4833      	ldr	r0, [pc, #204]	@ (8007054 <_printf_i+0x23c>)
 8006f88:	2778      	movs	r7, #120	@ 0x78
 8006f8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	6831      	ldr	r1, [r6, #0]
 8006f92:	061f      	lsls	r7, r3, #24
 8006f94:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f98:	d402      	bmi.n	8006fa0 <_printf_i+0x188>
 8006f9a:	065f      	lsls	r7, r3, #25
 8006f9c:	bf48      	it	mi
 8006f9e:	b2ad      	uxthmi	r5, r5
 8006fa0:	6031      	str	r1, [r6, #0]
 8006fa2:	07d9      	lsls	r1, r3, #31
 8006fa4:	bf44      	itt	mi
 8006fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8006faa:	6023      	strmi	r3, [r4, #0]
 8006fac:	b11d      	cbz	r5, 8006fb6 <_printf_i+0x19e>
 8006fae:	2310      	movs	r3, #16
 8006fb0:	e7ac      	b.n	8006f0c <_printf_i+0xf4>
 8006fb2:	4827      	ldr	r0, [pc, #156]	@ (8007050 <_printf_i+0x238>)
 8006fb4:	e7e9      	b.n	8006f8a <_printf_i+0x172>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f023 0320 	bic.w	r3, r3, #32
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	e7f6      	b.n	8006fae <_printf_i+0x196>
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	e7bd      	b.n	8006f40 <_printf_i+0x128>
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	6825      	ldr	r5, [r4, #0]
 8006fc8:	6961      	ldr	r1, [r4, #20]
 8006fca:	1d18      	adds	r0, r3, #4
 8006fcc:	6030      	str	r0, [r6, #0]
 8006fce:	062e      	lsls	r6, r5, #24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0x1c0>
 8006fd4:	6019      	str	r1, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <_printf_i+0x1c6>
 8006fd8:	0668      	lsls	r0, r5, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0x1bc>
 8006fdc:	8019      	strh	r1, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	4616      	mov	r6, r2
 8006fe4:	e7bc      	b.n	8006f60 <_printf_i+0x148>
 8006fe6:	6833      	ldr	r3, [r6, #0]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	6032      	str	r2, [r6, #0]
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7f9 f90c 	bl	8000210 <memchr>
 8006ff8:	b108      	cbz	r0, 8006ffe <_printf_i+0x1e6>
 8006ffa:	1b80      	subs	r0, r0, r6
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007008:	e7aa      	b.n	8006f60 <_printf_i+0x148>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d0ad      	beq.n	8006f74 <_printf_i+0x15c>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d413      	bmi.n	8007046 <_printf_i+0x22e>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4298      	cmp	r0, r3
 8007024:	bfb8      	it	lt
 8007026:	4618      	movlt	r0, r3
 8007028:	e7a6      	b.n	8006f78 <_printf_i+0x160>
 800702a:	2301      	movs	r3, #1
 800702c:	4632      	mov	r2, r6
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d09d      	beq.n	8006f74 <_printf_i+0x15c>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf2      	bgt.n	800702a <_printf_i+0x212>
 8007044:	e7eb      	b.n	800701e <_printf_i+0x206>
 8007046:	2500      	movs	r5, #0
 8007048:	f104 0619 	add.w	r6, r4, #25
 800704c:	e7f5      	b.n	800703a <_printf_i+0x222>
 800704e:	bf00      	nop
 8007050:	08009b06 	.word	0x08009b06
 8007054:	08009b17 	.word	0x08009b17

08007058 <std>:
 8007058:	2300      	movs	r3, #0
 800705a:	b510      	push	{r4, lr}
 800705c:	4604      	mov	r4, r0
 800705e:	e9c0 3300 	strd	r3, r3, [r0]
 8007062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007066:	6083      	str	r3, [r0, #8]
 8007068:	8181      	strh	r1, [r0, #12]
 800706a:	6643      	str	r3, [r0, #100]	@ 0x64
 800706c:	81c2      	strh	r2, [r0, #14]
 800706e:	6183      	str	r3, [r0, #24]
 8007070:	4619      	mov	r1, r3
 8007072:	2208      	movs	r2, #8
 8007074:	305c      	adds	r0, #92	@ 0x5c
 8007076:	f000 fae9 	bl	800764c <memset>
 800707a:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <std+0x58>)
 800707c:	6263      	str	r3, [r4, #36]	@ 0x24
 800707e:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <std+0x5c>)
 8007080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <std+0x60>)
 8007084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x64>)
 8007088:	6323      	str	r3, [r4, #48]	@ 0x30
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <std+0x68>)
 800708c:	6224      	str	r4, [r4, #32]
 800708e:	429c      	cmp	r4, r3
 8007090:	d006      	beq.n	80070a0 <std+0x48>
 8007092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007096:	4294      	cmp	r4, r2
 8007098:	d002      	beq.n	80070a0 <std+0x48>
 800709a:	33d0      	adds	r3, #208	@ 0xd0
 800709c:	429c      	cmp	r4, r3
 800709e:	d105      	bne.n	80070ac <std+0x54>
 80070a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f000 bb4c 	b.w	8007744 <__retarget_lock_init_recursive>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	0800749d 	.word	0x0800749d
 80070b4:	080074bf 	.word	0x080074bf
 80070b8:	080074f7 	.word	0x080074f7
 80070bc:	0800751b 	.word	0x0800751b
 80070c0:	20004bbc 	.word	0x20004bbc

080070c4 <stdio_exit_handler>:
 80070c4:	4a02      	ldr	r2, [pc, #8]	@ (80070d0 <stdio_exit_handler+0xc>)
 80070c6:	4903      	ldr	r1, [pc, #12]	@ (80070d4 <stdio_exit_handler+0x10>)
 80070c8:	4803      	ldr	r0, [pc, #12]	@ (80070d8 <stdio_exit_handler+0x14>)
 80070ca:	f000 b869 	b.w	80071a0 <_fwalk_sglue>
 80070ce:	bf00      	nop
 80070d0:	20000010 	.word	0x20000010
 80070d4:	08009341 	.word	0x08009341
 80070d8:	20000020 	.word	0x20000020

080070dc <cleanup_stdio>:
 80070dc:	6841      	ldr	r1, [r0, #4]
 80070de:	4b0c      	ldr	r3, [pc, #48]	@ (8007110 <cleanup_stdio+0x34>)
 80070e0:	4299      	cmp	r1, r3
 80070e2:	b510      	push	{r4, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	d001      	beq.n	80070ec <cleanup_stdio+0x10>
 80070e8:	f002 f92a 	bl	8009340 <_fflush_r>
 80070ec:	68a1      	ldr	r1, [r4, #8]
 80070ee:	4b09      	ldr	r3, [pc, #36]	@ (8007114 <cleanup_stdio+0x38>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <cleanup_stdio+0x1e>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f002 f923 	bl	8009340 <_fflush_r>
 80070fa:	68e1      	ldr	r1, [r4, #12]
 80070fc:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <cleanup_stdio+0x3c>)
 80070fe:	4299      	cmp	r1, r3
 8007100:	d004      	beq.n	800710c <cleanup_stdio+0x30>
 8007102:	4620      	mov	r0, r4
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f002 b91a 	b.w	8009340 <_fflush_r>
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	20004bbc 	.word	0x20004bbc
 8007114:	20004c24 	.word	0x20004c24
 8007118:	20004c8c 	.word	0x20004c8c

0800711c <global_stdio_init.part.0>:
 800711c:	b510      	push	{r4, lr}
 800711e:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <global_stdio_init.part.0+0x30>)
 8007120:	4c0b      	ldr	r4, [pc, #44]	@ (8007150 <global_stdio_init.part.0+0x34>)
 8007122:	4a0c      	ldr	r2, [pc, #48]	@ (8007154 <global_stdio_init.part.0+0x38>)
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	4620      	mov	r0, r4
 8007128:	2200      	movs	r2, #0
 800712a:	2104      	movs	r1, #4
 800712c:	f7ff ff94 	bl	8007058 <std>
 8007130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007134:	2201      	movs	r2, #1
 8007136:	2109      	movs	r1, #9
 8007138:	f7ff ff8e 	bl	8007058 <std>
 800713c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007140:	2202      	movs	r2, #2
 8007142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007146:	2112      	movs	r1, #18
 8007148:	f7ff bf86 	b.w	8007058 <std>
 800714c:	20004cf4 	.word	0x20004cf4
 8007150:	20004bbc 	.word	0x20004bbc
 8007154:	080070c5 	.word	0x080070c5

08007158 <__sfp_lock_acquire>:
 8007158:	4801      	ldr	r0, [pc, #4]	@ (8007160 <__sfp_lock_acquire+0x8>)
 800715a:	f000 baf4 	b.w	8007746 <__retarget_lock_acquire_recursive>
 800715e:	bf00      	nop
 8007160:	20004cfd 	.word	0x20004cfd

08007164 <__sfp_lock_release>:
 8007164:	4801      	ldr	r0, [pc, #4]	@ (800716c <__sfp_lock_release+0x8>)
 8007166:	f000 baef 	b.w	8007748 <__retarget_lock_release_recursive>
 800716a:	bf00      	nop
 800716c:	20004cfd 	.word	0x20004cfd

08007170 <__sinit>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	f7ff fff0 	bl	8007158 <__sfp_lock_acquire>
 8007178:	6a23      	ldr	r3, [r4, #32]
 800717a:	b11b      	cbz	r3, 8007184 <__sinit+0x14>
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f7ff bff0 	b.w	8007164 <__sfp_lock_release>
 8007184:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <__sinit+0x28>)
 8007186:	6223      	str	r3, [r4, #32]
 8007188:	4b04      	ldr	r3, [pc, #16]	@ (800719c <__sinit+0x2c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f5      	bne.n	800717c <__sinit+0xc>
 8007190:	f7ff ffc4 	bl	800711c <global_stdio_init.part.0>
 8007194:	e7f2      	b.n	800717c <__sinit+0xc>
 8007196:	bf00      	nop
 8007198:	080070dd 	.word	0x080070dd
 800719c:	20004cf4 	.word	0x20004cf4

080071a0 <_fwalk_sglue>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	4607      	mov	r7, r0
 80071a6:	4688      	mov	r8, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	2600      	movs	r6, #0
 80071ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b0:	f1b9 0901 	subs.w	r9, r9, #1
 80071b4:	d505      	bpl.n	80071c2 <_fwalk_sglue+0x22>
 80071b6:	6824      	ldr	r4, [r4, #0]
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d1f7      	bne.n	80071ac <_fwalk_sglue+0xc>
 80071bc:	4630      	mov	r0, r6
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d907      	bls.n	80071d8 <_fwalk_sglue+0x38>
 80071c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071cc:	3301      	adds	r3, #1
 80071ce:	d003      	beq.n	80071d8 <_fwalk_sglue+0x38>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	4306      	orrs	r6, r0
 80071d8:	3568      	adds	r5, #104	@ 0x68
 80071da:	e7e9      	b.n	80071b0 <_fwalk_sglue+0x10>

080071dc <iprintf>:
 80071dc:	b40f      	push	{r0, r1, r2, r3}
 80071de:	b507      	push	{r0, r1, r2, lr}
 80071e0:	4906      	ldr	r1, [pc, #24]	@ (80071fc <iprintf+0x20>)
 80071e2:	ab04      	add	r3, sp, #16
 80071e4:	6808      	ldr	r0, [r1, #0]
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	6881      	ldr	r1, [r0, #8]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f001 ff0b 	bl	8009008 <_vfiprintf_r>
 80071f2:	b003      	add	sp, #12
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b004      	add	sp, #16
 80071fa:	4770      	bx	lr
 80071fc:	2000001c 	.word	0x2000001c

08007200 <putchar>:
 8007200:	4b02      	ldr	r3, [pc, #8]	@ (800720c <putchar+0xc>)
 8007202:	4601      	mov	r1, r0
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	6882      	ldr	r2, [r0, #8]
 8007208:	f002 b924 	b.w	8009454 <_putc_r>
 800720c:	2000001c 	.word	0x2000001c

08007210 <_puts_r>:
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	6884      	ldr	r4, [r0, #8]
 8007216:	4605      	mov	r5, r0
 8007218:	460e      	mov	r6, r1
 800721a:	b90b      	cbnz	r3, 8007220 <_puts_r+0x10>
 800721c:	f7ff ffa8 	bl	8007170 <__sinit>
 8007220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007222:	07db      	lsls	r3, r3, #31
 8007224:	d405      	bmi.n	8007232 <_puts_r+0x22>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	0598      	lsls	r0, r3, #22
 800722a:	d402      	bmi.n	8007232 <_puts_r+0x22>
 800722c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800722e:	f000 fa8a 	bl	8007746 <__retarget_lock_acquire_recursive>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	0719      	lsls	r1, r3, #28
 8007236:	d502      	bpl.n	800723e <_puts_r+0x2e>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d135      	bne.n	80072aa <_puts_r+0x9a>
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f9ad 	bl	80075a0 <__swsetup_r>
 8007246:	b380      	cbz	r0, 80072aa <_puts_r+0x9a>
 8007248:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800724c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800724e:	07da      	lsls	r2, r3, #31
 8007250:	d405      	bmi.n	800725e <_puts_r+0x4e>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	059b      	lsls	r3, r3, #22
 8007256:	d402      	bmi.n	800725e <_puts_r+0x4e>
 8007258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800725a:	f000 fa75 	bl	8007748 <__retarget_lock_release_recursive>
 800725e:	4628      	mov	r0, r5
 8007260:	bd70      	pop	{r4, r5, r6, pc}
 8007262:	2b00      	cmp	r3, #0
 8007264:	da04      	bge.n	8007270 <_puts_r+0x60>
 8007266:	69a2      	ldr	r2, [r4, #24]
 8007268:	429a      	cmp	r2, r3
 800726a:	dc17      	bgt.n	800729c <_puts_r+0x8c>
 800726c:	290a      	cmp	r1, #10
 800726e:	d015      	beq.n	800729c <_puts_r+0x8c>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	7019      	strb	r1, [r3, #0]
 8007278:	68a3      	ldr	r3, [r4, #8]
 800727a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800727e:	3b01      	subs	r3, #1
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	2900      	cmp	r1, #0
 8007284:	d1ed      	bne.n	8007262 <_puts_r+0x52>
 8007286:	2b00      	cmp	r3, #0
 8007288:	da11      	bge.n	80072ae <_puts_r+0x9e>
 800728a:	4622      	mov	r2, r4
 800728c:	210a      	movs	r1, #10
 800728e:	4628      	mov	r0, r5
 8007290:	f000 f947 	bl	8007522 <__swbuf_r>
 8007294:	3001      	adds	r0, #1
 8007296:	d0d7      	beq.n	8007248 <_puts_r+0x38>
 8007298:	250a      	movs	r5, #10
 800729a:	e7d7      	b.n	800724c <_puts_r+0x3c>
 800729c:	4622      	mov	r2, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f93f 	bl	8007522 <__swbuf_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1e7      	bne.n	8007278 <_puts_r+0x68>
 80072a8:	e7ce      	b.n	8007248 <_puts_r+0x38>
 80072aa:	3e01      	subs	r6, #1
 80072ac:	e7e4      	b.n	8007278 <_puts_r+0x68>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	220a      	movs	r2, #10
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e7ee      	b.n	8007298 <_puts_r+0x88>
	...

080072bc <puts>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <puts+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7ff bfa5 	b.w	8007210 <_puts_r>
 80072c6:	bf00      	nop
 80072c8:	2000001c 	.word	0x2000001c

080072cc <setvbuf>:
 80072cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072d0:	461d      	mov	r5, r3
 80072d2:	4b57      	ldr	r3, [pc, #348]	@ (8007430 <setvbuf+0x164>)
 80072d4:	681f      	ldr	r7, [r3, #0]
 80072d6:	4604      	mov	r4, r0
 80072d8:	460e      	mov	r6, r1
 80072da:	4690      	mov	r8, r2
 80072dc:	b127      	cbz	r7, 80072e8 <setvbuf+0x1c>
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	b913      	cbnz	r3, 80072e8 <setvbuf+0x1c>
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ff44 	bl	8007170 <__sinit>
 80072e8:	f1b8 0f02 	cmp.w	r8, #2
 80072ec:	d006      	beq.n	80072fc <setvbuf+0x30>
 80072ee:	f1b8 0f01 	cmp.w	r8, #1
 80072f2:	f200 809a 	bhi.w	800742a <setvbuf+0x15e>
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	f2c0 8097 	blt.w	800742a <setvbuf+0x15e>
 80072fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	d405      	bmi.n	800730e <setvbuf+0x42>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	059a      	lsls	r2, r3, #22
 8007306:	d402      	bmi.n	800730e <setvbuf+0x42>
 8007308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730a:	f000 fa1c 	bl	8007746 <__retarget_lock_acquire_recursive>
 800730e:	4621      	mov	r1, r4
 8007310:	4638      	mov	r0, r7
 8007312:	f002 f815 	bl	8009340 <_fflush_r>
 8007316:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007318:	b141      	cbz	r1, 800732c <setvbuf+0x60>
 800731a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800731e:	4299      	cmp	r1, r3
 8007320:	d002      	beq.n	8007328 <setvbuf+0x5c>
 8007322:	4638      	mov	r0, r7
 8007324:	f001 f86c 	bl	8008400 <_free_r>
 8007328:	2300      	movs	r3, #0
 800732a:	6363      	str	r3, [r4, #52]	@ 0x34
 800732c:	2300      	movs	r3, #0
 800732e:	61a3      	str	r3, [r4, #24]
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	061b      	lsls	r3, r3, #24
 8007336:	d503      	bpl.n	8007340 <setvbuf+0x74>
 8007338:	6921      	ldr	r1, [r4, #16]
 800733a:	4638      	mov	r0, r7
 800733c:	f001 f860 	bl	8008400 <_free_r>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	f1b8 0f02 	cmp.w	r8, #2
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	d061      	beq.n	8007416 <setvbuf+0x14a>
 8007352:	ab01      	add	r3, sp, #4
 8007354:	466a      	mov	r2, sp
 8007356:	4621      	mov	r1, r4
 8007358:	4638      	mov	r0, r7
 800735a:	f002 f819 	bl	8009390 <__swhatbuf_r>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	4318      	orrs	r0, r3
 8007362:	81a0      	strh	r0, [r4, #12]
 8007364:	bb2d      	cbnz	r5, 80073b2 <setvbuf+0xe6>
 8007366:	9d00      	ldr	r5, [sp, #0]
 8007368:	4628      	mov	r0, r5
 800736a:	f001 f893 	bl	8008494 <malloc>
 800736e:	4606      	mov	r6, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	d152      	bne.n	800741a <setvbuf+0x14e>
 8007374:	f8dd 9000 	ldr.w	r9, [sp]
 8007378:	45a9      	cmp	r9, r5
 800737a:	d140      	bne.n	80073fe <setvbuf+0x132>
 800737c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	f043 0202 	orr.w	r2, r3, #2
 8007388:	81a2      	strh	r2, [r4, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	60a2      	str	r2, [r4, #8]
 800738e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	6122      	str	r2, [r4, #16]
 8007396:	2201      	movs	r2, #1
 8007398:	6162      	str	r2, [r4, #20]
 800739a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800739c:	07d6      	lsls	r6, r2, #31
 800739e:	d404      	bmi.n	80073aa <setvbuf+0xde>
 80073a0:	0598      	lsls	r0, r3, #22
 80073a2:	d402      	bmi.n	80073aa <setvbuf+0xde>
 80073a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a6:	f000 f9cf 	bl	8007748 <__retarget_lock_release_recursive>
 80073aa:	4628      	mov	r0, r5
 80073ac:	b003      	add	sp, #12
 80073ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d0d8      	beq.n	8007368 <setvbuf+0x9c>
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	b913      	cbnz	r3, 80073c0 <setvbuf+0xf4>
 80073ba:	4638      	mov	r0, r7
 80073bc:	f7ff fed8 	bl	8007170 <__sinit>
 80073c0:	f1b8 0f01 	cmp.w	r8, #1
 80073c4:	bf08      	it	eq
 80073c6:	89a3      	ldrheq	r3, [r4, #12]
 80073c8:	6026      	str	r6, [r4, #0]
 80073ca:	bf04      	itt	eq
 80073cc:	f043 0301 	orreq.w	r3, r3, #1
 80073d0:	81a3      	strheq	r3, [r4, #12]
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	f013 0208 	ands.w	r2, r3, #8
 80073da:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80073de:	d01e      	beq.n	800741e <setvbuf+0x152>
 80073e0:	07d9      	lsls	r1, r3, #31
 80073e2:	bf41      	itttt	mi
 80073e4:	2200      	movmi	r2, #0
 80073e6:	426d      	negmi	r5, r5
 80073e8:	60a2      	strmi	r2, [r4, #8]
 80073ea:	61a5      	strmi	r5, [r4, #24]
 80073ec:	bf58      	it	pl
 80073ee:	60a5      	strpl	r5, [r4, #8]
 80073f0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073f2:	07d2      	lsls	r2, r2, #31
 80073f4:	d401      	bmi.n	80073fa <setvbuf+0x12e>
 80073f6:	059b      	lsls	r3, r3, #22
 80073f8:	d513      	bpl.n	8007422 <setvbuf+0x156>
 80073fa:	2500      	movs	r5, #0
 80073fc:	e7d5      	b.n	80073aa <setvbuf+0xde>
 80073fe:	4648      	mov	r0, r9
 8007400:	f001 f848 	bl	8008494 <malloc>
 8007404:	4606      	mov	r6, r0
 8007406:	2800      	cmp	r0, #0
 8007408:	d0b8      	beq.n	800737c <setvbuf+0xb0>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007410:	81a3      	strh	r3, [r4, #12]
 8007412:	464d      	mov	r5, r9
 8007414:	e7cf      	b.n	80073b6 <setvbuf+0xea>
 8007416:	2500      	movs	r5, #0
 8007418:	e7b2      	b.n	8007380 <setvbuf+0xb4>
 800741a:	46a9      	mov	r9, r5
 800741c:	e7f5      	b.n	800740a <setvbuf+0x13e>
 800741e:	60a2      	str	r2, [r4, #8]
 8007420:	e7e6      	b.n	80073f0 <setvbuf+0x124>
 8007422:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007424:	f000 f990 	bl	8007748 <__retarget_lock_release_recursive>
 8007428:	e7e7      	b.n	80073fa <setvbuf+0x12e>
 800742a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800742e:	e7bc      	b.n	80073aa <setvbuf+0xde>
 8007430:	2000001c 	.word	0x2000001c

08007434 <sniprintf>:
 8007434:	b40c      	push	{r2, r3}
 8007436:	b530      	push	{r4, r5, lr}
 8007438:	4b17      	ldr	r3, [pc, #92]	@ (8007498 <sniprintf+0x64>)
 800743a:	1e0c      	subs	r4, r1, #0
 800743c:	681d      	ldr	r5, [r3, #0]
 800743e:	b09d      	sub	sp, #116	@ 0x74
 8007440:	da08      	bge.n	8007454 <sniprintf+0x20>
 8007442:	238b      	movs	r3, #139	@ 0x8b
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800744a:	b01d      	add	sp, #116	@ 0x74
 800744c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007450:	b002      	add	sp, #8
 8007452:	4770      	bx	lr
 8007454:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007458:	f8ad 3014 	strh.w	r3, [sp, #20]
 800745c:	bf14      	ite	ne
 800745e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007462:	4623      	moveq	r3, r4
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007474:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007476:	ab21      	add	r3, sp, #132	@ 0x84
 8007478:	a902      	add	r1, sp, #8
 800747a:	4628      	mov	r0, r5
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	f001 fc9d 	bl	8008dbc <_svfiprintf_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	bfbc      	itt	lt
 8007486:	238b      	movlt	r3, #139	@ 0x8b
 8007488:	602b      	strlt	r3, [r5, #0]
 800748a:	2c00      	cmp	r4, #0
 800748c:	d0dd      	beq.n	800744a <sniprintf+0x16>
 800748e:	9b02      	ldr	r3, [sp, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e7d9      	b.n	800744a <sniprintf+0x16>
 8007496:	bf00      	nop
 8007498:	2000001c 	.word	0x2000001c

0800749c <__sread>:
 800749c:	b510      	push	{r4, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	f000 f900 	bl	80076a8 <_read_r>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	bfab      	itete	ge
 80074ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074ae:	89a3      	ldrhlt	r3, [r4, #12]
 80074b0:	181b      	addge	r3, r3, r0
 80074b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074b6:	bfac      	ite	ge
 80074b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074ba:	81a3      	strhlt	r3, [r4, #12]
 80074bc:	bd10      	pop	{r4, pc}

080074be <__swrite>:
 80074be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	461f      	mov	r7, r3
 80074c4:	898b      	ldrh	r3, [r1, #12]
 80074c6:	05db      	lsls	r3, r3, #23
 80074c8:	4605      	mov	r5, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	4616      	mov	r6, r2
 80074ce:	d505      	bpl.n	80074dc <__swrite+0x1e>
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	2302      	movs	r3, #2
 80074d6:	2200      	movs	r2, #0
 80074d8:	f000 f8d4 	bl	8007684 <_lseek_r>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	4628      	mov	r0, r5
 80074ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	f000 b8eb 	b.w	80076cc <_write_r>

080074f6 <__sseek>:
 80074f6:	b510      	push	{r4, lr}
 80074f8:	460c      	mov	r4, r1
 80074fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fe:	f000 f8c1 	bl	8007684 <_lseek_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	bf15      	itete	ne
 8007508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800750a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800750e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007512:	81a3      	strheq	r3, [r4, #12]
 8007514:	bf18      	it	ne
 8007516:	81a3      	strhne	r3, [r4, #12]
 8007518:	bd10      	pop	{r4, pc}

0800751a <__sclose>:
 800751a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751e:	f000 b8a1 	b.w	8007664 <_close_r>

08007522 <__swbuf_r>:
 8007522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007524:	460e      	mov	r6, r1
 8007526:	4614      	mov	r4, r2
 8007528:	4605      	mov	r5, r0
 800752a:	b118      	cbz	r0, 8007534 <__swbuf_r+0x12>
 800752c:	6a03      	ldr	r3, [r0, #32]
 800752e:	b90b      	cbnz	r3, 8007534 <__swbuf_r+0x12>
 8007530:	f7ff fe1e 	bl	8007170 <__sinit>
 8007534:	69a3      	ldr	r3, [r4, #24]
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	071a      	lsls	r2, r3, #28
 800753c:	d501      	bpl.n	8007542 <__swbuf_r+0x20>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	b943      	cbnz	r3, 8007554 <__swbuf_r+0x32>
 8007542:	4621      	mov	r1, r4
 8007544:	4628      	mov	r0, r5
 8007546:	f000 f82b 	bl	80075a0 <__swsetup_r>
 800754a:	b118      	cbz	r0, 8007554 <__swbuf_r+0x32>
 800754c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007550:	4638      	mov	r0, r7
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	6922      	ldr	r2, [r4, #16]
 8007558:	1a98      	subs	r0, r3, r2
 800755a:	6963      	ldr	r3, [r4, #20]
 800755c:	b2f6      	uxtb	r6, r6
 800755e:	4283      	cmp	r3, r0
 8007560:	4637      	mov	r7, r6
 8007562:	dc05      	bgt.n	8007570 <__swbuf_r+0x4e>
 8007564:	4621      	mov	r1, r4
 8007566:	4628      	mov	r0, r5
 8007568:	f001 feea 	bl	8009340 <_fflush_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	d1ed      	bne.n	800754c <__swbuf_r+0x2a>
 8007570:	68a3      	ldr	r3, [r4, #8]
 8007572:	3b01      	subs	r3, #1
 8007574:	60a3      	str	r3, [r4, #8]
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	6022      	str	r2, [r4, #0]
 800757c:	701e      	strb	r6, [r3, #0]
 800757e:	6962      	ldr	r2, [r4, #20]
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	429a      	cmp	r2, r3
 8007584:	d004      	beq.n	8007590 <__swbuf_r+0x6e>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d5e1      	bpl.n	8007550 <__swbuf_r+0x2e>
 800758c:	2e0a      	cmp	r6, #10
 800758e:	d1df      	bne.n	8007550 <__swbuf_r+0x2e>
 8007590:	4621      	mov	r1, r4
 8007592:	4628      	mov	r0, r5
 8007594:	f001 fed4 	bl	8009340 <_fflush_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	d0d9      	beq.n	8007550 <__swbuf_r+0x2e>
 800759c:	e7d6      	b.n	800754c <__swbuf_r+0x2a>
	...

080075a0 <__swsetup_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4b29      	ldr	r3, [pc, #164]	@ (8007648 <__swsetup_r+0xa8>)
 80075a4:	4605      	mov	r5, r0
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	460c      	mov	r4, r1
 80075aa:	b118      	cbz	r0, 80075b4 <__swsetup_r+0x14>
 80075ac:	6a03      	ldr	r3, [r0, #32]
 80075ae:	b90b      	cbnz	r3, 80075b4 <__swsetup_r+0x14>
 80075b0:	f7ff fdde 	bl	8007170 <__sinit>
 80075b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b8:	0719      	lsls	r1, r3, #28
 80075ba:	d422      	bmi.n	8007602 <__swsetup_r+0x62>
 80075bc:	06da      	lsls	r2, r3, #27
 80075be:	d407      	bmi.n	80075d0 <__swsetup_r+0x30>
 80075c0:	2209      	movs	r2, #9
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075ce:	e033      	b.n	8007638 <__swsetup_r+0x98>
 80075d0:	0758      	lsls	r0, r3, #29
 80075d2:	d512      	bpl.n	80075fa <__swsetup_r+0x5a>
 80075d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075d6:	b141      	cbz	r1, 80075ea <__swsetup_r+0x4a>
 80075d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075dc:	4299      	cmp	r1, r3
 80075de:	d002      	beq.n	80075e6 <__swsetup_r+0x46>
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 ff0d 	bl	8008400 <_free_r>
 80075e6:	2300      	movs	r3, #0
 80075e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	2300      	movs	r3, #0
 80075f4:	6063      	str	r3, [r4, #4]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f043 0308 	orr.w	r3, r3, #8
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	b94b      	cbnz	r3, 800761a <__swsetup_r+0x7a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800760c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007610:	d003      	beq.n	800761a <__swsetup_r+0x7a>
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f001 fee1 	bl	80093dc <__smakebuf_r>
 800761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761e:	f013 0201 	ands.w	r2, r3, #1
 8007622:	d00a      	beq.n	800763a <__swsetup_r+0x9a>
 8007624:	2200      	movs	r2, #0
 8007626:	60a2      	str	r2, [r4, #8]
 8007628:	6962      	ldr	r2, [r4, #20]
 800762a:	4252      	negs	r2, r2
 800762c:	61a2      	str	r2, [r4, #24]
 800762e:	6922      	ldr	r2, [r4, #16]
 8007630:	b942      	cbnz	r2, 8007644 <__swsetup_r+0xa4>
 8007632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007636:	d1c5      	bne.n	80075c4 <__swsetup_r+0x24>
 8007638:	bd38      	pop	{r3, r4, r5, pc}
 800763a:	0799      	lsls	r1, r3, #30
 800763c:	bf58      	it	pl
 800763e:	6962      	ldrpl	r2, [r4, #20]
 8007640:	60a2      	str	r2, [r4, #8]
 8007642:	e7f4      	b.n	800762e <__swsetup_r+0x8e>
 8007644:	2000      	movs	r0, #0
 8007646:	e7f7      	b.n	8007638 <__swsetup_r+0x98>
 8007648:	2000001c 	.word	0x2000001c

0800764c <memset>:
 800764c:	4402      	add	r2, r0
 800764e:	4603      	mov	r3, r0
 8007650:	4293      	cmp	r3, r2
 8007652:	d100      	bne.n	8007656 <memset+0xa>
 8007654:	4770      	bx	lr
 8007656:	f803 1b01 	strb.w	r1, [r3], #1
 800765a:	e7f9      	b.n	8007650 <memset+0x4>

0800765c <_localeconv_r>:
 800765c:	4800      	ldr	r0, [pc, #0]	@ (8007660 <_localeconv_r+0x4>)
 800765e:	4770      	bx	lr
 8007660:	2000015c 	.word	0x2000015c

08007664 <_close_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	@ (8007680 <_close_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fa f8d6 	bl	8001820 <_close>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_close_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_close_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20004cf8 	.word	0x20004cf8

08007684 <_lseek_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	@ (80076a4 <_lseek_r+0x20>)
 8007688:	4604      	mov	r4, r0
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7fa f8eb 	bl	800186e <_lseek>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_lseek_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_lseek_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20004cf8 	.word	0x20004cf8

080076a8 <_read_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_read_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7fa f895 	bl	80017e6 <_read>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_read_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_read_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20004cf8 	.word	0x20004cf8

080076cc <_write_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_write_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7f9 fc0e 	bl	8000efc <_write>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_write_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_write_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20004cf8 	.word	0x20004cf8

080076f0 <__errno>:
 80076f0:	4b01      	ldr	r3, [pc, #4]	@ (80076f8 <__errno+0x8>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	2000001c 	.word	0x2000001c

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	@ (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	@ (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	@ (8007740 <__libc_init_array+0x44>)
 8007710:	f002 f806 	bl	8009720 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08009e70 	.word	0x08009e70
 8007738:	08009e70 	.word	0x08009e70
 800773c:	08009e70 	.word	0x08009e70
 8007740:	08009e74 	.word	0x08009e74

08007744 <__retarget_lock_init_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_acquire_recursive>:
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_release_recursive>:
 8007748:	4770      	bx	lr

0800774a <memcpy>:
 800774a:	440a      	add	r2, r1
 800774c:	4291      	cmp	r1, r2
 800774e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007752:	d100      	bne.n	8007756 <memcpy+0xc>
 8007754:	4770      	bx	lr
 8007756:	b510      	push	{r4, lr}
 8007758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007760:	4291      	cmp	r1, r2
 8007762:	d1f9      	bne.n	8007758 <memcpy+0xe>
 8007764:	bd10      	pop	{r4, pc}

08007766 <quorem>:
 8007766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	6903      	ldr	r3, [r0, #16]
 800776c:	690c      	ldr	r4, [r1, #16]
 800776e:	42a3      	cmp	r3, r4
 8007770:	4607      	mov	r7, r0
 8007772:	db7e      	blt.n	8007872 <quorem+0x10c>
 8007774:	3c01      	subs	r4, #1
 8007776:	f101 0814 	add.w	r8, r1, #20
 800777a:	00a3      	lsls	r3, r4, #2
 800777c:	f100 0514 	add.w	r5, r0, #20
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800778c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007790:	3301      	adds	r3, #1
 8007792:	429a      	cmp	r2, r3
 8007794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007798:	fbb2 f6f3 	udiv	r6, r2, r3
 800779c:	d32e      	bcc.n	80077fc <quorem+0x96>
 800779e:	f04f 0a00 	mov.w	sl, #0
 80077a2:	46c4      	mov	ip, r8
 80077a4:	46ae      	mov	lr, r5
 80077a6:	46d3      	mov	fp, sl
 80077a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077ac:	b298      	uxth	r0, r3
 80077ae:	fb06 a000 	mla	r0, r6, r0, sl
 80077b2:	0c02      	lsrs	r2, r0, #16
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	fb06 2303 	mla	r3, r6, r3, r2
 80077ba:	f8de 2000 	ldr.w	r2, [lr]
 80077be:	b280      	uxth	r0, r0
 80077c0:	b292      	uxth	r2, r2
 80077c2:	1a12      	subs	r2, r2, r0
 80077c4:	445a      	add	r2, fp
 80077c6:	f8de 0000 	ldr.w	r0, [lr]
 80077ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077d8:	b292      	uxth	r2, r2
 80077da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077de:	45e1      	cmp	r9, ip
 80077e0:	f84e 2b04 	str.w	r2, [lr], #4
 80077e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077e8:	d2de      	bcs.n	80077a8 <quorem+0x42>
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	58eb      	ldr	r3, [r5, r3]
 80077ee:	b92b      	cbnz	r3, 80077fc <quorem+0x96>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	3b04      	subs	r3, #4
 80077f4:	429d      	cmp	r5, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	d32f      	bcc.n	800785a <quorem+0xf4>
 80077fa:	613c      	str	r4, [r7, #16]
 80077fc:	4638      	mov	r0, r7
 80077fe:	f001 f979 	bl	8008af4 <__mcmp>
 8007802:	2800      	cmp	r0, #0
 8007804:	db25      	blt.n	8007852 <quorem+0xec>
 8007806:	4629      	mov	r1, r5
 8007808:	2000      	movs	r0, #0
 800780a:	f858 2b04 	ldr.w	r2, [r8], #4
 800780e:	f8d1 c000 	ldr.w	ip, [r1]
 8007812:	fa1f fe82 	uxth.w	lr, r2
 8007816:	fa1f f38c 	uxth.w	r3, ip
 800781a:	eba3 030e 	sub.w	r3, r3, lr
 800781e:	4403      	add	r3, r0
 8007820:	0c12      	lsrs	r2, r2, #16
 8007822:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007826:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007830:	45c1      	cmp	r9, r8
 8007832:	f841 3b04 	str.w	r3, [r1], #4
 8007836:	ea4f 4022 	mov.w	r0, r2, asr #16
 800783a:	d2e6      	bcs.n	800780a <quorem+0xa4>
 800783c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007840:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007844:	b922      	cbnz	r2, 8007850 <quorem+0xea>
 8007846:	3b04      	subs	r3, #4
 8007848:	429d      	cmp	r5, r3
 800784a:	461a      	mov	r2, r3
 800784c:	d30b      	bcc.n	8007866 <quorem+0x100>
 800784e:	613c      	str	r4, [r7, #16]
 8007850:	3601      	adds	r6, #1
 8007852:	4630      	mov	r0, r6
 8007854:	b003      	add	sp, #12
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	3b04      	subs	r3, #4
 800785e:	2a00      	cmp	r2, #0
 8007860:	d1cb      	bne.n	80077fa <quorem+0x94>
 8007862:	3c01      	subs	r4, #1
 8007864:	e7c6      	b.n	80077f4 <quorem+0x8e>
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	3b04      	subs	r3, #4
 800786a:	2a00      	cmp	r2, #0
 800786c:	d1ef      	bne.n	800784e <quorem+0xe8>
 800786e:	3c01      	subs	r4, #1
 8007870:	e7ea      	b.n	8007848 <quorem+0xe2>
 8007872:	2000      	movs	r0, #0
 8007874:	e7ee      	b.n	8007854 <quorem+0xee>
	...

08007878 <_dtoa_r>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	69c7      	ldr	r7, [r0, #28]
 800787e:	b099      	sub	sp, #100	@ 0x64
 8007880:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007884:	ec55 4b10 	vmov	r4, r5, d0
 8007888:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800788a:	9109      	str	r1, [sp, #36]	@ 0x24
 800788c:	4683      	mov	fp, r0
 800788e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007890:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007892:	b97f      	cbnz	r7, 80078b4 <_dtoa_r+0x3c>
 8007894:	2010      	movs	r0, #16
 8007896:	f000 fdfd 	bl	8008494 <malloc>
 800789a:	4602      	mov	r2, r0
 800789c:	f8cb 001c 	str.w	r0, [fp, #28]
 80078a0:	b920      	cbnz	r0, 80078ac <_dtoa_r+0x34>
 80078a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007b40 <_dtoa_r+0x2c8>)
 80078a4:	21ef      	movs	r1, #239	@ 0xef
 80078a6:	48a7      	ldr	r0, [pc, #668]	@ (8007b44 <_dtoa_r+0x2cc>)
 80078a8:	f001 fe54 	bl	8009554 <__assert_func>
 80078ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078b0:	6007      	str	r7, [r0, #0]
 80078b2:	60c7      	str	r7, [r0, #12]
 80078b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	b159      	cbz	r1, 80078d4 <_dtoa_r+0x5c>
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	604a      	str	r2, [r1, #4]
 80078c0:	2301      	movs	r3, #1
 80078c2:	4093      	lsls	r3, r2
 80078c4:	608b      	str	r3, [r1, #8]
 80078c6:	4658      	mov	r0, fp
 80078c8:	f000 feda 	bl	8008680 <_Bfree>
 80078cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	1e2b      	subs	r3, r5, #0
 80078d6:	bfb9      	ittee	lt
 80078d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078dc:	9303      	strlt	r3, [sp, #12]
 80078de:	2300      	movge	r3, #0
 80078e0:	6033      	strge	r3, [r6, #0]
 80078e2:	9f03      	ldr	r7, [sp, #12]
 80078e4:	4b98      	ldr	r3, [pc, #608]	@ (8007b48 <_dtoa_r+0x2d0>)
 80078e6:	bfbc      	itt	lt
 80078e8:	2201      	movlt	r2, #1
 80078ea:	6032      	strlt	r2, [r6, #0]
 80078ec:	43bb      	bics	r3, r7
 80078ee:	d112      	bne.n	8007916 <_dtoa_r+0x9e>
 80078f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078fc:	4323      	orrs	r3, r4
 80078fe:	f000 854d 	beq.w	800839c <_dtoa_r+0xb24>
 8007902:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007904:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b5c <_dtoa_r+0x2e4>
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 854f 	beq.w	80083ac <_dtoa_r+0xb34>
 800790e:	f10a 0303 	add.w	r3, sl, #3
 8007912:	f000 bd49 	b.w	80083a8 <_dtoa_r+0xb30>
 8007916:	ed9d 7b02 	vldr	d7, [sp, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	ec51 0b17 	vmov	r0, r1, d7
 8007920:	2300      	movs	r3, #0
 8007922:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007926:	f7f9 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800792a:	4680      	mov	r8, r0
 800792c:	b158      	cbz	r0, 8007946 <_dtoa_r+0xce>
 800792e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007930:	2301      	movs	r3, #1
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007936:	b113      	cbz	r3, 800793e <_dtoa_r+0xc6>
 8007938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800793a:	4b84      	ldr	r3, [pc, #528]	@ (8007b4c <_dtoa_r+0x2d4>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b60 <_dtoa_r+0x2e8>
 8007942:	f000 bd33 	b.w	80083ac <_dtoa_r+0xb34>
 8007946:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800794a:	aa16      	add	r2, sp, #88	@ 0x58
 800794c:	a917      	add	r1, sp, #92	@ 0x5c
 800794e:	4658      	mov	r0, fp
 8007950:	f001 f980 	bl	8008c54 <__d2b>
 8007954:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007958:	4681      	mov	r9, r0
 800795a:	2e00      	cmp	r6, #0
 800795c:	d077      	beq.n	8007a4e <_dtoa_r+0x1d6>
 800795e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007960:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800796c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007970:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007974:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007978:	4619      	mov	r1, r3
 800797a:	2200      	movs	r2, #0
 800797c:	4b74      	ldr	r3, [pc, #464]	@ (8007b50 <_dtoa_r+0x2d8>)
 800797e:	f7f8 fca3 	bl	80002c8 <__aeabi_dsub>
 8007982:	a369      	add	r3, pc, #420	@ (adr r3, 8007b28 <_dtoa_r+0x2b0>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe56 	bl	8000638 <__aeabi_dmul>
 800798c:	a368      	add	r3, pc, #416	@ (adr r3, 8007b30 <_dtoa_r+0x2b8>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fc9b 	bl	80002cc <__adddf3>
 8007996:	4604      	mov	r4, r0
 8007998:	4630      	mov	r0, r6
 800799a:	460d      	mov	r5, r1
 800799c:	f7f8 fde2 	bl	8000564 <__aeabi_i2d>
 80079a0:	a365      	add	r3, pc, #404	@ (adr r3, 8007b38 <_dtoa_r+0x2c0>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fe47 	bl	8000638 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 fc8b 	bl	80002cc <__adddf3>
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f9 f8ed 	bl	8000b98 <__aeabi_d2iz>
 80079be:	2200      	movs	r2, #0
 80079c0:	4607      	mov	r7, r0
 80079c2:	2300      	movs	r3, #0
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f9 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 80079cc:	b140      	cbz	r0, 80079e0 <_dtoa_r+0x168>
 80079ce:	4638      	mov	r0, r7
 80079d0:	f7f8 fdc8 	bl	8000564 <__aeabi_i2d>
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	f7f9 f896 	bl	8000b08 <__aeabi_dcmpeq>
 80079dc:	b900      	cbnz	r0, 80079e0 <_dtoa_r+0x168>
 80079de:	3f01      	subs	r7, #1
 80079e0:	2f16      	cmp	r7, #22
 80079e2:	d851      	bhi.n	8007a88 <_dtoa_r+0x210>
 80079e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007b54 <_dtoa_r+0x2dc>)
 80079e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f2:	f7f9 f893 	bl	8000b1c <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d048      	beq.n	8007a8c <_dtoa_r+0x214>
 80079fa:	3f01      	subs	r7, #1
 80079fc:	2300      	movs	r3, #0
 80079fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	bf44      	itt	mi
 8007a08:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	9208      	str	r2, [sp, #32]
 8007a10:	bf54      	ite	pl
 8007a12:	f04f 0800 	movpl.w	r8, #0
 8007a16:	9308      	strmi	r3, [sp, #32]
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	db39      	blt.n	8007a90 <_dtoa_r+0x218>
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a20:	443b      	add	r3, r7
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d864      	bhi.n	8007af8 <_dtoa_r+0x280>
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	bfc4      	itt	gt
 8007a32:	3b04      	subgt	r3, #4
 8007a34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a38:	f1a3 0302 	sub.w	r3, r3, #2
 8007a3c:	bfcc      	ite	gt
 8007a3e:	2400      	movgt	r4, #0
 8007a40:	2401      	movle	r4, #1
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d863      	bhi.n	8007b0e <_dtoa_r+0x296>
 8007a46:	e8df f003 	tbb	[pc, r3]
 8007a4a:	372a      	.short	0x372a
 8007a4c:	5535      	.short	0x5535
 8007a4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a52:	441e      	add	r6, r3
 8007a54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	bfc1      	itttt	gt
 8007a5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a60:	409f      	lslgt	r7, r3
 8007a62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a6a:	bfd6      	itet	le
 8007a6c:	f1c3 0320 	rsble	r3, r3, #32
 8007a70:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a74:	fa04 f003 	lslle.w	r0, r4, r3
 8007a78:	f7f8 fd64 	bl	8000544 <__aeabi_ui2d>
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a82:	3e01      	subs	r6, #1
 8007a84:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a86:	e777      	b.n	8007978 <_dtoa_r+0x100>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e7b8      	b.n	80079fe <_dtoa_r+0x186>
 8007a8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a8e:	e7b7      	b.n	8007a00 <_dtoa_r+0x188>
 8007a90:	427b      	negs	r3, r7
 8007a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a94:	2300      	movs	r3, #0
 8007a96:	eba8 0807 	sub.w	r8, r8, r7
 8007a9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a9c:	e7c4      	b.n	8007a28 <_dtoa_r+0x1b0>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc35      	bgt.n	8007b14 <_dtoa_r+0x29c>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	9307      	str	r3, [sp, #28]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ab2:	e00b      	b.n	8007acc <_dtoa_r+0x254>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7f3      	b.n	8007aa0 <_dtoa_r+0x228>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	9307      	str	r3, [sp, #28]
 8007ac8:	bfb8      	it	lt
 8007aca:	2301      	movlt	r3, #1
 8007acc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	f102 0514 	add.w	r5, r2, #20
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	d91f      	bls.n	8007b1c <_dtoa_r+0x2a4>
 8007adc:	6041      	str	r1, [r0, #4]
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fd8e 	bl	8008600 <_Balloc>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d13c      	bne.n	8007b64 <_dtoa_r+0x2ec>
 8007aea:	4b1b      	ldr	r3, [pc, #108]	@ (8007b58 <_dtoa_r+0x2e0>)
 8007aec:	4602      	mov	r2, r0
 8007aee:	f240 11af 	movw	r1, #431	@ 0x1af
 8007af2:	e6d8      	b.n	80078a6 <_dtoa_r+0x2e>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e7e0      	b.n	8007aba <_dtoa_r+0x242>
 8007af8:	2401      	movs	r4, #1
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2312      	movs	r3, #18
 8007b0c:	e7d0      	b.n	8007ab0 <_dtoa_r+0x238>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	e7f5      	b.n	8007b00 <_dtoa_r+0x288>
 8007b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	e7d7      	b.n	8007acc <_dtoa_r+0x254>
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	0052      	lsls	r2, r2, #1
 8007b20:	e7d8      	b.n	8007ad4 <_dtoa_r+0x25c>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	08009b35 	.word	0x08009b35
 8007b44:	08009b4c 	.word	0x08009b4c
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	08009b05 	.word	0x08009b05
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	08009c48 	.word	0x08009c48
 8007b58:	08009ba4 	.word	0x08009ba4
 8007b5c:	08009b31 	.word	0x08009b31
 8007b60:	08009b04 	.word	0x08009b04
 8007b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b68:	6018      	str	r0, [r3, #0]
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	2b0e      	cmp	r3, #14
 8007b6e:	f200 80a4 	bhi.w	8007cba <_dtoa_r+0x442>
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	f000 80a1 	beq.w	8007cba <_dtoa_r+0x442>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	dd33      	ble.n	8007be4 <_dtoa_r+0x36c>
 8007b7c:	4bad      	ldr	r3, [pc, #692]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007b7e:	f007 020f 	and.w	r2, r7, #15
 8007b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b86:	ed93 7b00 	vldr	d7, [r3]
 8007b8a:	05f8      	lsls	r0, r7, #23
 8007b8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b94:	d516      	bpl.n	8007bc4 <_dtoa_r+0x34c>
 8007b96:	4ba8      	ldr	r3, [pc, #672]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba0:	f7f8 fe74 	bl	800088c <__aeabi_ddiv>
 8007ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba8:	f004 040f 	and.w	r4, r4, #15
 8007bac:	2603      	movs	r6, #3
 8007bae:	4da2      	ldr	r5, [pc, #648]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007bb0:	b954      	cbnz	r4, 8007bc8 <_dtoa_r+0x350>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bba:	f7f8 fe67 	bl	800088c <__aeabi_ddiv>
 8007bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc2:	e028      	b.n	8007c16 <_dtoa_r+0x39e>
 8007bc4:	2602      	movs	r6, #2
 8007bc6:	e7f2      	b.n	8007bae <_dtoa_r+0x336>
 8007bc8:	07e1      	lsls	r1, r4, #31
 8007bca:	d508      	bpl.n	8007bde <_dtoa_r+0x366>
 8007bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd4:	f7f8 fd30 	bl	8000638 <__aeabi_dmul>
 8007bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bdc:	3601      	adds	r6, #1
 8007bde:	1064      	asrs	r4, r4, #1
 8007be0:	3508      	adds	r5, #8
 8007be2:	e7e5      	b.n	8007bb0 <_dtoa_r+0x338>
 8007be4:	f000 80d2 	beq.w	8007d8c <_dtoa_r+0x514>
 8007be8:	427c      	negs	r4, r7
 8007bea:	4b92      	ldr	r3, [pc, #584]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007bec:	4d92      	ldr	r5, [pc, #584]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007bee:	f004 020f 	and.w	r2, r4, #15
 8007bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bfe:	f7f8 fd1b 	bl	8000638 <__aeabi_dmul>
 8007c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c06:	1124      	asrs	r4, r4, #4
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2602      	movs	r6, #2
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	f040 80b2 	bne.w	8007d76 <_dtoa_r+0x4fe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d3      	bne.n	8007bbe <_dtoa_r+0x346>
 8007c16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80b7 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c22:	4b86      	ldr	r3, [pc, #536]	@ (8007e3c <_dtoa_r+0x5c4>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 ff77 	bl	8000b1c <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f000 80ae 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80aa 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd37      	ble.n	8007cb2 <_dtoa_r+0x43a>
 8007c42:	1e7b      	subs	r3, r7, #1
 8007c44:	9304      	str	r3, [sp, #16]
 8007c46:	4620      	mov	r0, r4
 8007c48:	4b7d      	ldr	r3, [pc, #500]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fcf3 	bl	8000638 <__aeabi_dmul>
 8007c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c56:	9c00      	ldr	r4, [sp, #0]
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7f8 fc82 	bl	8000564 <__aeabi_i2d>
 8007c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c64:	f7f8 fce8 	bl	8000638 <__aeabi_dmul>
 8007c68:	4b76      	ldr	r3, [pc, #472]	@ (8007e44 <_dtoa_r+0x5cc>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f7f8 fb2e 	bl	80002cc <__adddf3>
 8007c70:	4605      	mov	r5, r0
 8007c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	f040 808d 	bne.w	8007d96 <_dtoa_r+0x51e>
 8007c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c80:	4b71      	ldr	r3, [pc, #452]	@ (8007e48 <_dtoa_r+0x5d0>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fb20 	bl	80002c8 <__aeabi_dsub>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4633      	mov	r3, r6
 8007c94:	f7f8 ff60 	bl	8000b58 <__aeabi_dcmpgt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f040 828b 	bne.w	80081b4 <_dtoa_r+0x93c>
 8007c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ca8:	f7f8 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 8128 	bne.w	8007f02 <_dtoa_r+0x68a>
 8007cb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f2c0 815a 	blt.w	8007f76 <_dtoa_r+0x6fe>
 8007cc2:	2f0e      	cmp	r7, #14
 8007cc4:	f300 8157 	bgt.w	8007f76 <_dtoa_r+0x6fe>
 8007cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007cca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cce:	ed93 7b00 	vldr	d7, [r3]
 8007cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	ed8d 7b00 	vstr	d7, [sp]
 8007cda:	da03      	bge.n	8007ce4 <_dtoa_r+0x46c>
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f340 8101 	ble.w	8007ee6 <_dtoa_r+0x66e>
 8007ce4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce8:	4656      	mov	r6, sl
 8007cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fdcb 	bl	800088c <__aeabi_ddiv>
 8007cf6:	f7f8 ff4f 	bl	8000b98 <__aeabi_d2iz>
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	f7f8 fc32 	bl	8000564 <__aeabi_i2d>
 8007d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d04:	f7f8 fc98 	bl	8000638 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d14:	f7f8 fad8 	bl	80002c8 <__aeabi_dsub>
 8007d18:	f806 4b01 	strb.w	r4, [r6], #1
 8007d1c:	9d07      	ldr	r5, [sp, #28]
 8007d1e:	eba6 040a 	sub.w	r4, r6, sl
 8007d22:	42a5      	cmp	r5, r4
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	f040 8117 	bne.w	8007f5a <_dtoa_r+0x6e2>
 8007d2c:	f7f8 face 	bl	80002cc <__adddf3>
 8007d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	f7f8 ff0e 	bl	8000b58 <__aeabi_dcmpgt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f040 80f9 	bne.w	8007f34 <_dtoa_r+0x6bc>
 8007d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 fedd 	bl	8000b08 <__aeabi_dcmpeq>
 8007d4e:	b118      	cbz	r0, 8007d58 <_dtoa_r+0x4e0>
 8007d50:	f018 0f01 	tst.w	r8, #1
 8007d54:	f040 80ee 	bne.w	8007f34 <_dtoa_r+0x6bc>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4658      	mov	r0, fp
 8007d5c:	f000 fc90 	bl	8008680 <_Bfree>
 8007d60:	2300      	movs	r3, #0
 8007d62:	7033      	strb	r3, [r6, #0]
 8007d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d66:	3701      	adds	r7, #1
 8007d68:	601f      	str	r7, [r3, #0]
 8007d6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 831d 	beq.w	80083ac <_dtoa_r+0xb34>
 8007d72:	601e      	str	r6, [r3, #0]
 8007d74:	e31a      	b.n	80083ac <_dtoa_r+0xb34>
 8007d76:	07e2      	lsls	r2, r4, #31
 8007d78:	d505      	bpl.n	8007d86 <_dtoa_r+0x50e>
 8007d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d7e:	f7f8 fc5b 	bl	8000638 <__aeabi_dmul>
 8007d82:	3601      	adds	r6, #1
 8007d84:	2301      	movs	r3, #1
 8007d86:	1064      	asrs	r4, r4, #1
 8007d88:	3508      	adds	r5, #8
 8007d8a:	e73f      	b.n	8007c0c <_dtoa_r+0x394>
 8007d8c:	2602      	movs	r6, #2
 8007d8e:	e742      	b.n	8007c16 <_dtoa_r+0x39e>
 8007d90:	9c07      	ldr	r4, [sp, #28]
 8007d92:	9704      	str	r7, [sp, #16]
 8007d94:	e761      	b.n	8007c5a <_dtoa_r+0x3e2>
 8007d96:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007d98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007da2:	4454      	add	r4, sl
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d053      	beq.n	8007e50 <_dtoa_r+0x5d8>
 8007da8:	4928      	ldr	r1, [pc, #160]	@ (8007e4c <_dtoa_r+0x5d4>)
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7f8 fd6e 	bl	800088c <__aeabi_ddiv>
 8007db0:	4633      	mov	r3, r6
 8007db2:	462a      	mov	r2, r5
 8007db4:	f7f8 fa88 	bl	80002c8 <__aeabi_dsub>
 8007db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dbc:	4656      	mov	r6, sl
 8007dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc2:	f7f8 fee9 	bl	8000b98 <__aeabi_d2iz>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	f7f8 fbcc 	bl	8000564 <__aeabi_i2d>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd4:	f7f8 fa78 	bl	80002c8 <__aeabi_dsub>
 8007dd8:	3530      	adds	r5, #48	@ 0x30
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007de2:	f806 5b01 	strb.w	r5, [r6], #1
 8007de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dea:	f7f8 fe97 	bl	8000b1c <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d171      	bne.n	8007ed6 <_dtoa_r+0x65e>
 8007df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df6:	4911      	ldr	r1, [pc, #68]	@ (8007e3c <_dtoa_r+0x5c4>)
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f7f8 fa65 	bl	80002c8 <__aeabi_dsub>
 8007dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e02:	f7f8 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 8095 	bne.w	8007f36 <_dtoa_r+0x6be>
 8007e0c:	42a6      	cmp	r6, r4
 8007e0e:	f43f af50 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e16:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fc0d 	bl	8000638 <__aeabi_dmul>
 8007e1e:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e24:	2200      	movs	r2, #0
 8007e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2a:	f7f8 fc05 	bl	8000638 <__aeabi_dmul>
 8007e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e32:	e7c4      	b.n	8007dbe <_dtoa_r+0x546>
 8007e34:	08009c48 	.word	0x08009c48
 8007e38:	08009c20 	.word	0x08009c20
 8007e3c:	3ff00000 	.word	0x3ff00000
 8007e40:	40240000 	.word	0x40240000
 8007e44:	401c0000 	.word	0x401c0000
 8007e48:	40140000 	.word	0x40140000
 8007e4c:	3fe00000 	.word	0x3fe00000
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7f8 fbf0 	bl	8000638 <__aeabi_dmul>
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e5e:	4656      	mov	r6, sl
 8007e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e64:	f7f8 fe98 	bl	8000b98 <__aeabi_d2iz>
 8007e68:	4605      	mov	r5, r0
 8007e6a:	f7f8 fb7b 	bl	8000564 <__aeabi_i2d>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e76:	f7f8 fa27 	bl	80002c8 <__aeabi_dsub>
 8007e7a:	3530      	adds	r5, #48	@ 0x30
 8007e7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	d124      	bne.n	8007eda <_dtoa_r+0x662>
 8007e90:	4bac      	ldr	r3, [pc, #688]	@ (8008144 <_dtoa_r+0x8cc>)
 8007e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e96:	f7f8 fa19 	bl	80002cc <__adddf3>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea2:	f7f8 fe59 	bl	8000b58 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d145      	bne.n	8007f36 <_dtoa_r+0x6be>
 8007eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eae:	49a5      	ldr	r1, [pc, #660]	@ (8008144 <_dtoa_r+0x8cc>)
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f7f8 fa09 	bl	80002c8 <__aeabi_dsub>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebe:	f7f8 fe2d 	bl	8000b1c <__aeabi_dcmplt>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f43f aef5 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007ec8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007eca:	1e73      	subs	r3, r6, #1
 8007ecc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ece:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ed2:	2b30      	cmp	r3, #48	@ 0x30
 8007ed4:	d0f8      	beq.n	8007ec8 <_dtoa_r+0x650>
 8007ed6:	9f04      	ldr	r7, [sp, #16]
 8007ed8:	e73e      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007eda:	4b9b      	ldr	r3, [pc, #620]	@ (8008148 <_dtoa_r+0x8d0>)
 8007edc:	f7f8 fbac 	bl	8000638 <__aeabi_dmul>
 8007ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee4:	e7bc      	b.n	8007e60 <_dtoa_r+0x5e8>
 8007ee6:	d10c      	bne.n	8007f02 <_dtoa_r+0x68a>
 8007ee8:	4b98      	ldr	r3, [pc, #608]	@ (800814c <_dtoa_r+0x8d4>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef0:	f7f8 fba2 	bl	8000638 <__aeabi_dmul>
 8007ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef8:	f7f8 fe24 	bl	8000b44 <__aeabi_dcmpge>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f000 8157 	beq.w	80081b0 <_dtoa_r+0x938>
 8007f02:	2400      	movs	r4, #0
 8007f04:	4625      	mov	r5, r4
 8007f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	4656      	mov	r6, sl
 8007f0e:	2700      	movs	r7, #0
 8007f10:	4621      	mov	r1, r4
 8007f12:	4658      	mov	r0, fp
 8007f14:	f000 fbb4 	bl	8008680 <_Bfree>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	d0dc      	beq.n	8007ed6 <_dtoa_r+0x65e>
 8007f1c:	b12f      	cbz	r7, 8007f2a <_dtoa_r+0x6b2>
 8007f1e:	42af      	cmp	r7, r5
 8007f20:	d003      	beq.n	8007f2a <_dtoa_r+0x6b2>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fbab 	bl	8008680 <_Bfree>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 fba7 	bl	8008680 <_Bfree>
 8007f32:	e7d0      	b.n	8007ed6 <_dtoa_r+0x65e>
 8007f34:	9704      	str	r7, [sp, #16]
 8007f36:	4633      	mov	r3, r6
 8007f38:	461e      	mov	r6, r3
 8007f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3e:	2a39      	cmp	r2, #57	@ 0x39
 8007f40:	d107      	bne.n	8007f52 <_dtoa_r+0x6da>
 8007f42:	459a      	cmp	sl, r3
 8007f44:	d1f8      	bne.n	8007f38 <_dtoa_r+0x6c0>
 8007f46:	9a04      	ldr	r2, [sp, #16]
 8007f48:	3201      	adds	r2, #1
 8007f4a:	9204      	str	r2, [sp, #16]
 8007f4c:	2230      	movs	r2, #48	@ 0x30
 8007f4e:	f88a 2000 	strb.w	r2, [sl]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	3201      	adds	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e7bd      	b.n	8007ed6 <_dtoa_r+0x65e>
 8007f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008148 <_dtoa_r+0x8d0>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f7f8 fb6b 	bl	8000638 <__aeabi_dmul>
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	f7f8 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f aebb 	beq.w	8007cea <_dtoa_r+0x472>
 8007f74:	e6f0      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	f000 80db 	beq.w	8008134 <_dtoa_r+0x8bc>
 8007f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f80:	2a01      	cmp	r2, #1
 8007f82:	f300 80bf 	bgt.w	8008104 <_dtoa_r+0x88c>
 8007f86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	f000 80b7 	beq.w	80080fc <_dtoa_r+0x884>
 8007f8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f94:	4646      	mov	r6, r8
 8007f96:	9a08      	ldr	r2, [sp, #32]
 8007f98:	2101      	movs	r1, #1
 8007f9a:	441a      	add	r2, r3
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	4498      	add	r8, r3
 8007fa0:	9208      	str	r2, [sp, #32]
 8007fa2:	f000 fc21 	bl	80087e8 <__i2b>
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	b15e      	cbz	r6, 8007fc2 <_dtoa_r+0x74a>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dd08      	ble.n	8007fc2 <_dtoa_r+0x74a>
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	9a08      	ldr	r2, [sp, #32]
 8007fb4:	bfa8      	it	ge
 8007fb6:	4633      	movge	r3, r6
 8007fb8:	eba8 0803 	sub.w	r8, r8, r3
 8007fbc:	1af6      	subs	r6, r6, r3
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fc4:	b1f3      	cbz	r3, 8008004 <_dtoa_r+0x78c>
 8007fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80b7 	beq.w	800813c <_dtoa_r+0x8c4>
 8007fce:	b18c      	cbz	r4, 8007ff4 <_dtoa_r+0x77c>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f000 fcc7 	bl	8008968 <__pow5mult>
 8007fda:	464a      	mov	r2, r9
 8007fdc:	4601      	mov	r1, r0
 8007fde:	4605      	mov	r5, r0
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f000 fc17 	bl	8008814 <__multiply>
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	9004      	str	r0, [sp, #16]
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fb48 	bl	8008680 <_Bfree>
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	4699      	mov	r9, r3
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ff6:	1b1a      	subs	r2, r3, r4
 8007ff8:	d004      	beq.n	8008004 <_dtoa_r+0x78c>
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fcb3 	bl	8008968 <__pow5mult>
 8008002:	4681      	mov	r9, r0
 8008004:	2101      	movs	r1, #1
 8008006:	4658      	mov	r0, fp
 8008008:	f000 fbee 	bl	80087e8 <__i2b>
 800800c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800e:	4604      	mov	r4, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 81cf 	beq.w	80083b4 <_dtoa_r+0xb3c>
 8008016:	461a      	mov	r2, r3
 8008018:	4601      	mov	r1, r0
 800801a:	4658      	mov	r0, fp
 800801c:	f000 fca4 	bl	8008968 <__pow5mult>
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	2b01      	cmp	r3, #1
 8008024:	4604      	mov	r4, r0
 8008026:	f300 8095 	bgt.w	8008154 <_dtoa_r+0x8dc>
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8087 	bne.w	8008140 <_dtoa_r+0x8c8>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8089 	bne.w	8008150 <_dtoa_r+0x8d8>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008044:	0d1b      	lsrs	r3, r3, #20
 8008046:	051b      	lsls	r3, r3, #20
 8008048:	b12b      	cbz	r3, 8008056 <_dtoa_r+0x7de>
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	3301      	adds	r3, #1
 800804e:	9308      	str	r3, [sp, #32]
 8008050:	f108 0801 	add.w	r8, r8, #1
 8008054:	2301      	movs	r3, #1
 8008056:	930a      	str	r3, [sp, #40]	@ 0x28
 8008058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 81b0 	beq.w	80083c0 <_dtoa_r+0xb48>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008066:	6918      	ldr	r0, [r3, #16]
 8008068:	f000 fb72 	bl	8008750 <__hi0bits>
 800806c:	f1c0 0020 	rsb	r0, r0, #32
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	4418      	add	r0, r3
 8008074:	f010 001f 	ands.w	r0, r0, #31
 8008078:	d077      	beq.n	800816a <_dtoa_r+0x8f2>
 800807a:	f1c0 0320 	rsb	r3, r0, #32
 800807e:	2b04      	cmp	r3, #4
 8008080:	dd6b      	ble.n	800815a <_dtoa_r+0x8e2>
 8008082:	9b08      	ldr	r3, [sp, #32]
 8008084:	f1c0 001c 	rsb	r0, r0, #28
 8008088:	4403      	add	r3, r0
 800808a:	4480      	add	r8, r0
 800808c:	4406      	add	r6, r0
 800808e:	9308      	str	r3, [sp, #32]
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	dd05      	ble.n	80080a2 <_dtoa_r+0x82a>
 8008096:	4649      	mov	r1, r9
 8008098:	4642      	mov	r2, r8
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fcbe 	bl	8008a1c <__lshift>
 80080a0:	4681      	mov	r9, r0
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dd05      	ble.n	80080b4 <_dtoa_r+0x83c>
 80080a8:	4621      	mov	r1, r4
 80080aa:	461a      	mov	r2, r3
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fcb5 	bl	8008a1c <__lshift>
 80080b2:	4604      	mov	r4, r0
 80080b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d059      	beq.n	800816e <_dtoa_r+0x8f6>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4648      	mov	r0, r9
 80080be:	f000 fd19 	bl	8008af4 <__mcmp>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	da53      	bge.n	800816e <_dtoa_r+0x8f6>
 80080c6:	1e7b      	subs	r3, r7, #1
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	4649      	mov	r1, r9
 80080cc:	2300      	movs	r3, #0
 80080ce:	220a      	movs	r2, #10
 80080d0:	4658      	mov	r0, fp
 80080d2:	f000 faf7 	bl	80086c4 <__multadd>
 80080d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d8:	4681      	mov	r9, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8172 	beq.w	80083c4 <_dtoa_r+0xb4c>
 80080e0:	2300      	movs	r3, #0
 80080e2:	4629      	mov	r1, r5
 80080e4:	220a      	movs	r2, #10
 80080e6:	4658      	mov	r0, fp
 80080e8:	f000 faec 	bl	80086c4 <__multadd>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	4605      	mov	r5, r0
 80080f2:	dc67      	bgt.n	80081c4 <_dtoa_r+0x94c>
 80080f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	dc41      	bgt.n	800817e <_dtoa_r+0x906>
 80080fa:	e063      	b.n	80081c4 <_dtoa_r+0x94c>
 80080fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008102:	e746      	b.n	8007f92 <_dtoa_r+0x71a>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	1e5c      	subs	r4, r3, #1
 8008108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810a:	42a3      	cmp	r3, r4
 800810c:	bfbf      	itttt	lt
 800810e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008110:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008112:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008114:	1ae3      	sublt	r3, r4, r3
 8008116:	bfb4      	ite	lt
 8008118:	18d2      	addlt	r2, r2, r3
 800811a:	1b1c      	subge	r4, r3, r4
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	bfbc      	itt	lt
 8008120:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008122:	2400      	movlt	r4, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfb5      	itete	lt
 8008128:	eba8 0603 	sublt.w	r6, r8, r3
 800812c:	9b07      	ldrge	r3, [sp, #28]
 800812e:	2300      	movlt	r3, #0
 8008130:	4646      	movge	r6, r8
 8008132:	e730      	b.n	8007f96 <_dtoa_r+0x71e>
 8008134:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008136:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008138:	4646      	mov	r6, r8
 800813a:	e735      	b.n	8007fa8 <_dtoa_r+0x730>
 800813c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800813e:	e75c      	b.n	8007ffa <_dtoa_r+0x782>
 8008140:	2300      	movs	r3, #0
 8008142:	e788      	b.n	8008056 <_dtoa_r+0x7de>
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	40240000 	.word	0x40240000
 800814c:	40140000 	.word	0x40140000
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	e780      	b.n	8008056 <_dtoa_r+0x7de>
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	@ 0x28
 8008158:	e782      	b.n	8008060 <_dtoa_r+0x7e8>
 800815a:	d099      	beq.n	8008090 <_dtoa_r+0x818>
 800815c:	9a08      	ldr	r2, [sp, #32]
 800815e:	331c      	adds	r3, #28
 8008160:	441a      	add	r2, r3
 8008162:	4498      	add	r8, r3
 8008164:	441e      	add	r6, r3
 8008166:	9208      	str	r2, [sp, #32]
 8008168:	e792      	b.n	8008090 <_dtoa_r+0x818>
 800816a:	4603      	mov	r3, r0
 800816c:	e7f6      	b.n	800815c <_dtoa_r+0x8e4>
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	9704      	str	r7, [sp, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc20      	bgt.n	80081b8 <_dtoa_r+0x940>
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817a:	2b02      	cmp	r3, #2
 800817c:	dd1e      	ble.n	80081bc <_dtoa_r+0x944>
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f47f aec0 	bne.w	8007f06 <_dtoa_r+0x68e>
 8008186:	4621      	mov	r1, r4
 8008188:	2205      	movs	r2, #5
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fa9a 	bl	80086c4 <__multadd>
 8008190:	4601      	mov	r1, r0
 8008192:	4604      	mov	r4, r0
 8008194:	4648      	mov	r0, r9
 8008196:	f000 fcad 	bl	8008af4 <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	f77f aeb3 	ble.w	8007f06 <_dtoa_r+0x68e>
 80081a0:	4656      	mov	r6, sl
 80081a2:	2331      	movs	r3, #49	@ 0x31
 80081a4:	f806 3b01 	strb.w	r3, [r6], #1
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	3301      	adds	r3, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	e6ae      	b.n	8007f0e <_dtoa_r+0x696>
 80081b0:	9c07      	ldr	r4, [sp, #28]
 80081b2:	9704      	str	r7, [sp, #16]
 80081b4:	4625      	mov	r5, r4
 80081b6:	e7f3      	b.n	80081a0 <_dtoa_r+0x928>
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8104 	beq.w	80083cc <_dtoa_r+0xb54>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	dd05      	ble.n	80081d4 <_dtoa_r+0x95c>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4632      	mov	r2, r6
 80081cc:	4658      	mov	r0, fp
 80081ce:	f000 fc25 	bl	8008a1c <__lshift>
 80081d2:	4605      	mov	r5, r0
 80081d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d05a      	beq.n	8008290 <_dtoa_r+0xa18>
 80081da:	6869      	ldr	r1, [r5, #4]
 80081dc:	4658      	mov	r0, fp
 80081de:	f000 fa0f 	bl	8008600 <_Balloc>
 80081e2:	4606      	mov	r6, r0
 80081e4:	b928      	cbnz	r0, 80081f2 <_dtoa_r+0x97a>
 80081e6:	4b84      	ldr	r3, [pc, #528]	@ (80083f8 <_dtoa_r+0xb80>)
 80081e8:	4602      	mov	r2, r0
 80081ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081ee:	f7ff bb5a 	b.w	80078a6 <_dtoa_r+0x2e>
 80081f2:	692a      	ldr	r2, [r5, #16]
 80081f4:	3202      	adds	r2, #2
 80081f6:	0092      	lsls	r2, r2, #2
 80081f8:	f105 010c 	add.w	r1, r5, #12
 80081fc:	300c      	adds	r0, #12
 80081fe:	f7ff faa4 	bl	800774a <memcpy>
 8008202:	2201      	movs	r2, #1
 8008204:	4631      	mov	r1, r6
 8008206:	4658      	mov	r0, fp
 8008208:	f000 fc08 	bl	8008a1c <__lshift>
 800820c:	f10a 0301 	add.w	r3, sl, #1
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	4453      	add	r3, sl
 8008216:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008218:	9b02      	ldr	r3, [sp, #8]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	462f      	mov	r7, r5
 8008220:	930a      	str	r3, [sp, #40]	@ 0x28
 8008222:	4605      	mov	r5, r0
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	4621      	mov	r1, r4
 8008228:	3b01      	subs	r3, #1
 800822a:	4648      	mov	r0, r9
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	f7ff fa9a 	bl	8007766 <quorem>
 8008232:	4639      	mov	r1, r7
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800823a:	4648      	mov	r0, r9
 800823c:	f000 fc5a 	bl	8008af4 <__mcmp>
 8008240:	462a      	mov	r2, r5
 8008242:	9008      	str	r0, [sp, #32]
 8008244:	4621      	mov	r1, r4
 8008246:	4658      	mov	r0, fp
 8008248:	f000 fc70 	bl	8008b2c <__mdiff>
 800824c:	68c2      	ldr	r2, [r0, #12]
 800824e:	4606      	mov	r6, r0
 8008250:	bb02      	cbnz	r2, 8008294 <_dtoa_r+0xa1c>
 8008252:	4601      	mov	r1, r0
 8008254:	4648      	mov	r0, r9
 8008256:	f000 fc4d 	bl	8008af4 <__mcmp>
 800825a:	4602      	mov	r2, r0
 800825c:	4631      	mov	r1, r6
 800825e:	4658      	mov	r0, fp
 8008260:	920e      	str	r2, [sp, #56]	@ 0x38
 8008262:	f000 fa0d 	bl	8008680 <_Bfree>
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800826a:	9e07      	ldr	r6, [sp, #28]
 800826c:	ea43 0102 	orr.w	r1, r3, r2
 8008270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008272:	4319      	orrs	r1, r3
 8008274:	d110      	bne.n	8008298 <_dtoa_r+0xa20>
 8008276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800827a:	d029      	beq.n	80082d0 <_dtoa_r+0xa58>
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd02      	ble.n	8008288 <_dtoa_r+0xa10>
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	f883 8000 	strb.w	r8, [r3]
 800828e:	e63f      	b.n	8007f10 <_dtoa_r+0x698>
 8008290:	4628      	mov	r0, r5
 8008292:	e7bb      	b.n	800820c <_dtoa_r+0x994>
 8008294:	2201      	movs	r2, #1
 8008296:	e7e1      	b.n	800825c <_dtoa_r+0x9e4>
 8008298:	9b08      	ldr	r3, [sp, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db04      	blt.n	80082a8 <_dtoa_r+0xa30>
 800829e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a0:	430b      	orrs	r3, r1
 80082a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082a4:	430b      	orrs	r3, r1
 80082a6:	d120      	bne.n	80082ea <_dtoa_r+0xa72>
 80082a8:	2a00      	cmp	r2, #0
 80082aa:	dded      	ble.n	8008288 <_dtoa_r+0xa10>
 80082ac:	4649      	mov	r1, r9
 80082ae:	2201      	movs	r2, #1
 80082b0:	4658      	mov	r0, fp
 80082b2:	f000 fbb3 	bl	8008a1c <__lshift>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4681      	mov	r9, r0
 80082ba:	f000 fc1b 	bl	8008af4 <__mcmp>
 80082be:	2800      	cmp	r0, #0
 80082c0:	dc03      	bgt.n	80082ca <_dtoa_r+0xa52>
 80082c2:	d1e1      	bne.n	8008288 <_dtoa_r+0xa10>
 80082c4:	f018 0f01 	tst.w	r8, #1
 80082c8:	d0de      	beq.n	8008288 <_dtoa_r+0xa10>
 80082ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ce:	d1d8      	bne.n	8008282 <_dtoa_r+0xa0a>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	2339      	movs	r3, #57	@ 0x39
 80082d4:	7013      	strb	r3, [r2, #0]
 80082d6:	4633      	mov	r3, r6
 80082d8:	461e      	mov	r6, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082e0:	2a39      	cmp	r2, #57	@ 0x39
 80082e2:	d052      	beq.n	800838a <_dtoa_r+0xb12>
 80082e4:	3201      	adds	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e612      	b.n	8007f10 <_dtoa_r+0x698>
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	dd07      	ble.n	80082fe <_dtoa_r+0xa86>
 80082ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082f2:	d0ed      	beq.n	80082d0 <_dtoa_r+0xa58>
 80082f4:	9a00      	ldr	r2, [sp, #0]
 80082f6:	f108 0301 	add.w	r3, r8, #1
 80082fa:	7013      	strb	r3, [r2, #0]
 80082fc:	e608      	b.n	8007f10 <_dtoa_r+0x698>
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	9a07      	ldr	r2, [sp, #28]
 8008302:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	4293      	cmp	r3, r2
 800830a:	d028      	beq.n	800835e <_dtoa_r+0xae6>
 800830c:	4649      	mov	r1, r9
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4658      	mov	r0, fp
 8008314:	f000 f9d6 	bl	80086c4 <__multadd>
 8008318:	42af      	cmp	r7, r5
 800831a:	4681      	mov	r9, r0
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	f04f 020a 	mov.w	r2, #10
 8008324:	4639      	mov	r1, r7
 8008326:	4658      	mov	r0, fp
 8008328:	d107      	bne.n	800833a <_dtoa_r+0xac2>
 800832a:	f000 f9cb 	bl	80086c4 <__multadd>
 800832e:	4607      	mov	r7, r0
 8008330:	4605      	mov	r5, r0
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	3301      	adds	r3, #1
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	e774      	b.n	8008224 <_dtoa_r+0x9ac>
 800833a:	f000 f9c3 	bl	80086c4 <__multadd>
 800833e:	4629      	mov	r1, r5
 8008340:	4607      	mov	r7, r0
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4658      	mov	r0, fp
 8008348:	f000 f9bc 	bl	80086c4 <__multadd>
 800834c:	4605      	mov	r5, r0
 800834e:	e7f0      	b.n	8008332 <_dtoa_r+0xaba>
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfcc      	ite	gt
 8008356:	461e      	movgt	r6, r3
 8008358:	2601      	movle	r6, #1
 800835a:	4456      	add	r6, sl
 800835c:	2700      	movs	r7, #0
 800835e:	4649      	mov	r1, r9
 8008360:	2201      	movs	r2, #1
 8008362:	4658      	mov	r0, fp
 8008364:	f000 fb5a 	bl	8008a1c <__lshift>
 8008368:	4621      	mov	r1, r4
 800836a:	4681      	mov	r9, r0
 800836c:	f000 fbc2 	bl	8008af4 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	dcb0      	bgt.n	80082d6 <_dtoa_r+0xa5e>
 8008374:	d102      	bne.n	800837c <_dtoa_r+0xb04>
 8008376:	f018 0f01 	tst.w	r8, #1
 800837a:	d1ac      	bne.n	80082d6 <_dtoa_r+0xa5e>
 800837c:	4633      	mov	r3, r6
 800837e:	461e      	mov	r6, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a30      	cmp	r2, #48	@ 0x30
 8008386:	d0fa      	beq.n	800837e <_dtoa_r+0xb06>
 8008388:	e5c2      	b.n	8007f10 <_dtoa_r+0x698>
 800838a:	459a      	cmp	sl, r3
 800838c:	d1a4      	bne.n	80082d8 <_dtoa_r+0xa60>
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	3301      	adds	r3, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	2331      	movs	r3, #49	@ 0x31
 8008396:	f88a 3000 	strb.w	r3, [sl]
 800839a:	e5b9      	b.n	8007f10 <_dtoa_r+0x698>
 800839c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800839e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083fc <_dtoa_r+0xb84>
 80083a2:	b11b      	cbz	r3, 80083ac <_dtoa_r+0xb34>
 80083a4:	f10a 0308 	add.w	r3, sl, #8
 80083a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	4650      	mov	r0, sl
 80083ae:	b019      	add	sp, #100	@ 0x64
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	f77f ae37 	ble.w	800802a <_dtoa_r+0x7b2>
 80083bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083be:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c0:	2001      	movs	r0, #1
 80083c2:	e655      	b.n	8008070 <_dtoa_r+0x7f8>
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f77f aed6 	ble.w	8008178 <_dtoa_r+0x900>
 80083cc:	4656      	mov	r6, sl
 80083ce:	4621      	mov	r1, r4
 80083d0:	4648      	mov	r0, r9
 80083d2:	f7ff f9c8 	bl	8007766 <quorem>
 80083d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083da:	f806 8b01 	strb.w	r8, [r6], #1
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	eba6 020a 	sub.w	r2, r6, sl
 80083e4:	4293      	cmp	r3, r2
 80083e6:	ddb3      	ble.n	8008350 <_dtoa_r+0xad8>
 80083e8:	4649      	mov	r1, r9
 80083ea:	2300      	movs	r3, #0
 80083ec:	220a      	movs	r2, #10
 80083ee:	4658      	mov	r0, fp
 80083f0:	f000 f968 	bl	80086c4 <__multadd>
 80083f4:	4681      	mov	r9, r0
 80083f6:	e7ea      	b.n	80083ce <_dtoa_r+0xb56>
 80083f8:	08009ba4 	.word	0x08009ba4
 80083fc:	08009b28 	.word	0x08009b28

08008400 <_free_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4605      	mov	r5, r0
 8008404:	2900      	cmp	r1, #0
 8008406:	d041      	beq.n	800848c <_free_r+0x8c>
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f0c      	subs	r4, r1, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfb8      	it	lt
 8008412:	18e4      	addlt	r4, r4, r3
 8008414:	f000 f8e8 	bl	80085e8 <__malloc_lock>
 8008418:	4a1d      	ldr	r2, [pc, #116]	@ (8008490 <_free_r+0x90>)
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	b933      	cbnz	r3, 800842c <_free_r+0x2c>
 800841e:	6063      	str	r3, [r4, #4]
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	4628      	mov	r0, r5
 8008424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008428:	f000 b8e4 	b.w	80085f4 <__malloc_unlock>
 800842c:	42a3      	cmp	r3, r4
 800842e:	d908      	bls.n	8008442 <_free_r+0x42>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428b      	cmp	r3, r1
 8008436:	bf01      	itttt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	1809      	addeq	r1, r1, r0
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	e7ed      	b.n	800841e <_free_r+0x1e>
 8008442:	461a      	mov	r2, r3
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	b10b      	cbz	r3, 800844c <_free_r+0x4c>
 8008448:	42a3      	cmp	r3, r4
 800844a:	d9fa      	bls.n	8008442 <_free_r+0x42>
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	1850      	adds	r0, r2, r1
 8008450:	42a0      	cmp	r0, r4
 8008452:	d10b      	bne.n	800846c <_free_r+0x6c>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	4401      	add	r1, r0
 8008458:	1850      	adds	r0, r2, r1
 800845a:	4283      	cmp	r3, r0
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	d1e0      	bne.n	8008422 <_free_r+0x22>
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6053      	str	r3, [r2, #4]
 8008466:	4408      	add	r0, r1
 8008468:	6010      	str	r0, [r2, #0]
 800846a:	e7da      	b.n	8008422 <_free_r+0x22>
 800846c:	d902      	bls.n	8008474 <_free_r+0x74>
 800846e:	230c      	movs	r3, #12
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	e7d6      	b.n	8008422 <_free_r+0x22>
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	1821      	adds	r1, r4, r0
 8008478:	428b      	cmp	r3, r1
 800847a:	bf04      	itt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	bf04      	itt	eq
 8008484:	1809      	addeq	r1, r1, r0
 8008486:	6021      	streq	r1, [r4, #0]
 8008488:	6054      	str	r4, [r2, #4]
 800848a:	e7ca      	b.n	8008422 <_free_r+0x22>
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	20004d04 	.word	0x20004d04

08008494 <malloc>:
 8008494:	4b02      	ldr	r3, [pc, #8]	@ (80084a0 <malloc+0xc>)
 8008496:	4601      	mov	r1, r0
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	f000 b825 	b.w	80084e8 <_malloc_r>
 800849e:	bf00      	nop
 80084a0:	2000001c 	.word	0x2000001c

080084a4 <sbrk_aligned>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4e0f      	ldr	r6, [pc, #60]	@ (80084e4 <sbrk_aligned+0x40>)
 80084a8:	460c      	mov	r4, r1
 80084aa:	6831      	ldr	r1, [r6, #0]
 80084ac:	4605      	mov	r5, r0
 80084ae:	b911      	cbnz	r1, 80084b6 <sbrk_aligned+0x12>
 80084b0:	f001 f840 	bl	8009534 <_sbrk_r>
 80084b4:	6030      	str	r0, [r6, #0]
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f001 f83b 	bl	8009534 <_sbrk_r>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d103      	bne.n	80084ca <sbrk_aligned+0x26>
 80084c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80084c6:	4620      	mov	r0, r4
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	1cc4      	adds	r4, r0, #3
 80084cc:	f024 0403 	bic.w	r4, r4, #3
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d0f8      	beq.n	80084c6 <sbrk_aligned+0x22>
 80084d4:	1a21      	subs	r1, r4, r0
 80084d6:	4628      	mov	r0, r5
 80084d8:	f001 f82c 	bl	8009534 <_sbrk_r>
 80084dc:	3001      	adds	r0, #1
 80084de:	d1f2      	bne.n	80084c6 <sbrk_aligned+0x22>
 80084e0:	e7ef      	b.n	80084c2 <sbrk_aligned+0x1e>
 80084e2:	bf00      	nop
 80084e4:	20004d00 	.word	0x20004d00

080084e8 <_malloc_r>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	1ccd      	adds	r5, r1, #3
 80084ee:	f025 0503 	bic.w	r5, r5, #3
 80084f2:	3508      	adds	r5, #8
 80084f4:	2d0c      	cmp	r5, #12
 80084f6:	bf38      	it	cc
 80084f8:	250c      	movcc	r5, #12
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	4606      	mov	r6, r0
 80084fe:	db01      	blt.n	8008504 <_malloc_r+0x1c>
 8008500:	42a9      	cmp	r1, r5
 8008502:	d904      	bls.n	800850e <_malloc_r+0x26>
 8008504:	230c      	movs	r3, #12
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085e4 <_malloc_r+0xfc>
 8008512:	f000 f869 	bl	80085e8 <__malloc_lock>
 8008516:	f8d8 3000 	ldr.w	r3, [r8]
 800851a:	461c      	mov	r4, r3
 800851c:	bb44      	cbnz	r4, 8008570 <_malloc_r+0x88>
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff ffbf 	bl	80084a4 <sbrk_aligned>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	4604      	mov	r4, r0
 800852a:	d158      	bne.n	80085de <_malloc_r+0xf6>
 800852c:	f8d8 4000 	ldr.w	r4, [r8]
 8008530:	4627      	mov	r7, r4
 8008532:	2f00      	cmp	r7, #0
 8008534:	d143      	bne.n	80085be <_malloc_r+0xd6>
 8008536:	2c00      	cmp	r4, #0
 8008538:	d04b      	beq.n	80085d2 <_malloc_r+0xea>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	4639      	mov	r1, r7
 800853e:	4630      	mov	r0, r6
 8008540:	eb04 0903 	add.w	r9, r4, r3
 8008544:	f000 fff6 	bl	8009534 <_sbrk_r>
 8008548:	4581      	cmp	r9, r0
 800854a:	d142      	bne.n	80085d2 <_malloc_r+0xea>
 800854c:	6821      	ldr	r1, [r4, #0]
 800854e:	1a6d      	subs	r5, r5, r1
 8008550:	4629      	mov	r1, r5
 8008552:	4630      	mov	r0, r6
 8008554:	f7ff ffa6 	bl	80084a4 <sbrk_aligned>
 8008558:	3001      	adds	r0, #1
 800855a:	d03a      	beq.n	80085d2 <_malloc_r+0xea>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	442b      	add	r3, r5
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	f8d8 3000 	ldr.w	r3, [r8]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	bb62      	cbnz	r2, 80085c4 <_malloc_r+0xdc>
 800856a:	f8c8 7000 	str.w	r7, [r8]
 800856e:	e00f      	b.n	8008590 <_malloc_r+0xa8>
 8008570:	6822      	ldr	r2, [r4, #0]
 8008572:	1b52      	subs	r2, r2, r5
 8008574:	d420      	bmi.n	80085b8 <_malloc_r+0xd0>
 8008576:	2a0b      	cmp	r2, #11
 8008578:	d917      	bls.n	80085aa <_malloc_r+0xc2>
 800857a:	1961      	adds	r1, r4, r5
 800857c:	42a3      	cmp	r3, r4
 800857e:	6025      	str	r5, [r4, #0]
 8008580:	bf18      	it	ne
 8008582:	6059      	strne	r1, [r3, #4]
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	bf08      	it	eq
 8008588:	f8c8 1000 	streq.w	r1, [r8]
 800858c:	5162      	str	r2, [r4, r5]
 800858e:	604b      	str	r3, [r1, #4]
 8008590:	4630      	mov	r0, r6
 8008592:	f000 f82f 	bl	80085f4 <__malloc_unlock>
 8008596:	f104 000b 	add.w	r0, r4, #11
 800859a:	1d23      	adds	r3, r4, #4
 800859c:	f020 0007 	bic.w	r0, r0, #7
 80085a0:	1ac2      	subs	r2, r0, r3
 80085a2:	bf1c      	itt	ne
 80085a4:	1a1b      	subne	r3, r3, r0
 80085a6:	50a3      	strne	r3, [r4, r2]
 80085a8:	e7af      	b.n	800850a <_malloc_r+0x22>
 80085aa:	6862      	ldr	r2, [r4, #4]
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	bf0c      	ite	eq
 80085b0:	f8c8 2000 	streq.w	r2, [r8]
 80085b4:	605a      	strne	r2, [r3, #4]
 80085b6:	e7eb      	b.n	8008590 <_malloc_r+0xa8>
 80085b8:	4623      	mov	r3, r4
 80085ba:	6864      	ldr	r4, [r4, #4]
 80085bc:	e7ae      	b.n	800851c <_malloc_r+0x34>
 80085be:	463c      	mov	r4, r7
 80085c0:	687f      	ldr	r7, [r7, #4]
 80085c2:	e7b6      	b.n	8008532 <_malloc_r+0x4a>
 80085c4:	461a      	mov	r2, r3
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	d1fb      	bne.n	80085c4 <_malloc_r+0xdc>
 80085cc:	2300      	movs	r3, #0
 80085ce:	6053      	str	r3, [r2, #4]
 80085d0:	e7de      	b.n	8008590 <_malloc_r+0xa8>
 80085d2:	230c      	movs	r3, #12
 80085d4:	6033      	str	r3, [r6, #0]
 80085d6:	4630      	mov	r0, r6
 80085d8:	f000 f80c 	bl	80085f4 <__malloc_unlock>
 80085dc:	e794      	b.n	8008508 <_malloc_r+0x20>
 80085de:	6005      	str	r5, [r0, #0]
 80085e0:	e7d6      	b.n	8008590 <_malloc_r+0xa8>
 80085e2:	bf00      	nop
 80085e4:	20004d04 	.word	0x20004d04

080085e8 <__malloc_lock>:
 80085e8:	4801      	ldr	r0, [pc, #4]	@ (80085f0 <__malloc_lock+0x8>)
 80085ea:	f7ff b8ac 	b.w	8007746 <__retarget_lock_acquire_recursive>
 80085ee:	bf00      	nop
 80085f0:	20004cfc 	.word	0x20004cfc

080085f4 <__malloc_unlock>:
 80085f4:	4801      	ldr	r0, [pc, #4]	@ (80085fc <__malloc_unlock+0x8>)
 80085f6:	f7ff b8a7 	b.w	8007748 <__retarget_lock_release_recursive>
 80085fa:	bf00      	nop
 80085fc:	20004cfc 	.word	0x20004cfc

08008600 <_Balloc>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	69c6      	ldr	r6, [r0, #28]
 8008604:	4604      	mov	r4, r0
 8008606:	460d      	mov	r5, r1
 8008608:	b976      	cbnz	r6, 8008628 <_Balloc+0x28>
 800860a:	2010      	movs	r0, #16
 800860c:	f7ff ff42 	bl	8008494 <malloc>
 8008610:	4602      	mov	r2, r0
 8008612:	61e0      	str	r0, [r4, #28]
 8008614:	b920      	cbnz	r0, 8008620 <_Balloc+0x20>
 8008616:	4b18      	ldr	r3, [pc, #96]	@ (8008678 <_Balloc+0x78>)
 8008618:	4818      	ldr	r0, [pc, #96]	@ (800867c <_Balloc+0x7c>)
 800861a:	216b      	movs	r1, #107	@ 0x6b
 800861c:	f000 ff9a 	bl	8009554 <__assert_func>
 8008620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008624:	6006      	str	r6, [r0, #0]
 8008626:	60c6      	str	r6, [r0, #12]
 8008628:	69e6      	ldr	r6, [r4, #28]
 800862a:	68f3      	ldr	r3, [r6, #12]
 800862c:	b183      	cbz	r3, 8008650 <_Balloc+0x50>
 800862e:	69e3      	ldr	r3, [r4, #28]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008636:	b9b8      	cbnz	r0, 8008668 <_Balloc+0x68>
 8008638:	2101      	movs	r1, #1
 800863a:	fa01 f605 	lsl.w	r6, r1, r5
 800863e:	1d72      	adds	r2, r6, #5
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	4620      	mov	r0, r4
 8008644:	f000 ffa4 	bl	8009590 <_calloc_r>
 8008648:	b160      	cbz	r0, 8008664 <_Balloc+0x64>
 800864a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800864e:	e00e      	b.n	800866e <_Balloc+0x6e>
 8008650:	2221      	movs	r2, #33	@ 0x21
 8008652:	2104      	movs	r1, #4
 8008654:	4620      	mov	r0, r4
 8008656:	f000 ff9b 	bl	8009590 <_calloc_r>
 800865a:	69e3      	ldr	r3, [r4, #28]
 800865c:	60f0      	str	r0, [r6, #12]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e4      	bne.n	800862e <_Balloc+0x2e>
 8008664:	2000      	movs	r0, #0
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	6802      	ldr	r2, [r0, #0]
 800866a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800866e:	2300      	movs	r3, #0
 8008670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008674:	e7f7      	b.n	8008666 <_Balloc+0x66>
 8008676:	bf00      	nop
 8008678:	08009b35 	.word	0x08009b35
 800867c:	08009bb5 	.word	0x08009bb5

08008680 <_Bfree>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	69c6      	ldr	r6, [r0, #28]
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b976      	cbnz	r6, 80086a8 <_Bfree+0x28>
 800868a:	2010      	movs	r0, #16
 800868c:	f7ff ff02 	bl	8008494 <malloc>
 8008690:	4602      	mov	r2, r0
 8008692:	61e8      	str	r0, [r5, #28]
 8008694:	b920      	cbnz	r0, 80086a0 <_Bfree+0x20>
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <_Bfree+0x3c>)
 8008698:	4809      	ldr	r0, [pc, #36]	@ (80086c0 <_Bfree+0x40>)
 800869a:	218f      	movs	r1, #143	@ 0x8f
 800869c:	f000 ff5a 	bl	8009554 <__assert_func>
 80086a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a4:	6006      	str	r6, [r0, #0]
 80086a6:	60c6      	str	r6, [r0, #12]
 80086a8:	b13c      	cbz	r4, 80086ba <_Bfree+0x3a>
 80086aa:	69eb      	ldr	r3, [r5, #28]
 80086ac:	6862      	ldr	r2, [r4, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b4:	6021      	str	r1, [r4, #0]
 80086b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	08009b35 	.word	0x08009b35
 80086c0:	08009bb5 	.word	0x08009bb5

080086c4 <__multadd>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	690d      	ldr	r5, [r1, #16]
 80086ca:	4607      	mov	r7, r0
 80086cc:	460c      	mov	r4, r1
 80086ce:	461e      	mov	r6, r3
 80086d0:	f101 0c14 	add.w	ip, r1, #20
 80086d4:	2000      	movs	r0, #0
 80086d6:	f8dc 3000 	ldr.w	r3, [ip]
 80086da:	b299      	uxth	r1, r3
 80086dc:	fb02 6101 	mla	r1, r2, r1, r6
 80086e0:	0c1e      	lsrs	r6, r3, #16
 80086e2:	0c0b      	lsrs	r3, r1, #16
 80086e4:	fb02 3306 	mla	r3, r2, r6, r3
 80086e8:	b289      	uxth	r1, r1
 80086ea:	3001      	adds	r0, #1
 80086ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f0:	4285      	cmp	r5, r0
 80086f2:	f84c 1b04 	str.w	r1, [ip], #4
 80086f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086fa:	dcec      	bgt.n	80086d6 <__multadd+0x12>
 80086fc:	b30e      	cbz	r6, 8008742 <__multadd+0x7e>
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	42ab      	cmp	r3, r5
 8008702:	dc19      	bgt.n	8008738 <__multadd+0x74>
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	4638      	mov	r0, r7
 8008708:	3101      	adds	r1, #1
 800870a:	f7ff ff79 	bl	8008600 <_Balloc>
 800870e:	4680      	mov	r8, r0
 8008710:	b928      	cbnz	r0, 800871e <__multadd+0x5a>
 8008712:	4602      	mov	r2, r0
 8008714:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <__multadd+0x84>)
 8008716:	480d      	ldr	r0, [pc, #52]	@ (800874c <__multadd+0x88>)
 8008718:	21ba      	movs	r1, #186	@ 0xba
 800871a:	f000 ff1b 	bl	8009554 <__assert_func>
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	3202      	adds	r2, #2
 8008722:	f104 010c 	add.w	r1, r4, #12
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	300c      	adds	r0, #12
 800872a:	f7ff f80e 	bl	800774a <memcpy>
 800872e:	4621      	mov	r1, r4
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff ffa5 	bl	8008680 <_Bfree>
 8008736:	4644      	mov	r4, r8
 8008738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800873c:	3501      	adds	r5, #1
 800873e:	615e      	str	r6, [r3, #20]
 8008740:	6125      	str	r5, [r4, #16]
 8008742:	4620      	mov	r0, r4
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	08009ba4 	.word	0x08009ba4
 800874c:	08009bb5 	.word	0x08009bb5

08008750 <__hi0bits>:
 8008750:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008754:	4603      	mov	r3, r0
 8008756:	bf36      	itet	cc
 8008758:	0403      	lslcc	r3, r0, #16
 800875a:	2000      	movcs	r0, #0
 800875c:	2010      	movcc	r0, #16
 800875e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008762:	bf3c      	itt	cc
 8008764:	021b      	lslcc	r3, r3, #8
 8008766:	3008      	addcc	r0, #8
 8008768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800876c:	bf3c      	itt	cc
 800876e:	011b      	lslcc	r3, r3, #4
 8008770:	3004      	addcc	r0, #4
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008776:	bf3c      	itt	cc
 8008778:	009b      	lslcc	r3, r3, #2
 800877a:	3002      	addcc	r0, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	db05      	blt.n	800878c <__hi0bits+0x3c>
 8008780:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008784:	f100 0001 	add.w	r0, r0, #1
 8008788:	bf08      	it	eq
 800878a:	2020      	moveq	r0, #32
 800878c:	4770      	bx	lr

0800878e <__lo0bits>:
 800878e:	6803      	ldr	r3, [r0, #0]
 8008790:	4602      	mov	r2, r0
 8008792:	f013 0007 	ands.w	r0, r3, #7
 8008796:	d00b      	beq.n	80087b0 <__lo0bits+0x22>
 8008798:	07d9      	lsls	r1, r3, #31
 800879a:	d421      	bmi.n	80087e0 <__lo0bits+0x52>
 800879c:	0798      	lsls	r0, r3, #30
 800879e:	bf49      	itett	mi
 80087a0:	085b      	lsrmi	r3, r3, #1
 80087a2:	089b      	lsrpl	r3, r3, #2
 80087a4:	2001      	movmi	r0, #1
 80087a6:	6013      	strmi	r3, [r2, #0]
 80087a8:	bf5c      	itt	pl
 80087aa:	6013      	strpl	r3, [r2, #0]
 80087ac:	2002      	movpl	r0, #2
 80087ae:	4770      	bx	lr
 80087b0:	b299      	uxth	r1, r3
 80087b2:	b909      	cbnz	r1, 80087b8 <__lo0bits+0x2a>
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	2010      	movs	r0, #16
 80087b8:	b2d9      	uxtb	r1, r3
 80087ba:	b909      	cbnz	r1, 80087c0 <__lo0bits+0x32>
 80087bc:	3008      	adds	r0, #8
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	0719      	lsls	r1, r3, #28
 80087c2:	bf04      	itt	eq
 80087c4:	091b      	lsreq	r3, r3, #4
 80087c6:	3004      	addeq	r0, #4
 80087c8:	0799      	lsls	r1, r3, #30
 80087ca:	bf04      	itt	eq
 80087cc:	089b      	lsreq	r3, r3, #2
 80087ce:	3002      	addeq	r0, #2
 80087d0:	07d9      	lsls	r1, r3, #31
 80087d2:	d403      	bmi.n	80087dc <__lo0bits+0x4e>
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	f100 0001 	add.w	r0, r0, #1
 80087da:	d003      	beq.n	80087e4 <__lo0bits+0x56>
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	4770      	bx	lr
 80087e0:	2000      	movs	r0, #0
 80087e2:	4770      	bx	lr
 80087e4:	2020      	movs	r0, #32
 80087e6:	4770      	bx	lr

080087e8 <__i2b>:
 80087e8:	b510      	push	{r4, lr}
 80087ea:	460c      	mov	r4, r1
 80087ec:	2101      	movs	r1, #1
 80087ee:	f7ff ff07 	bl	8008600 <_Balloc>
 80087f2:	4602      	mov	r2, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__i2b+0x1a>
 80087f6:	4b05      	ldr	r3, [pc, #20]	@ (800880c <__i2b+0x24>)
 80087f8:	4805      	ldr	r0, [pc, #20]	@ (8008810 <__i2b+0x28>)
 80087fa:	f240 1145 	movw	r1, #325	@ 0x145
 80087fe:	f000 fea9 	bl	8009554 <__assert_func>
 8008802:	2301      	movs	r3, #1
 8008804:	6144      	str	r4, [r0, #20]
 8008806:	6103      	str	r3, [r0, #16]
 8008808:	bd10      	pop	{r4, pc}
 800880a:	bf00      	nop
 800880c:	08009ba4 	.word	0x08009ba4
 8008810:	08009bb5 	.word	0x08009bb5

08008814 <__multiply>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4614      	mov	r4, r2
 800881a:	690a      	ldr	r2, [r1, #16]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	429a      	cmp	r2, r3
 8008820:	bfa8      	it	ge
 8008822:	4623      	movge	r3, r4
 8008824:	460f      	mov	r7, r1
 8008826:	bfa4      	itt	ge
 8008828:	460c      	movge	r4, r1
 800882a:	461f      	movge	r7, r3
 800882c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008830:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	6861      	ldr	r1, [r4, #4]
 8008838:	eb0a 0609 	add.w	r6, sl, r9
 800883c:	42b3      	cmp	r3, r6
 800883e:	b085      	sub	sp, #20
 8008840:	bfb8      	it	lt
 8008842:	3101      	addlt	r1, #1
 8008844:	f7ff fedc 	bl	8008600 <_Balloc>
 8008848:	b930      	cbnz	r0, 8008858 <__multiply+0x44>
 800884a:	4602      	mov	r2, r0
 800884c:	4b44      	ldr	r3, [pc, #272]	@ (8008960 <__multiply+0x14c>)
 800884e:	4845      	ldr	r0, [pc, #276]	@ (8008964 <__multiply+0x150>)
 8008850:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008854:	f000 fe7e 	bl	8009554 <__assert_func>
 8008858:	f100 0514 	add.w	r5, r0, #20
 800885c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008860:	462b      	mov	r3, r5
 8008862:	2200      	movs	r2, #0
 8008864:	4543      	cmp	r3, r8
 8008866:	d321      	bcc.n	80088ac <__multiply+0x98>
 8008868:	f107 0114 	add.w	r1, r7, #20
 800886c:	f104 0214 	add.w	r2, r4, #20
 8008870:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008874:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	1b13      	subs	r3, r2, r4
 800887c:	3b15      	subs	r3, #21
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	3304      	adds	r3, #4
 8008884:	f104 0715 	add.w	r7, r4, #21
 8008888:	42ba      	cmp	r2, r7
 800888a:	bf38      	it	cc
 800888c:	2304      	movcc	r3, #4
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	9103      	str	r1, [sp, #12]
 8008894:	428b      	cmp	r3, r1
 8008896:	d80c      	bhi.n	80088b2 <__multiply+0x9e>
 8008898:	2e00      	cmp	r6, #0
 800889a:	dd03      	ble.n	80088a4 <__multiply+0x90>
 800889c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d05b      	beq.n	800895c <__multiply+0x148>
 80088a4:	6106      	str	r6, [r0, #16]
 80088a6:	b005      	add	sp, #20
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	f843 2b04 	str.w	r2, [r3], #4
 80088b0:	e7d8      	b.n	8008864 <__multiply+0x50>
 80088b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80088b6:	f1ba 0f00 	cmp.w	sl, #0
 80088ba:	d024      	beq.n	8008906 <__multiply+0xf2>
 80088bc:	f104 0e14 	add.w	lr, r4, #20
 80088c0:	46a9      	mov	r9, r5
 80088c2:	f04f 0c00 	mov.w	ip, #0
 80088c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ca:	f8d9 3000 	ldr.w	r3, [r9]
 80088ce:	fa1f fb87 	uxth.w	fp, r7
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80088d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088dc:	f8d9 7000 	ldr.w	r7, [r9]
 80088e0:	4463      	add	r3, ip
 80088e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80088ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088f4:	4572      	cmp	r2, lr
 80088f6:	f849 3b04 	str.w	r3, [r9], #4
 80088fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088fe:	d8e2      	bhi.n	80088c6 <__multiply+0xb2>
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	f845 c003 	str.w	ip, [r5, r3]
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800890c:	3104      	adds	r1, #4
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	d021      	beq.n	8008958 <__multiply+0x144>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	f104 0c14 	add.w	ip, r4, #20
 800891a:	46ae      	mov	lr, r5
 800891c:	f04f 0a00 	mov.w	sl, #0
 8008920:	f8bc b000 	ldrh.w	fp, [ip]
 8008924:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008928:	fb09 770b 	mla	r7, r9, fp, r7
 800892c:	4457      	add	r7, sl
 800892e:	b29b      	uxth	r3, r3
 8008930:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008934:	f84e 3b04 	str.w	r3, [lr], #4
 8008938:	f85c 3b04 	ldr.w	r3, [ip], #4
 800893c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008940:	f8be 3000 	ldrh.w	r3, [lr]
 8008944:	fb09 330a 	mla	r3, r9, sl, r3
 8008948:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800894c:	4562      	cmp	r2, ip
 800894e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008952:	d8e5      	bhi.n	8008920 <__multiply+0x10c>
 8008954:	9f01      	ldr	r7, [sp, #4]
 8008956:	51eb      	str	r3, [r5, r7]
 8008958:	3504      	adds	r5, #4
 800895a:	e799      	b.n	8008890 <__multiply+0x7c>
 800895c:	3e01      	subs	r6, #1
 800895e:	e79b      	b.n	8008898 <__multiply+0x84>
 8008960:	08009ba4 	.word	0x08009ba4
 8008964:	08009bb5 	.word	0x08009bb5

08008968 <__pow5mult>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4615      	mov	r5, r2
 800896e:	f012 0203 	ands.w	r2, r2, #3
 8008972:	4607      	mov	r7, r0
 8008974:	460e      	mov	r6, r1
 8008976:	d007      	beq.n	8008988 <__pow5mult+0x20>
 8008978:	4c25      	ldr	r4, [pc, #148]	@ (8008a10 <__pow5mult+0xa8>)
 800897a:	3a01      	subs	r2, #1
 800897c:	2300      	movs	r3, #0
 800897e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008982:	f7ff fe9f 	bl	80086c4 <__multadd>
 8008986:	4606      	mov	r6, r0
 8008988:	10ad      	asrs	r5, r5, #2
 800898a:	d03d      	beq.n	8008a08 <__pow5mult+0xa0>
 800898c:	69fc      	ldr	r4, [r7, #28]
 800898e:	b97c      	cbnz	r4, 80089b0 <__pow5mult+0x48>
 8008990:	2010      	movs	r0, #16
 8008992:	f7ff fd7f 	bl	8008494 <malloc>
 8008996:	4602      	mov	r2, r0
 8008998:	61f8      	str	r0, [r7, #28]
 800899a:	b928      	cbnz	r0, 80089a8 <__pow5mult+0x40>
 800899c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a14 <__pow5mult+0xac>)
 800899e:	481e      	ldr	r0, [pc, #120]	@ (8008a18 <__pow5mult+0xb0>)
 80089a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089a4:	f000 fdd6 	bl	8009554 <__assert_func>
 80089a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ac:	6004      	str	r4, [r0, #0]
 80089ae:	60c4      	str	r4, [r0, #12]
 80089b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b8:	b94c      	cbnz	r4, 80089ce <__pow5mult+0x66>
 80089ba:	f240 2171 	movw	r1, #625	@ 0x271
 80089be:	4638      	mov	r0, r7
 80089c0:	f7ff ff12 	bl	80087e8 <__i2b>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ca:	4604      	mov	r4, r0
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 0900 	mov.w	r9, #0
 80089d2:	07eb      	lsls	r3, r5, #31
 80089d4:	d50a      	bpl.n	80089ec <__pow5mult+0x84>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4622      	mov	r2, r4
 80089da:	4638      	mov	r0, r7
 80089dc:	f7ff ff1a 	bl	8008814 <__multiply>
 80089e0:	4631      	mov	r1, r6
 80089e2:	4680      	mov	r8, r0
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff fe4b 	bl	8008680 <_Bfree>
 80089ea:	4646      	mov	r6, r8
 80089ec:	106d      	asrs	r5, r5, #1
 80089ee:	d00b      	beq.n	8008a08 <__pow5mult+0xa0>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	b938      	cbnz	r0, 8008a04 <__pow5mult+0x9c>
 80089f4:	4622      	mov	r2, r4
 80089f6:	4621      	mov	r1, r4
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7ff ff0b 	bl	8008814 <__multiply>
 80089fe:	6020      	str	r0, [r4, #0]
 8008a00:	f8c0 9000 	str.w	r9, [r0]
 8008a04:	4604      	mov	r4, r0
 8008a06:	e7e4      	b.n	80089d2 <__pow5mult+0x6a>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	bf00      	nop
 8008a10:	08009c10 	.word	0x08009c10
 8008a14:	08009b35 	.word	0x08009b35
 8008a18:	08009bb5 	.word	0x08009bb5

08008a1c <__lshift>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	460c      	mov	r4, r1
 8008a22:	6849      	ldr	r1, [r1, #4]
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4691      	mov	r9, r2
 8008a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a34:	f108 0601 	add.w	r6, r8, #1
 8008a38:	42b3      	cmp	r3, r6
 8008a3a:	db0b      	blt.n	8008a54 <__lshift+0x38>
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff fddf 	bl	8008600 <_Balloc>
 8008a42:	4605      	mov	r5, r0
 8008a44:	b948      	cbnz	r0, 8008a5a <__lshift+0x3e>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b28      	ldr	r3, [pc, #160]	@ (8008aec <__lshift+0xd0>)
 8008a4a:	4829      	ldr	r0, [pc, #164]	@ (8008af0 <__lshift+0xd4>)
 8008a4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a50:	f000 fd80 	bl	8009554 <__assert_func>
 8008a54:	3101      	adds	r1, #1
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	e7ee      	b.n	8008a38 <__lshift+0x1c>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f100 0114 	add.w	r1, r0, #20
 8008a60:	f100 0210 	add.w	r2, r0, #16
 8008a64:	4618      	mov	r0, r3
 8008a66:	4553      	cmp	r3, sl
 8008a68:	db33      	blt.n	8008ad2 <__lshift+0xb6>
 8008a6a:	6920      	ldr	r0, [r4, #16]
 8008a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a70:	f104 0314 	add.w	r3, r4, #20
 8008a74:	f019 091f 	ands.w	r9, r9, #31
 8008a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a80:	d02b      	beq.n	8008ada <__lshift+0xbe>
 8008a82:	f1c9 0e20 	rsb	lr, r9, #32
 8008a86:	468a      	mov	sl, r1
 8008a88:	2200      	movs	r2, #0
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a90:	4310      	orrs	r0, r2
 8008a92:	f84a 0b04 	str.w	r0, [sl], #4
 8008a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9a:	459c      	cmp	ip, r3
 8008a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aa0:	d8f3      	bhi.n	8008a8a <__lshift+0x6e>
 8008aa2:	ebac 0304 	sub.w	r3, ip, r4
 8008aa6:	3b15      	subs	r3, #21
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	3304      	adds	r3, #4
 8008aae:	f104 0015 	add.w	r0, r4, #21
 8008ab2:	4584      	cmp	ip, r0
 8008ab4:	bf38      	it	cc
 8008ab6:	2304      	movcc	r3, #4
 8008ab8:	50ca      	str	r2, [r1, r3]
 8008aba:	b10a      	cbz	r2, 8008ac0 <__lshift+0xa4>
 8008abc:	f108 0602 	add.w	r6, r8, #2
 8008ac0:	3e01      	subs	r6, #1
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	612e      	str	r6, [r5, #16]
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	f7ff fdda 	bl	8008680 <_Bfree>
 8008acc:	4628      	mov	r0, r5
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	e7c5      	b.n	8008a66 <__lshift+0x4a>
 8008ada:	3904      	subs	r1, #4
 8008adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ae4:	459c      	cmp	ip, r3
 8008ae6:	d8f9      	bhi.n	8008adc <__lshift+0xc0>
 8008ae8:	e7ea      	b.n	8008ac0 <__lshift+0xa4>
 8008aea:	bf00      	nop
 8008aec:	08009ba4 	.word	0x08009ba4
 8008af0:	08009bb5 	.word	0x08009bb5

08008af4 <__mcmp>:
 8008af4:	690a      	ldr	r2, [r1, #16]
 8008af6:	4603      	mov	r3, r0
 8008af8:	6900      	ldr	r0, [r0, #16]
 8008afa:	1a80      	subs	r0, r0, r2
 8008afc:	b530      	push	{r4, r5, lr}
 8008afe:	d10e      	bne.n	8008b1e <__mcmp+0x2a>
 8008b00:	3314      	adds	r3, #20
 8008b02:	3114      	adds	r1, #20
 8008b04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b14:	4295      	cmp	r5, r2
 8008b16:	d003      	beq.n	8008b20 <__mcmp+0x2c>
 8008b18:	d205      	bcs.n	8008b26 <__mcmp+0x32>
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d3f3      	bcc.n	8008b0c <__mcmp+0x18>
 8008b24:	e7fb      	b.n	8008b1e <__mcmp+0x2a>
 8008b26:	2001      	movs	r0, #1
 8008b28:	e7f9      	b.n	8008b1e <__mcmp+0x2a>
	...

08008b2c <__mdiff>:
 8008b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b30:	4689      	mov	r9, r1
 8008b32:	4606      	mov	r6, r0
 8008b34:	4611      	mov	r1, r2
 8008b36:	4648      	mov	r0, r9
 8008b38:	4614      	mov	r4, r2
 8008b3a:	f7ff ffdb 	bl	8008af4 <__mcmp>
 8008b3e:	1e05      	subs	r5, r0, #0
 8008b40:	d112      	bne.n	8008b68 <__mdiff+0x3c>
 8008b42:	4629      	mov	r1, r5
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff fd5b 	bl	8008600 <_Balloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__mdiff+0x2e>
 8008b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8008c4c <__mdiff+0x120>)
 8008b50:	f240 2137 	movw	r1, #567	@ 0x237
 8008b54:	483e      	ldr	r0, [pc, #248]	@ (8008c50 <__mdiff+0x124>)
 8008b56:	f000 fcfd 	bl	8009554 <__assert_func>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b60:	4610      	mov	r0, r2
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	bfbc      	itt	lt
 8008b6a:	464b      	movlt	r3, r9
 8008b6c:	46a1      	movlt	r9, r4
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b74:	bfba      	itte	lt
 8008b76:	461c      	movlt	r4, r3
 8008b78:	2501      	movlt	r5, #1
 8008b7a:	2500      	movge	r5, #0
 8008b7c:	f7ff fd40 	bl	8008600 <_Balloc>
 8008b80:	4602      	mov	r2, r0
 8008b82:	b918      	cbnz	r0, 8008b8c <__mdiff+0x60>
 8008b84:	4b31      	ldr	r3, [pc, #196]	@ (8008c4c <__mdiff+0x120>)
 8008b86:	f240 2145 	movw	r1, #581	@ 0x245
 8008b8a:	e7e3      	b.n	8008b54 <__mdiff+0x28>
 8008b8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b90:	6926      	ldr	r6, [r4, #16]
 8008b92:	60c5      	str	r5, [r0, #12]
 8008b94:	f109 0310 	add.w	r3, r9, #16
 8008b98:	f109 0514 	add.w	r5, r9, #20
 8008b9c:	f104 0e14 	add.w	lr, r4, #20
 8008ba0:	f100 0b14 	add.w	fp, r0, #20
 8008ba4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ba8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	46d9      	mov	r9, fp
 8008bb0:	f04f 0c00 	mov.w	ip, #0
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	fa1f f38a 	uxth.w	r3, sl
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	b283      	uxth	r3, r0
 8008bc8:	1acb      	subs	r3, r1, r3
 8008bca:	0c00      	lsrs	r0, r0, #16
 8008bcc:	4463      	add	r3, ip
 8008bce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bdc:	4576      	cmp	r6, lr
 8008bde:	f849 3b04 	str.w	r3, [r9], #4
 8008be2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008be6:	d8e5      	bhi.n	8008bb4 <__mdiff+0x88>
 8008be8:	1b33      	subs	r3, r6, r4
 8008bea:	3b15      	subs	r3, #21
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	3415      	adds	r4, #21
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	42a6      	cmp	r6, r4
 8008bf6:	bf38      	it	cc
 8008bf8:	2304      	movcc	r3, #4
 8008bfa:	441d      	add	r5, r3
 8008bfc:	445b      	add	r3, fp
 8008bfe:	461e      	mov	r6, r3
 8008c00:	462c      	mov	r4, r5
 8008c02:	4544      	cmp	r4, r8
 8008c04:	d30e      	bcc.n	8008c24 <__mdiff+0xf8>
 8008c06:	f108 0103 	add.w	r1, r8, #3
 8008c0a:	1b49      	subs	r1, r1, r5
 8008c0c:	f021 0103 	bic.w	r1, r1, #3
 8008c10:	3d03      	subs	r5, #3
 8008c12:	45a8      	cmp	r8, r5
 8008c14:	bf38      	it	cc
 8008c16:	2100      	movcc	r1, #0
 8008c18:	440b      	add	r3, r1
 8008c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c1e:	b191      	cbz	r1, 8008c46 <__mdiff+0x11a>
 8008c20:	6117      	str	r7, [r2, #16]
 8008c22:	e79d      	b.n	8008b60 <__mdiff+0x34>
 8008c24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c28:	46e6      	mov	lr, ip
 8008c2a:	0c08      	lsrs	r0, r1, #16
 8008c2c:	fa1c fc81 	uxtah	ip, ip, r1
 8008c30:	4471      	add	r1, lr
 8008c32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c36:	b289      	uxth	r1, r1
 8008c38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c3c:	f846 1b04 	str.w	r1, [r6], #4
 8008c40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c44:	e7dd      	b.n	8008c02 <__mdiff+0xd6>
 8008c46:	3f01      	subs	r7, #1
 8008c48:	e7e7      	b.n	8008c1a <__mdiff+0xee>
 8008c4a:	bf00      	nop
 8008c4c:	08009ba4 	.word	0x08009ba4
 8008c50:	08009bb5 	.word	0x08009bb5

08008c54 <__d2b>:
 8008c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c58:	460f      	mov	r7, r1
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	ec59 8b10 	vmov	r8, r9, d0
 8008c60:	4616      	mov	r6, r2
 8008c62:	f7ff fccd 	bl	8008600 <_Balloc>
 8008c66:	4604      	mov	r4, r0
 8008c68:	b930      	cbnz	r0, 8008c78 <__d2b+0x24>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b23      	ldr	r3, [pc, #140]	@ (8008cfc <__d2b+0xa8>)
 8008c6e:	4824      	ldr	r0, [pc, #144]	@ (8008d00 <__d2b+0xac>)
 8008c70:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c74:	f000 fc6e 	bl	8009554 <__assert_func>
 8008c78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c80:	b10d      	cbz	r5, 8008c86 <__d2b+0x32>
 8008c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	f1b8 0300 	subs.w	r3, r8, #0
 8008c8c:	d023      	beq.n	8008cd6 <__d2b+0x82>
 8008c8e:	4668      	mov	r0, sp
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f7ff fd7c 	bl	800878e <__lo0bits>
 8008c96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c9a:	b1d0      	cbz	r0, 8008cd2 <__d2b+0x7e>
 8008c9c:	f1c0 0320 	rsb	r3, r0, #32
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	40c2      	lsrs	r2, r0
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	61a3      	str	r3, [r4, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2201      	moveq	r2, #1
 8008cb6:	2202      	movne	r2, #2
 8008cb8:	6122      	str	r2, [r4, #16]
 8008cba:	b1a5      	cbz	r5, 8008ce6 <__d2b+0x92>
 8008cbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cc0:	4405      	add	r5, r0
 8008cc2:	603d      	str	r5, [r7, #0]
 8008cc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4620      	mov	r0, r4
 8008ccc:	b003      	add	sp, #12
 8008cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	6161      	str	r1, [r4, #20]
 8008cd4:	e7ea      	b.n	8008cac <__d2b+0x58>
 8008cd6:	a801      	add	r0, sp, #4
 8008cd8:	f7ff fd59 	bl	800878e <__lo0bits>
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	6163      	str	r3, [r4, #20]
 8008ce0:	3020      	adds	r0, #32
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	e7e8      	b.n	8008cb8 <__d2b+0x64>
 8008ce6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cee:	6038      	str	r0, [r7, #0]
 8008cf0:	6918      	ldr	r0, [r3, #16]
 8008cf2:	f7ff fd2d 	bl	8008750 <__hi0bits>
 8008cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cfa:	e7e5      	b.n	8008cc8 <__d2b+0x74>
 8008cfc:	08009ba4 	.word	0x08009ba4
 8008d00:	08009bb5 	.word	0x08009bb5

08008d04 <__ssputs_r>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	688e      	ldr	r6, [r1, #8]
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	42be      	cmp	r6, r7
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	4682      	mov	sl, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	4690      	mov	r8, r2
 8008d16:	d82d      	bhi.n	8008d74 <__ssputs_r+0x70>
 8008d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d20:	d026      	beq.n	8008d70 <__ssputs_r+0x6c>
 8008d22:	6965      	ldr	r5, [r4, #20]
 8008d24:	6909      	ldr	r1, [r1, #16]
 8008d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d2a:	eba3 0901 	sub.w	r9, r3, r1
 8008d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d32:	1c7b      	adds	r3, r7, #1
 8008d34:	444b      	add	r3, r9
 8008d36:	106d      	asrs	r5, r5, #1
 8008d38:	429d      	cmp	r5, r3
 8008d3a:	bf38      	it	cc
 8008d3c:	461d      	movcc	r5, r3
 8008d3e:	0553      	lsls	r3, r2, #21
 8008d40:	d527      	bpl.n	8008d92 <__ssputs_r+0x8e>
 8008d42:	4629      	mov	r1, r5
 8008d44:	f7ff fbd0 	bl	80084e8 <_malloc_r>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b360      	cbz	r0, 8008da6 <__ssputs_r+0xa2>
 8008d4c:	6921      	ldr	r1, [r4, #16]
 8008d4e:	464a      	mov	r2, r9
 8008d50:	f7fe fcfb 	bl	800774a <memcpy>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6126      	str	r6, [r4, #16]
 8008d62:	6165      	str	r5, [r4, #20]
 8008d64:	444e      	add	r6, r9
 8008d66:	eba5 0509 	sub.w	r5, r5, r9
 8008d6a:	6026      	str	r6, [r4, #0]
 8008d6c:	60a5      	str	r5, [r4, #8]
 8008d6e:	463e      	mov	r6, r7
 8008d70:	42be      	cmp	r6, r7
 8008d72:	d900      	bls.n	8008d76 <__ssputs_r+0x72>
 8008d74:	463e      	mov	r6, r7
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	f000 fb9e 	bl	80094bc <memmove>
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	1b9b      	subs	r3, r3, r6
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	4433      	add	r3, r6
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d92:	462a      	mov	r2, r5
 8008d94:	f000 fc22 	bl	80095dc <_realloc_r>
 8008d98:	4606      	mov	r6, r0
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1e0      	bne.n	8008d60 <__ssputs_r+0x5c>
 8008d9e:	6921      	ldr	r1, [r4, #16]
 8008da0:	4650      	mov	r0, sl
 8008da2:	f7ff fb2d 	bl	8008400 <_free_r>
 8008da6:	230c      	movs	r3, #12
 8008da8:	f8ca 3000 	str.w	r3, [sl]
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db8:	e7e9      	b.n	8008d8e <__ssputs_r+0x8a>
	...

08008dbc <_svfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	4698      	mov	r8, r3
 8008dc2:	898b      	ldrh	r3, [r1, #12]
 8008dc4:	061b      	lsls	r3, r3, #24
 8008dc6:	b09d      	sub	sp, #116	@ 0x74
 8008dc8:	4607      	mov	r7, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	d510      	bpl.n	8008df2 <_svfiprintf_r+0x36>
 8008dd0:	690b      	ldr	r3, [r1, #16]
 8008dd2:	b973      	cbnz	r3, 8008df2 <_svfiprintf_r+0x36>
 8008dd4:	2140      	movs	r1, #64	@ 0x40
 8008dd6:	f7ff fb87 	bl	80084e8 <_malloc_r>
 8008dda:	6028      	str	r0, [r5, #0]
 8008ddc:	6128      	str	r0, [r5, #16]
 8008dde:	b930      	cbnz	r0, 8008dee <_svfiprintf_r+0x32>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008de8:	b01d      	add	sp, #116	@ 0x74
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	2340      	movs	r3, #64	@ 0x40
 8008df0:	616b      	str	r3, [r5, #20]
 8008df2:	2300      	movs	r3, #0
 8008df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df6:	2320      	movs	r3, #32
 8008df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e00:	2330      	movs	r3, #48	@ 0x30
 8008e02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008fa0 <_svfiprintf_r+0x1e4>
 8008e06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e0a:	f04f 0901 	mov.w	r9, #1
 8008e0e:	4623      	mov	r3, r4
 8008e10:	469a      	mov	sl, r3
 8008e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e16:	b10a      	cbz	r2, 8008e1c <_svfiprintf_r+0x60>
 8008e18:	2a25      	cmp	r2, #37	@ 0x25
 8008e1a:	d1f9      	bne.n	8008e10 <_svfiprintf_r+0x54>
 8008e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e20:	d00b      	beq.n	8008e3a <_svfiprintf_r+0x7e>
 8008e22:	465b      	mov	r3, fp
 8008e24:	4622      	mov	r2, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ff6b 	bl	8008d04 <__ssputs_r>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f000 80a7 	beq.w	8008f82 <_svfiprintf_r+0x1c6>
 8008e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e36:	445a      	add	r2, fp
 8008e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 809f 	beq.w	8008f82 <_svfiprintf_r+0x1c6>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e4e:	f10a 0a01 	add.w	sl, sl, #1
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e5c:	4654      	mov	r4, sl
 8008e5e:	2205      	movs	r2, #5
 8008e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e64:	484e      	ldr	r0, [pc, #312]	@ (8008fa0 <_svfiprintf_r+0x1e4>)
 8008e66:	f7f7 f9d3 	bl	8000210 <memchr>
 8008e6a:	9a04      	ldr	r2, [sp, #16]
 8008e6c:	b9d8      	cbnz	r0, 8008ea6 <_svfiprintf_r+0xea>
 8008e6e:	06d0      	lsls	r0, r2, #27
 8008e70:	bf44      	itt	mi
 8008e72:	2320      	movmi	r3, #32
 8008e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e78:	0711      	lsls	r1, r2, #28
 8008e7a:	bf44      	itt	mi
 8008e7c:	232b      	movmi	r3, #43	@ 0x2b
 8008e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e82:	f89a 3000 	ldrb.w	r3, [sl]
 8008e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e88:	d015      	beq.n	8008eb6 <_svfiprintf_r+0xfa>
 8008e8a:	9a07      	ldr	r2, [sp, #28]
 8008e8c:	4654      	mov	r4, sl
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f04f 0c0a 	mov.w	ip, #10
 8008e94:	4621      	mov	r1, r4
 8008e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9a:	3b30      	subs	r3, #48	@ 0x30
 8008e9c:	2b09      	cmp	r3, #9
 8008e9e:	d94b      	bls.n	8008f38 <_svfiprintf_r+0x17c>
 8008ea0:	b1b0      	cbz	r0, 8008ed0 <_svfiprintf_r+0x114>
 8008ea2:	9207      	str	r2, [sp, #28]
 8008ea4:	e014      	b.n	8008ed0 <_svfiprintf_r+0x114>
 8008ea6:	eba0 0308 	sub.w	r3, r0, r8
 8008eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	46a2      	mov	sl, r4
 8008eb4:	e7d2      	b.n	8008e5c <_svfiprintf_r+0xa0>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	1d19      	adds	r1, r3, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9103      	str	r1, [sp, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfbb      	ittet	lt
 8008ec2:	425b      	neglt	r3, r3
 8008ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec8:	9307      	strge	r3, [sp, #28]
 8008eca:	9307      	strlt	r3, [sp, #28]
 8008ecc:	bfb8      	it	lt
 8008ece:	9204      	strlt	r2, [sp, #16]
 8008ed0:	7823      	ldrb	r3, [r4, #0]
 8008ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed4:	d10a      	bne.n	8008eec <_svfiprintf_r+0x130>
 8008ed6:	7863      	ldrb	r3, [r4, #1]
 8008ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eda:	d132      	bne.n	8008f42 <_svfiprintf_r+0x186>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	9203      	str	r2, [sp, #12]
 8008ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ee8:	3402      	adds	r4, #2
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fb0 <_svfiprintf_r+0x1f4>
 8008ef0:	7821      	ldrb	r1, [r4, #0]
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	f7f7 f98b 	bl	8000210 <memchr>
 8008efa:	b138      	cbz	r0, 8008f0c <_svfiprintf_r+0x150>
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	eba0 000a 	sub.w	r0, r0, sl
 8008f02:	2240      	movs	r2, #64	@ 0x40
 8008f04:	4082      	lsls	r2, r0
 8008f06:	4313      	orrs	r3, r2
 8008f08:	3401      	adds	r4, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f10:	4824      	ldr	r0, [pc, #144]	@ (8008fa4 <_svfiprintf_r+0x1e8>)
 8008f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f16:	2206      	movs	r2, #6
 8008f18:	f7f7 f97a 	bl	8000210 <memchr>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d036      	beq.n	8008f8e <_svfiprintf_r+0x1d2>
 8008f20:	4b21      	ldr	r3, [pc, #132]	@ (8008fa8 <_svfiprintf_r+0x1ec>)
 8008f22:	bb1b      	cbnz	r3, 8008f6c <_svfiprintf_r+0x1b0>
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	3307      	adds	r3, #7
 8008f28:	f023 0307 	bic.w	r3, r3, #7
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f32:	4433      	add	r3, r6
 8008f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f36:	e76a      	b.n	8008e0e <_svfiprintf_r+0x52>
 8008f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7a8      	b.n	8008e94 <_svfiprintf_r+0xd8>
 8008f42:	2300      	movs	r3, #0
 8008f44:	3401      	adds	r4, #1
 8008f46:	9305      	str	r3, [sp, #20]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f04f 0c0a 	mov.w	ip, #10
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f54:	3a30      	subs	r2, #48	@ 0x30
 8008f56:	2a09      	cmp	r2, #9
 8008f58:	d903      	bls.n	8008f62 <_svfiprintf_r+0x1a6>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0c6      	beq.n	8008eec <_svfiprintf_r+0x130>
 8008f5e:	9105      	str	r1, [sp, #20]
 8008f60:	e7c4      	b.n	8008eec <_svfiprintf_r+0x130>
 8008f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f66:	4604      	mov	r4, r0
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7f0      	b.n	8008f4e <_svfiprintf_r+0x192>
 8008f6c:	ab03      	add	r3, sp, #12
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	462a      	mov	r2, r5
 8008f72:	4b0e      	ldr	r3, [pc, #56]	@ (8008fac <_svfiprintf_r+0x1f0>)
 8008f74:	a904      	add	r1, sp, #16
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7fd fcb6 	bl	80068e8 <_printf_float>
 8008f7c:	1c42      	adds	r2, r0, #1
 8008f7e:	4606      	mov	r6, r0
 8008f80:	d1d6      	bne.n	8008f30 <_svfiprintf_r+0x174>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	065b      	lsls	r3, r3, #25
 8008f86:	f53f af2d 	bmi.w	8008de4 <_svfiprintf_r+0x28>
 8008f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f8c:	e72c      	b.n	8008de8 <_svfiprintf_r+0x2c>
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	462a      	mov	r2, r5
 8008f94:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <_svfiprintf_r+0x1f0>)
 8008f96:	a904      	add	r1, sp, #16
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7fd ff3d 	bl	8006e18 <_printf_i>
 8008f9e:	e7ed      	b.n	8008f7c <_svfiprintf_r+0x1c0>
 8008fa0:	08009d10 	.word	0x08009d10
 8008fa4:	08009d1a 	.word	0x08009d1a
 8008fa8:	080068e9 	.word	0x080068e9
 8008fac:	08008d05 	.word	0x08008d05
 8008fb0:	08009d16 	.word	0x08009d16

08008fb4 <__sfputc_r>:
 8008fb4:	6893      	ldr	r3, [r2, #8]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	b410      	push	{r4}
 8008fbc:	6093      	str	r3, [r2, #8]
 8008fbe:	da08      	bge.n	8008fd2 <__sfputc_r+0x1e>
 8008fc0:	6994      	ldr	r4, [r2, #24]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	db01      	blt.n	8008fca <__sfputc_r+0x16>
 8008fc6:	290a      	cmp	r1, #10
 8008fc8:	d103      	bne.n	8008fd2 <__sfputc_r+0x1e>
 8008fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fce:	f7fe baa8 	b.w	8007522 <__swbuf_r>
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	1c58      	adds	r0, r3, #1
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	7019      	strb	r1, [r3, #0]
 8008fda:	4608      	mov	r0, r1
 8008fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <__sfputs_r>:
 8008fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	18d5      	adds	r5, r2, r3
 8008fec:	42ac      	cmp	r4, r5
 8008fee:	d101      	bne.n	8008ff4 <__sfputs_r+0x12>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e007      	b.n	8009004 <__sfputs_r+0x22>
 8008ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffda 	bl	8008fb4 <__sfputc_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d1f3      	bne.n	8008fec <__sfputs_r+0xa>
 8009004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009008 <_vfiprintf_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	b09d      	sub	sp, #116	@ 0x74
 8009010:	4614      	mov	r4, r2
 8009012:	4698      	mov	r8, r3
 8009014:	4606      	mov	r6, r0
 8009016:	b118      	cbz	r0, 8009020 <_vfiprintf_r+0x18>
 8009018:	6a03      	ldr	r3, [r0, #32]
 800901a:	b90b      	cbnz	r3, 8009020 <_vfiprintf_r+0x18>
 800901c:	f7fe f8a8 	bl	8007170 <__sinit>
 8009020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009022:	07d9      	lsls	r1, r3, #31
 8009024:	d405      	bmi.n	8009032 <_vfiprintf_r+0x2a>
 8009026:	89ab      	ldrh	r3, [r5, #12]
 8009028:	059a      	lsls	r2, r3, #22
 800902a:	d402      	bmi.n	8009032 <_vfiprintf_r+0x2a>
 800902c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800902e:	f7fe fb8a 	bl	8007746 <__retarget_lock_acquire_recursive>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	071b      	lsls	r3, r3, #28
 8009036:	d501      	bpl.n	800903c <_vfiprintf_r+0x34>
 8009038:	692b      	ldr	r3, [r5, #16]
 800903a:	b99b      	cbnz	r3, 8009064 <_vfiprintf_r+0x5c>
 800903c:	4629      	mov	r1, r5
 800903e:	4630      	mov	r0, r6
 8009040:	f7fe faae 	bl	80075a0 <__swsetup_r>
 8009044:	b170      	cbz	r0, 8009064 <_vfiprintf_r+0x5c>
 8009046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009048:	07dc      	lsls	r4, r3, #31
 800904a:	d504      	bpl.n	8009056 <_vfiprintf_r+0x4e>
 800904c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009050:	b01d      	add	sp, #116	@ 0x74
 8009052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009056:	89ab      	ldrh	r3, [r5, #12]
 8009058:	0598      	lsls	r0, r3, #22
 800905a:	d4f7      	bmi.n	800904c <_vfiprintf_r+0x44>
 800905c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800905e:	f7fe fb73 	bl	8007748 <__retarget_lock_release_recursive>
 8009062:	e7f3      	b.n	800904c <_vfiprintf_r+0x44>
 8009064:	2300      	movs	r3, #0
 8009066:	9309      	str	r3, [sp, #36]	@ 0x24
 8009068:	2320      	movs	r3, #32
 800906a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800906e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009072:	2330      	movs	r3, #48	@ 0x30
 8009074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009224 <_vfiprintf_r+0x21c>
 8009078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800907c:	f04f 0901 	mov.w	r9, #1
 8009080:	4623      	mov	r3, r4
 8009082:	469a      	mov	sl, r3
 8009084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009088:	b10a      	cbz	r2, 800908e <_vfiprintf_r+0x86>
 800908a:	2a25      	cmp	r2, #37	@ 0x25
 800908c:	d1f9      	bne.n	8009082 <_vfiprintf_r+0x7a>
 800908e:	ebba 0b04 	subs.w	fp, sl, r4
 8009092:	d00b      	beq.n	80090ac <_vfiprintf_r+0xa4>
 8009094:	465b      	mov	r3, fp
 8009096:	4622      	mov	r2, r4
 8009098:	4629      	mov	r1, r5
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff ffa1 	bl	8008fe2 <__sfputs_r>
 80090a0:	3001      	adds	r0, #1
 80090a2:	f000 80a7 	beq.w	80091f4 <_vfiprintf_r+0x1ec>
 80090a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a8:	445a      	add	r2, fp
 80090aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ac:	f89a 3000 	ldrb.w	r3, [sl]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 809f 	beq.w	80091f4 <_vfiprintf_r+0x1ec>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c0:	f10a 0a01 	add.w	sl, sl, #1
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090ce:	4654      	mov	r4, sl
 80090d0:	2205      	movs	r2, #5
 80090d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d6:	4853      	ldr	r0, [pc, #332]	@ (8009224 <_vfiprintf_r+0x21c>)
 80090d8:	f7f7 f89a 	bl	8000210 <memchr>
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	b9d8      	cbnz	r0, 8009118 <_vfiprintf_r+0x110>
 80090e0:	06d1      	lsls	r1, r2, #27
 80090e2:	bf44      	itt	mi
 80090e4:	2320      	movmi	r3, #32
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ea:	0713      	lsls	r3, r2, #28
 80090ec:	bf44      	itt	mi
 80090ee:	232b      	movmi	r3, #43	@ 0x2b
 80090f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090fa:	d015      	beq.n	8009128 <_vfiprintf_r+0x120>
 80090fc:	9a07      	ldr	r2, [sp, #28]
 80090fe:	4654      	mov	r4, sl
 8009100:	2000      	movs	r0, #0
 8009102:	f04f 0c0a 	mov.w	ip, #10
 8009106:	4621      	mov	r1, r4
 8009108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800910c:	3b30      	subs	r3, #48	@ 0x30
 800910e:	2b09      	cmp	r3, #9
 8009110:	d94b      	bls.n	80091aa <_vfiprintf_r+0x1a2>
 8009112:	b1b0      	cbz	r0, 8009142 <_vfiprintf_r+0x13a>
 8009114:	9207      	str	r2, [sp, #28]
 8009116:	e014      	b.n	8009142 <_vfiprintf_r+0x13a>
 8009118:	eba0 0308 	sub.w	r3, r0, r8
 800911c:	fa09 f303 	lsl.w	r3, r9, r3
 8009120:	4313      	orrs	r3, r2
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	46a2      	mov	sl, r4
 8009126:	e7d2      	b.n	80090ce <_vfiprintf_r+0xc6>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	1d19      	adds	r1, r3, #4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	9103      	str	r1, [sp, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfbb      	ittet	lt
 8009134:	425b      	neglt	r3, r3
 8009136:	f042 0202 	orrlt.w	r2, r2, #2
 800913a:	9307      	strge	r3, [sp, #28]
 800913c:	9307      	strlt	r3, [sp, #28]
 800913e:	bfb8      	it	lt
 8009140:	9204      	strlt	r2, [sp, #16]
 8009142:	7823      	ldrb	r3, [r4, #0]
 8009144:	2b2e      	cmp	r3, #46	@ 0x2e
 8009146:	d10a      	bne.n	800915e <_vfiprintf_r+0x156>
 8009148:	7863      	ldrb	r3, [r4, #1]
 800914a:	2b2a      	cmp	r3, #42	@ 0x2a
 800914c:	d132      	bne.n	80091b4 <_vfiprintf_r+0x1ac>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d1a      	adds	r2, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9203      	str	r2, [sp, #12]
 8009156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800915a:	3402      	adds	r4, #2
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009234 <_vfiprintf_r+0x22c>
 8009162:	7821      	ldrb	r1, [r4, #0]
 8009164:	2203      	movs	r2, #3
 8009166:	4650      	mov	r0, sl
 8009168:	f7f7 f852 	bl	8000210 <memchr>
 800916c:	b138      	cbz	r0, 800917e <_vfiprintf_r+0x176>
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	eba0 000a 	sub.w	r0, r0, sl
 8009174:	2240      	movs	r2, #64	@ 0x40
 8009176:	4082      	lsls	r2, r0
 8009178:	4313      	orrs	r3, r2
 800917a:	3401      	adds	r4, #1
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009182:	4829      	ldr	r0, [pc, #164]	@ (8009228 <_vfiprintf_r+0x220>)
 8009184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009188:	2206      	movs	r2, #6
 800918a:	f7f7 f841 	bl	8000210 <memchr>
 800918e:	2800      	cmp	r0, #0
 8009190:	d03f      	beq.n	8009212 <_vfiprintf_r+0x20a>
 8009192:	4b26      	ldr	r3, [pc, #152]	@ (800922c <_vfiprintf_r+0x224>)
 8009194:	bb1b      	cbnz	r3, 80091de <_vfiprintf_r+0x1d6>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3307      	adds	r3, #7
 800919a:	f023 0307 	bic.w	r3, r3, #7
 800919e:	3308      	adds	r3, #8
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a4:	443b      	add	r3, r7
 80091a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a8:	e76a      	b.n	8009080 <_vfiprintf_r+0x78>
 80091aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ae:	460c      	mov	r4, r1
 80091b0:	2001      	movs	r0, #1
 80091b2:	e7a8      	b.n	8009106 <_vfiprintf_r+0xfe>
 80091b4:	2300      	movs	r3, #0
 80091b6:	3401      	adds	r4, #1
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	4619      	mov	r1, r3
 80091bc:	f04f 0c0a 	mov.w	ip, #10
 80091c0:	4620      	mov	r0, r4
 80091c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c6:	3a30      	subs	r2, #48	@ 0x30
 80091c8:	2a09      	cmp	r2, #9
 80091ca:	d903      	bls.n	80091d4 <_vfiprintf_r+0x1cc>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0c6      	beq.n	800915e <_vfiprintf_r+0x156>
 80091d0:	9105      	str	r1, [sp, #20]
 80091d2:	e7c4      	b.n	800915e <_vfiprintf_r+0x156>
 80091d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d8:	4604      	mov	r4, r0
 80091da:	2301      	movs	r3, #1
 80091dc:	e7f0      	b.n	80091c0 <_vfiprintf_r+0x1b8>
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	462a      	mov	r2, r5
 80091e4:	4b12      	ldr	r3, [pc, #72]	@ (8009230 <_vfiprintf_r+0x228>)
 80091e6:	a904      	add	r1, sp, #16
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7fd fb7d 	bl	80068e8 <_printf_float>
 80091ee:	4607      	mov	r7, r0
 80091f0:	1c78      	adds	r0, r7, #1
 80091f2:	d1d6      	bne.n	80091a2 <_vfiprintf_r+0x19a>
 80091f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091f6:	07d9      	lsls	r1, r3, #31
 80091f8:	d405      	bmi.n	8009206 <_vfiprintf_r+0x1fe>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	059a      	lsls	r2, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_vfiprintf_r+0x1fe>
 8009200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009202:	f7fe faa1 	bl	8007748 <__retarget_lock_release_recursive>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	065b      	lsls	r3, r3, #25
 800920a:	f53f af1f 	bmi.w	800904c <_vfiprintf_r+0x44>
 800920e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009210:	e71e      	b.n	8009050 <_vfiprintf_r+0x48>
 8009212:	ab03      	add	r3, sp, #12
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	462a      	mov	r2, r5
 8009218:	4b05      	ldr	r3, [pc, #20]	@ (8009230 <_vfiprintf_r+0x228>)
 800921a:	a904      	add	r1, sp, #16
 800921c:	4630      	mov	r0, r6
 800921e:	f7fd fdfb 	bl	8006e18 <_printf_i>
 8009222:	e7e4      	b.n	80091ee <_vfiprintf_r+0x1e6>
 8009224:	08009d10 	.word	0x08009d10
 8009228:	08009d1a 	.word	0x08009d1a
 800922c:	080068e9 	.word	0x080068e9
 8009230:	08008fe3 	.word	0x08008fe3
 8009234:	08009d16 	.word	0x08009d16

08009238 <__sflush_r>:
 8009238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	0716      	lsls	r6, r2, #28
 8009242:	4605      	mov	r5, r0
 8009244:	460c      	mov	r4, r1
 8009246:	d454      	bmi.n	80092f2 <__sflush_r+0xba>
 8009248:	684b      	ldr	r3, [r1, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	dc02      	bgt.n	8009254 <__sflush_r+0x1c>
 800924e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	dd48      	ble.n	80092e6 <__sflush_r+0xae>
 8009254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009256:	2e00      	cmp	r6, #0
 8009258:	d045      	beq.n	80092e6 <__sflush_r+0xae>
 800925a:	2300      	movs	r3, #0
 800925c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009260:	682f      	ldr	r7, [r5, #0]
 8009262:	6a21      	ldr	r1, [r4, #32]
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	d030      	beq.n	80092ca <__sflush_r+0x92>
 8009268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	0759      	lsls	r1, r3, #29
 800926e:	d505      	bpl.n	800927c <__sflush_r+0x44>
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	1ad2      	subs	r2, r2, r3
 8009274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009276:	b10b      	cbz	r3, 800927c <__sflush_r+0x44>
 8009278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	2300      	movs	r3, #0
 800927e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	4628      	mov	r0, r5
 8009284:	47b0      	blx	r6
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	d106      	bne.n	800929a <__sflush_r+0x62>
 800928c:	6829      	ldr	r1, [r5, #0]
 800928e:	291d      	cmp	r1, #29
 8009290:	d82b      	bhi.n	80092ea <__sflush_r+0xb2>
 8009292:	4a2a      	ldr	r2, [pc, #168]	@ (800933c <__sflush_r+0x104>)
 8009294:	410a      	asrs	r2, r1
 8009296:	07d6      	lsls	r6, r2, #31
 8009298:	d427      	bmi.n	80092ea <__sflush_r+0xb2>
 800929a:	2200      	movs	r2, #0
 800929c:	6062      	str	r2, [r4, #4]
 800929e:	04d9      	lsls	r1, r3, #19
 80092a0:	6922      	ldr	r2, [r4, #16]
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	d504      	bpl.n	80092b0 <__sflush_r+0x78>
 80092a6:	1c42      	adds	r2, r0, #1
 80092a8:	d101      	bne.n	80092ae <__sflush_r+0x76>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	b903      	cbnz	r3, 80092b0 <__sflush_r+0x78>
 80092ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80092b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b2:	602f      	str	r7, [r5, #0]
 80092b4:	b1b9      	cbz	r1, 80092e6 <__sflush_r+0xae>
 80092b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d002      	beq.n	80092c4 <__sflush_r+0x8c>
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff f89e 	bl	8008400 <_free_r>
 80092c4:	2300      	movs	r3, #0
 80092c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c8:	e00d      	b.n	80092e6 <__sflush_r+0xae>
 80092ca:	2301      	movs	r3, #1
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b0      	blx	r6
 80092d0:	4602      	mov	r2, r0
 80092d2:	1c50      	adds	r0, r2, #1
 80092d4:	d1c9      	bne.n	800926a <__sflush_r+0x32>
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0c6      	beq.n	800926a <__sflush_r+0x32>
 80092dc:	2b1d      	cmp	r3, #29
 80092de:	d001      	beq.n	80092e4 <__sflush_r+0xac>
 80092e0:	2b16      	cmp	r3, #22
 80092e2:	d11e      	bne.n	8009322 <__sflush_r+0xea>
 80092e4:	602f      	str	r7, [r5, #0]
 80092e6:	2000      	movs	r0, #0
 80092e8:	e022      	b.n	8009330 <__sflush_r+0xf8>
 80092ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ee:	b21b      	sxth	r3, r3
 80092f0:	e01b      	b.n	800932a <__sflush_r+0xf2>
 80092f2:	690f      	ldr	r7, [r1, #16]
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	d0f6      	beq.n	80092e6 <__sflush_r+0xae>
 80092f8:	0793      	lsls	r3, r2, #30
 80092fa:	680e      	ldr	r6, [r1, #0]
 80092fc:	bf08      	it	eq
 80092fe:	694b      	ldreq	r3, [r1, #20]
 8009300:	600f      	str	r7, [r1, #0]
 8009302:	bf18      	it	ne
 8009304:	2300      	movne	r3, #0
 8009306:	eba6 0807 	sub.w	r8, r6, r7
 800930a:	608b      	str	r3, [r1, #8]
 800930c:	f1b8 0f00 	cmp.w	r8, #0
 8009310:	dde9      	ble.n	80092e6 <__sflush_r+0xae>
 8009312:	6a21      	ldr	r1, [r4, #32]
 8009314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009316:	4643      	mov	r3, r8
 8009318:	463a      	mov	r2, r7
 800931a:	4628      	mov	r0, r5
 800931c:	47b0      	blx	r6
 800931e:	2800      	cmp	r0, #0
 8009320:	dc08      	bgt.n	8009334 <__sflush_r+0xfc>
 8009322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	4407      	add	r7, r0
 8009336:	eba8 0800 	sub.w	r8, r8, r0
 800933a:	e7e7      	b.n	800930c <__sflush_r+0xd4>
 800933c:	dfbffffe 	.word	0xdfbffffe

08009340 <_fflush_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	690b      	ldr	r3, [r1, #16]
 8009344:	4605      	mov	r5, r0
 8009346:	460c      	mov	r4, r1
 8009348:	b913      	cbnz	r3, 8009350 <_fflush_r+0x10>
 800934a:	2500      	movs	r5, #0
 800934c:	4628      	mov	r0, r5
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	b118      	cbz	r0, 800935a <_fflush_r+0x1a>
 8009352:	6a03      	ldr	r3, [r0, #32]
 8009354:	b90b      	cbnz	r3, 800935a <_fflush_r+0x1a>
 8009356:	f7fd ff0b 	bl	8007170 <__sinit>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0f3      	beq.n	800934a <_fflush_r+0xa>
 8009362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009364:	07d0      	lsls	r0, r2, #31
 8009366:	d404      	bmi.n	8009372 <_fflush_r+0x32>
 8009368:	0599      	lsls	r1, r3, #22
 800936a:	d402      	bmi.n	8009372 <_fflush_r+0x32>
 800936c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936e:	f7fe f9ea 	bl	8007746 <__retarget_lock_acquire_recursive>
 8009372:	4628      	mov	r0, r5
 8009374:	4621      	mov	r1, r4
 8009376:	f7ff ff5f 	bl	8009238 <__sflush_r>
 800937a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800937c:	07da      	lsls	r2, r3, #31
 800937e:	4605      	mov	r5, r0
 8009380:	d4e4      	bmi.n	800934c <_fflush_r+0xc>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	059b      	lsls	r3, r3, #22
 8009386:	d4e1      	bmi.n	800934c <_fflush_r+0xc>
 8009388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938a:	f7fe f9dd 	bl	8007748 <__retarget_lock_release_recursive>
 800938e:	e7dd      	b.n	800934c <_fflush_r+0xc>

08009390 <__swhatbuf_r>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	460c      	mov	r4, r1
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2900      	cmp	r1, #0
 800939a:	b096      	sub	sp, #88	@ 0x58
 800939c:	4615      	mov	r5, r2
 800939e:	461e      	mov	r6, r3
 80093a0:	da0d      	bge.n	80093be <__swhatbuf_r+0x2e>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093a8:	f04f 0100 	mov.w	r1, #0
 80093ac:	bf14      	ite	ne
 80093ae:	2340      	movne	r3, #64	@ 0x40
 80093b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093b4:	2000      	movs	r0, #0
 80093b6:	6031      	str	r1, [r6, #0]
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	b016      	add	sp, #88	@ 0x58
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	466a      	mov	r2, sp
 80093c0:	f000 f896 	bl	80094f0 <_fstat_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dbec      	blt.n	80093a2 <__swhatbuf_r+0x12>
 80093c8:	9901      	ldr	r1, [sp, #4]
 80093ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093d2:	4259      	negs	r1, r3
 80093d4:	4159      	adcs	r1, r3
 80093d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093da:	e7eb      	b.n	80093b4 <__swhatbuf_r+0x24>

080093dc <__smakebuf_r>:
 80093dc:	898b      	ldrh	r3, [r1, #12]
 80093de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093e0:	079d      	lsls	r5, r3, #30
 80093e2:	4606      	mov	r6, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	d507      	bpl.n	80093f8 <__smakebuf_r+0x1c>
 80093e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	2301      	movs	r3, #1
 80093f2:	6163      	str	r3, [r4, #20]
 80093f4:	b003      	add	sp, #12
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	ab01      	add	r3, sp, #4
 80093fa:	466a      	mov	r2, sp
 80093fc:	f7ff ffc8 	bl	8009390 <__swhatbuf_r>
 8009400:	9f00      	ldr	r7, [sp, #0]
 8009402:	4605      	mov	r5, r0
 8009404:	4639      	mov	r1, r7
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff f86e 	bl	80084e8 <_malloc_r>
 800940c:	b948      	cbnz	r0, 8009422 <__smakebuf_r+0x46>
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	059a      	lsls	r2, r3, #22
 8009414:	d4ee      	bmi.n	80093f4 <__smakebuf_r+0x18>
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	f043 0302 	orr.w	r3, r3, #2
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	e7e2      	b.n	80093e8 <__smakebuf_r+0xc>
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	6020      	str	r0, [r4, #0]
 8009426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009432:	b15b      	cbz	r3, 800944c <__smakebuf_r+0x70>
 8009434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f86b 	bl	8009514 <_isatty_r>
 800943e:	b128      	cbz	r0, 800944c <__smakebuf_r+0x70>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	431d      	orrs	r5, r3
 8009450:	81a5      	strh	r5, [r4, #12]
 8009452:	e7cf      	b.n	80093f4 <__smakebuf_r+0x18>

08009454 <_putc_r>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	460d      	mov	r5, r1
 8009458:	4614      	mov	r4, r2
 800945a:	4606      	mov	r6, r0
 800945c:	b118      	cbz	r0, 8009466 <_putc_r+0x12>
 800945e:	6a03      	ldr	r3, [r0, #32]
 8009460:	b90b      	cbnz	r3, 8009466 <_putc_r+0x12>
 8009462:	f7fd fe85 	bl	8007170 <__sinit>
 8009466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009468:	07d8      	lsls	r0, r3, #31
 800946a:	d405      	bmi.n	8009478 <_putc_r+0x24>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	0599      	lsls	r1, r3, #22
 8009470:	d402      	bmi.n	8009478 <_putc_r+0x24>
 8009472:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009474:	f7fe f967 	bl	8007746 <__retarget_lock_acquire_recursive>
 8009478:	68a3      	ldr	r3, [r4, #8]
 800947a:	3b01      	subs	r3, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	da05      	bge.n	800948e <_putc_r+0x3a>
 8009482:	69a2      	ldr	r2, [r4, #24]
 8009484:	4293      	cmp	r3, r2
 8009486:	db12      	blt.n	80094ae <_putc_r+0x5a>
 8009488:	b2eb      	uxtb	r3, r5
 800948a:	2b0a      	cmp	r3, #10
 800948c:	d00f      	beq.n	80094ae <_putc_r+0x5a>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	6022      	str	r2, [r4, #0]
 8009494:	701d      	strb	r5, [r3, #0]
 8009496:	b2ed      	uxtb	r5, r5
 8009498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800949a:	07da      	lsls	r2, r3, #31
 800949c:	d405      	bmi.n	80094aa <_putc_r+0x56>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	059b      	lsls	r3, r3, #22
 80094a2:	d402      	bmi.n	80094aa <_putc_r+0x56>
 80094a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094a6:	f7fe f94f 	bl	8007748 <__retarget_lock_release_recursive>
 80094aa:	4628      	mov	r0, r5
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	4629      	mov	r1, r5
 80094b0:	4622      	mov	r2, r4
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7fe f835 	bl	8007522 <__swbuf_r>
 80094b8:	4605      	mov	r5, r0
 80094ba:	e7ed      	b.n	8009498 <_putc_r+0x44>

080094bc <memmove>:
 80094bc:	4288      	cmp	r0, r1
 80094be:	b510      	push	{r4, lr}
 80094c0:	eb01 0402 	add.w	r4, r1, r2
 80094c4:	d902      	bls.n	80094cc <memmove+0x10>
 80094c6:	4284      	cmp	r4, r0
 80094c8:	4623      	mov	r3, r4
 80094ca:	d807      	bhi.n	80094dc <memmove+0x20>
 80094cc:	1e43      	subs	r3, r0, #1
 80094ce:	42a1      	cmp	r1, r4
 80094d0:	d008      	beq.n	80094e4 <memmove+0x28>
 80094d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094da:	e7f8      	b.n	80094ce <memmove+0x12>
 80094dc:	4402      	add	r2, r0
 80094de:	4601      	mov	r1, r0
 80094e0:	428a      	cmp	r2, r1
 80094e2:	d100      	bne.n	80094e6 <memmove+0x2a>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ee:	e7f7      	b.n	80094e0 <memmove+0x24>

080094f0 <_fstat_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d07      	ldr	r5, [pc, #28]	@ (8009510 <_fstat_r+0x20>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	4611      	mov	r1, r2
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	f7f8 f99b 	bl	8001838 <_fstat>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d102      	bne.n	800950c <_fstat_r+0x1c>
 8009506:	682b      	ldr	r3, [r5, #0]
 8009508:	b103      	cbz	r3, 800950c <_fstat_r+0x1c>
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	20004cf8 	.word	0x20004cf8

08009514 <_isatty_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d06      	ldr	r5, [pc, #24]	@ (8009530 <_isatty_r+0x1c>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	f7f8 f99a 	bl	8001858 <_isatty>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_isatty_r+0x1a>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_isatty_r+0x1a>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20004cf8 	.word	0x20004cf8

08009534 <_sbrk_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d06      	ldr	r5, [pc, #24]	@ (8009550 <_sbrk_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7f8 f9a2 	bl	8001888 <_sbrk>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_sbrk_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_sbrk_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20004cf8 	.word	0x20004cf8

08009554 <__assert_func>:
 8009554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009556:	4614      	mov	r4, r2
 8009558:	461a      	mov	r2, r3
 800955a:	4b09      	ldr	r3, [pc, #36]	@ (8009580 <__assert_func+0x2c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4605      	mov	r5, r0
 8009560:	68d8      	ldr	r0, [r3, #12]
 8009562:	b954      	cbnz	r4, 800957a <__assert_func+0x26>
 8009564:	4b07      	ldr	r3, [pc, #28]	@ (8009584 <__assert_func+0x30>)
 8009566:	461c      	mov	r4, r3
 8009568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800956c:	9100      	str	r1, [sp, #0]
 800956e:	462b      	mov	r3, r5
 8009570:	4905      	ldr	r1, [pc, #20]	@ (8009588 <__assert_func+0x34>)
 8009572:	f000 f86f 	bl	8009654 <fiprintf>
 8009576:	f000 f87f 	bl	8009678 <abort>
 800957a:	4b04      	ldr	r3, [pc, #16]	@ (800958c <__assert_func+0x38>)
 800957c:	e7f4      	b.n	8009568 <__assert_func+0x14>
 800957e:	bf00      	nop
 8009580:	2000001c 	.word	0x2000001c
 8009584:	08009d66 	.word	0x08009d66
 8009588:	08009d38 	.word	0x08009d38
 800958c:	08009d2b 	.word	0x08009d2b

08009590 <_calloc_r>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	fba1 5402 	umull	r5, r4, r1, r2
 8009596:	b93c      	cbnz	r4, 80095a8 <_calloc_r+0x18>
 8009598:	4629      	mov	r1, r5
 800959a:	f7fe ffa5 	bl	80084e8 <_malloc_r>
 800959e:	4606      	mov	r6, r0
 80095a0:	b928      	cbnz	r0, 80095ae <_calloc_r+0x1e>
 80095a2:	2600      	movs	r6, #0
 80095a4:	4630      	mov	r0, r6
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	220c      	movs	r2, #12
 80095aa:	6002      	str	r2, [r0, #0]
 80095ac:	e7f9      	b.n	80095a2 <_calloc_r+0x12>
 80095ae:	462a      	mov	r2, r5
 80095b0:	4621      	mov	r1, r4
 80095b2:	f7fe f84b 	bl	800764c <memset>
 80095b6:	e7f5      	b.n	80095a4 <_calloc_r+0x14>

080095b8 <__ascii_mbtowc>:
 80095b8:	b082      	sub	sp, #8
 80095ba:	b901      	cbnz	r1, 80095be <__ascii_mbtowc+0x6>
 80095bc:	a901      	add	r1, sp, #4
 80095be:	b142      	cbz	r2, 80095d2 <__ascii_mbtowc+0x1a>
 80095c0:	b14b      	cbz	r3, 80095d6 <__ascii_mbtowc+0x1e>
 80095c2:	7813      	ldrb	r3, [r2, #0]
 80095c4:	600b      	str	r3, [r1, #0]
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	1e10      	subs	r0, r2, #0
 80095ca:	bf18      	it	ne
 80095cc:	2001      	movne	r0, #1
 80095ce:	b002      	add	sp, #8
 80095d0:	4770      	bx	lr
 80095d2:	4610      	mov	r0, r2
 80095d4:	e7fb      	b.n	80095ce <__ascii_mbtowc+0x16>
 80095d6:	f06f 0001 	mvn.w	r0, #1
 80095da:	e7f8      	b.n	80095ce <__ascii_mbtowc+0x16>

080095dc <_realloc_r>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	4680      	mov	r8, r0
 80095e2:	4615      	mov	r5, r2
 80095e4:	460c      	mov	r4, r1
 80095e6:	b921      	cbnz	r1, 80095f2 <_realloc_r+0x16>
 80095e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ec:	4611      	mov	r1, r2
 80095ee:	f7fe bf7b 	b.w	80084e8 <_malloc_r>
 80095f2:	b92a      	cbnz	r2, 8009600 <_realloc_r+0x24>
 80095f4:	f7fe ff04 	bl	8008400 <_free_r>
 80095f8:	2400      	movs	r4, #0
 80095fa:	4620      	mov	r0, r4
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009600:	f000 f841 	bl	8009686 <_malloc_usable_size_r>
 8009604:	4285      	cmp	r5, r0
 8009606:	4606      	mov	r6, r0
 8009608:	d802      	bhi.n	8009610 <_realloc_r+0x34>
 800960a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800960e:	d8f4      	bhi.n	80095fa <_realloc_r+0x1e>
 8009610:	4629      	mov	r1, r5
 8009612:	4640      	mov	r0, r8
 8009614:	f7fe ff68 	bl	80084e8 <_malloc_r>
 8009618:	4607      	mov	r7, r0
 800961a:	2800      	cmp	r0, #0
 800961c:	d0ec      	beq.n	80095f8 <_realloc_r+0x1c>
 800961e:	42b5      	cmp	r5, r6
 8009620:	462a      	mov	r2, r5
 8009622:	4621      	mov	r1, r4
 8009624:	bf28      	it	cs
 8009626:	4632      	movcs	r2, r6
 8009628:	f7fe f88f 	bl	800774a <memcpy>
 800962c:	4621      	mov	r1, r4
 800962e:	4640      	mov	r0, r8
 8009630:	f7fe fee6 	bl	8008400 <_free_r>
 8009634:	463c      	mov	r4, r7
 8009636:	e7e0      	b.n	80095fa <_realloc_r+0x1e>

08009638 <__ascii_wctomb>:
 8009638:	4603      	mov	r3, r0
 800963a:	4608      	mov	r0, r1
 800963c:	b141      	cbz	r1, 8009650 <__ascii_wctomb+0x18>
 800963e:	2aff      	cmp	r2, #255	@ 0xff
 8009640:	d904      	bls.n	800964c <__ascii_wctomb+0x14>
 8009642:	228a      	movs	r2, #138	@ 0x8a
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800964a:	4770      	bx	lr
 800964c:	700a      	strb	r2, [r1, #0]
 800964e:	2001      	movs	r0, #1
 8009650:	4770      	bx	lr
	...

08009654 <fiprintf>:
 8009654:	b40e      	push	{r1, r2, r3}
 8009656:	b503      	push	{r0, r1, lr}
 8009658:	4601      	mov	r1, r0
 800965a:	ab03      	add	r3, sp, #12
 800965c:	4805      	ldr	r0, [pc, #20]	@ (8009674 <fiprintf+0x20>)
 800965e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009662:	6800      	ldr	r0, [r0, #0]
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f7ff fccf 	bl	8009008 <_vfiprintf_r>
 800966a:	b002      	add	sp, #8
 800966c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009670:	b003      	add	sp, #12
 8009672:	4770      	bx	lr
 8009674:	2000001c 	.word	0x2000001c

08009678 <abort>:
 8009678:	b508      	push	{r3, lr}
 800967a:	2006      	movs	r0, #6
 800967c:	f000 f834 	bl	80096e8 <raise>
 8009680:	2001      	movs	r0, #1
 8009682:	f7f8 f8a5 	bl	80017d0 <_exit>

08009686 <_malloc_usable_size_r>:
 8009686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968a:	1f18      	subs	r0, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	bfbc      	itt	lt
 8009690:	580b      	ldrlt	r3, [r1, r0]
 8009692:	18c0      	addlt	r0, r0, r3
 8009694:	4770      	bx	lr

08009696 <_raise_r>:
 8009696:	291f      	cmp	r1, #31
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	460c      	mov	r4, r1
 800969e:	d904      	bls.n	80096aa <_raise_r+0x14>
 80096a0:	2316      	movs	r3, #22
 80096a2:	6003      	str	r3, [r0, #0]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096ac:	b112      	cbz	r2, 80096b4 <_raise_r+0x1e>
 80096ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096b2:	b94b      	cbnz	r3, 80096c8 <_raise_r+0x32>
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f831 	bl	800971c <_getpid_r>
 80096ba:	4622      	mov	r2, r4
 80096bc:	4601      	mov	r1, r0
 80096be:	4628      	mov	r0, r5
 80096c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c4:	f000 b818 	b.w	80096f8 <_kill_r>
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d00a      	beq.n	80096e2 <_raise_r+0x4c>
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	d103      	bne.n	80096d8 <_raise_r+0x42>
 80096d0:	2316      	movs	r3, #22
 80096d2:	6003      	str	r3, [r0, #0]
 80096d4:	2001      	movs	r0, #1
 80096d6:	e7e7      	b.n	80096a8 <_raise_r+0x12>
 80096d8:	2100      	movs	r1, #0
 80096da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096de:	4620      	mov	r0, r4
 80096e0:	4798      	blx	r3
 80096e2:	2000      	movs	r0, #0
 80096e4:	e7e0      	b.n	80096a8 <_raise_r+0x12>
	...

080096e8 <raise>:
 80096e8:	4b02      	ldr	r3, [pc, #8]	@ (80096f4 <raise+0xc>)
 80096ea:	4601      	mov	r1, r0
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	f7ff bfd2 	b.w	8009696 <_raise_r>
 80096f2:	bf00      	nop
 80096f4:	2000001c 	.word	0x2000001c

080096f8 <_kill_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	@ (8009718 <_kill_r+0x20>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	f7f8 f853 	bl	80017b0 <_kill>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d102      	bne.n	8009714 <_kill_r+0x1c>
 800970e:	682b      	ldr	r3, [r5, #0]
 8009710:	b103      	cbz	r3, 8009714 <_kill_r+0x1c>
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	bf00      	nop
 8009718:	20004cf8 	.word	0x20004cf8

0800971c <_getpid_r>:
 800971c:	f7f8 b840 	b.w	80017a0 <_getpid>

08009720 <_init>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr

0800972c <_fini>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr
